
CANSAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012834  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000654  080129d8  080129d8  000229d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801302c  0801302c  00030350  2**0
                  CONTENTS
  4 .ARM          00000008  0801302c  0801302c  0002302c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013034  08013034  00030350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013034  08013034  00023034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013038  08013038  00023038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0801303c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ee8  20000350  0801338c  00030350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003238  0801338c  00033238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030ebc  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000602d  00000000  00000000  0006123c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f50  00000000  00000000  00067270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cf0  00000000  00000000  000691c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f5bd  00000000  00000000  0006aeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029058  00000000  00000000  0008a46d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d6b1  00000000  00000000  000b34c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00150b76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009618  00000000  00000000  00150bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000350 	.word	0x20000350
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080129bc 	.word	0x080129bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000354 	.word	0x20000354
 80001dc:	080129bc 	.word	0x080129bc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <SPL006_Init>:
#include "Goertek-SPL06-007.h"
#include "fox.h"
#include <math.h>

uint8_t SPL006_Init()
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af02      	add	r7, sp, #8
	uint8_t p_sampling[] = {0x06, 0b01110010};
 8000eb6:	f247 2306 	movw	r3, #29190	; 0x7206
 8000eba:	81bb      	strh	r3, [r7, #12]
	ret = HAL_I2C_Master_Transmit(&hi2c1, SPL006_ADDR, p_sampling, 2, HAL_MAX_DELAY);
 8000ebc:	23ec      	movs	r3, #236	; 0xec
 8000ebe:	b299      	uxth	r1, r3
 8000ec0:	f107 020c 	add.w	r2, r7, #12
 8000ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2302      	movs	r3, #2
 8000ecc:	481f      	ldr	r0, [pc, #124]	; (8000f4c <SPL006_Init+0x9c>)
 8000ece:	f002 fd2b 	bl	8003928 <HAL_I2C_Master_Transmit>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <SPL006_Init+0xa0>)
 8000ed8:	701a      	strb	r2, [r3, #0]

	uint8_t t_sampling[] = {0x07, 0b11110010};
 8000eda:	f24f 2307 	movw	r3, #61959	; 0xf207
 8000ede:	813b      	strh	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, SPL006_ADDR, t_sampling, 2, HAL_MAX_DELAY);
 8000ee0:	23ec      	movs	r3, #236	; 0xec
 8000ee2:	b299      	uxth	r1, r3
 8000ee4:	f107 0208 	add.w	r2, r7, #8
 8000ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2302      	movs	r3, #2
 8000ef0:	4816      	ldr	r0, [pc, #88]	; (8000f4c <SPL006_Init+0x9c>)
 8000ef2:	f002 fd19 	bl	8003928 <HAL_I2C_Master_Transmit>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <SPL006_Init+0xa0>)
 8000efc:	701a      	strb	r2, [r3, #0]

	uint8_t config[] = {0x08, 0b0111};
 8000efe:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8000f02:	80bb      	strh	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, SPL006_ADDR, config, 2, HAL_MAX_DELAY);
 8000f04:	23ec      	movs	r3, #236	; 0xec
 8000f06:	b299      	uxth	r1, r3
 8000f08:	1d3a      	adds	r2, r7, #4
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2302      	movs	r3, #2
 8000f12:	480e      	ldr	r0, [pc, #56]	; (8000f4c <SPL006_Init+0x9c>)
 8000f14:	f002 fd08 	bl	8003928 <HAL_I2C_Master_Transmit>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <SPL006_Init+0xa0>)
 8000f1e:	701a      	strb	r2, [r3, #0]

	uint8_t fifo[] = {0x09, 0x00};
 8000f20:	2309      	movs	r3, #9
 8000f22:	803b      	strh	r3, [r7, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, SPL006_ADDR, fifo, 2, HAL_MAX_DELAY);
 8000f24:	23ec      	movs	r3, #236	; 0xec
 8000f26:	b299      	uxth	r1, r3
 8000f28:	463a      	mov	r2, r7
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2302      	movs	r3, #2
 8000f32:	4806      	ldr	r0, [pc, #24]	; (8000f4c <SPL006_Init+0x9c>)
 8000f34:	f002 fcf8 	bl	8003928 <HAL_I2C_Master_Transmit>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <SPL006_Init+0xa0>)
 8000f3e:	701a      	strb	r2, [r3, #0]

	return 0;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000de0 	.word	0x20000de0
 8000f50:	20000e35 	.word	0x20000e35

08000f54 <SPL006_ReadTemperature>:

static int32_t SPL006_getTempRaw();
static int32_t SPL006_getPressureRaw();

float SPL006_ReadTemperature()
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
	int16_t c0 = SPL006_getC0();
 8000f5a:	f000 f8e5 	bl	8001128 <SPL006_getC0>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	80fb      	strh	r3, [r7, #6]
	int16_t c1 = SPL006_getC1();
 8000f62:	f000 f921 	bl	80011a8 <SPL006_getC1>
 8000f66:	4603      	mov	r3, r0
 8000f68:	80bb      	strh	r3, [r7, #4]
	float traw_sc = (float)SPL006_getTempRaw() / 3670016.0f; // for 4x prescaling at 128 hz
 8000f6a:	f000 fac5 	bl	80014f8 <SPL006_getTempRaw>
 8000f6e:	ee07 0a90 	vmov	s15, r0
 8000f72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f76:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000fb8 <SPL006_ReadTemperature+0x64>
 8000f7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f7e:	edc7 7a00 	vstr	s15, [r7]
	return (float)c0 * 0.5f + (float)c1 * traw_sc;
 8000f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f86:	ee07 3a90 	vmov	s15, r3
 8000f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f8e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f92:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f9a:	ee07 3a90 	vmov	s15, r3
 8000f9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fa2:	edd7 7a00 	vldr	s15, [r7]
 8000fa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000faa:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000fae:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	4a600000 	.word	0x4a600000

08000fbc <SPL006_ReadPressure>:

float SPL006_ReadPressure()
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0
	int32_t c00 = SPL006_getC00();
 8000fc2:	f000 f933 	bl	800122c <SPL006_getC00>
 8000fc6:	61f8      	str	r0, [r7, #28]
	int32_t c10 = SPL006_getC10();
 8000fc8:	f000 f966 	bl	8001298 <SPL006_getC10>
 8000fcc:	61b8      	str	r0, [r7, #24]
	int16_t c01 = SPL006_getC01();
 8000fce:	f000 f999 	bl	8001304 <SPL006_getC01>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	82fb      	strh	r3, [r7, #22]
	int16_t c11 = SPL006_getC11();
 8000fd6:	f000 f9c7 	bl	8001368 <SPL006_getC11>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	82bb      	strh	r3, [r7, #20]
	int16_t c20 = SPL006_getC20();
 8000fde:	f000 f9f5 	bl	80013cc <SPL006_getC20>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	827b      	strh	r3, [r7, #18]
	int16_t c21 = SPL006_getC21();
 8000fe6:	f000 fa23 	bl	8001430 <SPL006_getC21>
 8000fea:	4603      	mov	r3, r0
 8000fec:	823b      	strh	r3, [r7, #16]
	int16_t c30 = SPL006_getC30();
 8000fee:	f000 fa51 	bl	8001494 <SPL006_getC30>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	81fb      	strh	r3, [r7, #14]
	float traw_sc = (float)SPL006_getTempRaw() / 3670016.0f;
 8000ff6:	f000 fa7f 	bl	80014f8 <SPL006_getTempRaw>
 8000ffa:	ee07 0a90 	vmov	s15, r0
 8000ffe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001002:	eddf 6a33 	vldr	s13, [pc, #204]	; 80010d0 <SPL006_ReadPressure+0x114>
 8001006:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800100a:	edc7 7a02 	vstr	s15, [r7, #8]
	float praw_sc = (float)SPL006_getPressureRaw() / 3670016.0f;
 800100e:	f000 faa7 	bl	8001560 <SPL006_getPressureRaw>
 8001012:	ee07 0a90 	vmov	s15, r0
 8001016:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800101a:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80010d0 <SPL006_ReadPressure+0x114>
 800101e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001022:	edc7 7a01 	vstr	s15, [r7, #4]
	return (float)c00 + praw_sc * ((float)c10 + praw_sc * ((float)c20 + praw_sc * (float)c30)) + traw_sc * (float)c01 + traw_sc * praw_sc * ((float)c11 + praw_sc * (float)c21);
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	ee07 3a90 	vmov	s15, r3
 800102c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	ee07 3a90 	vmov	s15, r3
 8001036:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800103a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800103e:	ee07 3a90 	vmov	s15, r3
 8001042:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001046:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800104a:	ee07 3a90 	vmov	s15, r3
 800104e:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8001052:	edd7 7a01 	vldr	s15, [r7, #4]
 8001056:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800105a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800105e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001062:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001066:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800106a:	edd7 7a01 	vldr	s15, [r7, #4]
 800106e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001072:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001076:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800107a:	ee07 3a90 	vmov	s15, r3
 800107e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001082:	edd7 7a02 	vldr	s15, [r7, #8]
 8001086:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800108a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800108e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001092:	edd7 7a01 	vldr	s15, [r7, #4]
 8001096:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800109a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800109e:	ee07 3a90 	vmov	s15, r3
 80010a2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80010a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80010b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80010ba:	ee76 7a27 	vadd.f32	s15, s12, s15
 80010be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010c2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80010c6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ca:	3720      	adds	r7, #32
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	4a600000 	.word	0x4a600000

080010d4 <SPL006_ReadAltitude>:

float SPL006_ReadAltitude()
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
	float pressure = SPL006_ReadPressure();
 80010da:	f7ff ff6f 	bl	8000fbc <SPL006_ReadPressure>
 80010de:	ed87 0a01 	vstr	s0, [r7, #4]
	float sealevel_hpa = 100800.0f;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <SPL006_ReadAltitude+0x48>)
 80010e4:	603b      	str	r3, [r7, #0]
	return 44330.0f * (1.0f - powf(pressure / sealevel_hpa, 0.1903f));
 80010e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80010ea:	edd7 7a00 	vldr	s15, [r7]
 80010ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010f2:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8001120 <SPL006_ReadAltitude+0x4c>
 80010f6:	eeb0 0a66 	vmov.f32	s0, s13
 80010fa:	f00e f945 	bl	800f388 <powf>
 80010fe:	eef0 7a40 	vmov.f32	s15, s0
 8001102:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800110a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001124 <SPL006_ReadAltitude+0x50>
 800110e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001112:	eeb0 0a67 	vmov.f32	s0, s15
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	47c4e000 	.word	0x47c4e000
 8001120:	3e42de01 	.word	0x3e42de01
 8001124:	472d2a00 	.word	0x472d2a00

08001128 <SPL006_getC0>:

static int16_t SPL006_getC0()
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af02      	add	r7, sp, #8
	int16_t tmp;
	uint8_t data[3] = {0x10, 0x00, 0x00};
 800112e:	4a1c      	ldr	r2, [pc, #112]	; (80011a0 <SPL006_getC0+0x78>)
 8001130:	463b      	mov	r3, r7
 8001132:	6812      	ldr	r2, [r2, #0]
 8001134:	4611      	mov	r1, r2
 8001136:	8019      	strh	r1, [r3, #0]
 8001138:	3302      	adds	r3, #2
 800113a:	0c12      	lsrs	r2, r2, #16
 800113c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, SPL006_ADDR, data, 1, HAL_MAX_DELAY);
 800113e:	23ec      	movs	r3, #236	; 0xec
 8001140:	b299      	uxth	r1, r3
 8001142:	463a      	mov	r2, r7
 8001144:	f04f 33ff 	mov.w	r3, #4294967295
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	2301      	movs	r3, #1
 800114c:	4815      	ldr	r0, [pc, #84]	; (80011a4 <SPL006_getC0+0x7c>)
 800114e:	f002 fbeb 	bl	8003928 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, SPL006_ADDR, data+1, 2, HAL_MAX_DELAY);
 8001152:	23ec      	movs	r3, #236	; 0xec
 8001154:	b299      	uxth	r1, r3
 8001156:	463a      	mov	r2, r7
 8001158:	3201      	adds	r2, #1
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2302      	movs	r3, #2
 8001162:	4810      	ldr	r0, [pc, #64]	; (80011a4 <SPL006_getC0+0x7c>)
 8001164:	f002 fcde 	bl	8003b24 <HAL_I2C_Master_Receive>

	data[2] = data[2] >> 4;
 8001168:	78bb      	ldrb	r3, [r7, #2]
 800116a:	091b      	lsrs	r3, r3, #4
 800116c:	b2db      	uxtb	r3, r3
 800116e:	70bb      	strb	r3, [r7, #2]

	tmp = ((int16_t)data[1]<<4) | (int16_t)data[2];
 8001170:	787b      	ldrb	r3, [r7, #1]
 8001172:	011b      	lsls	r3, r3, #4
 8001174:	b21a      	sxth	r2, r3
 8001176:	78bb      	ldrb	r3, [r7, #2]
 8001178:	b21b      	sxth	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	80fb      	strh	r3, [r7, #6]

	if(tmp & (1<<11))
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001184:	2b00      	cmp	r3, #0
 8001186:	d005      	beq.n	8001194 <SPL006_getC0+0x6c>
		tmp |= 0xF000;
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800118e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001192:	80fb      	strh	r3, [r7, #6]

	return tmp;
 8001194:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	080129d8 	.word	0x080129d8
 80011a4:	20000de0 	.word	0x20000de0

080011a8 <SPL006_getC1>:

static int16_t SPL006_getC1()
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af02      	add	r7, sp, #8
	int16_t tmp;
	uint8_t data[3] = {0x11, 0x00, 0x00};
 80011ae:	4a1d      	ldr	r2, [pc, #116]	; (8001224 <SPL006_getC1+0x7c>)
 80011b0:	463b      	mov	r3, r7
 80011b2:	6812      	ldr	r2, [r2, #0]
 80011b4:	4611      	mov	r1, r2
 80011b6:	8019      	strh	r1, [r3, #0]
 80011b8:	3302      	adds	r3, #2
 80011ba:	0c12      	lsrs	r2, r2, #16
 80011bc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, SPL006_ADDR, data, 1, HAL_MAX_DELAY);
 80011be:	23ec      	movs	r3, #236	; 0xec
 80011c0:	b299      	uxth	r1, r3
 80011c2:	463a      	mov	r2, r7
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2301      	movs	r3, #1
 80011cc:	4816      	ldr	r0, [pc, #88]	; (8001228 <SPL006_getC1+0x80>)
 80011ce:	f002 fbab 	bl	8003928 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, SPL006_ADDR, data+1, 2, HAL_MAX_DELAY);
 80011d2:	23ec      	movs	r3, #236	; 0xec
 80011d4:	b299      	uxth	r1, r3
 80011d6:	463a      	mov	r2, r7
 80011d8:	3201      	adds	r2, #1
 80011da:	f04f 33ff 	mov.w	r3, #4294967295
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2302      	movs	r3, #2
 80011e2:	4811      	ldr	r0, [pc, #68]	; (8001228 <SPL006_getC1+0x80>)
 80011e4:	f002 fc9e 	bl	8003b24 <HAL_I2C_Master_Receive>

	data[1] = data[1] & 0x0F;
 80011e8:	787b      	ldrb	r3, [r7, #1]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	707b      	strb	r3, [r7, #1]

	tmp = ((int16_t)data[1] << 8) | (int16_t)data[2];
 80011f2:	787b      	ldrb	r3, [r7, #1]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	78bb      	ldrb	r3, [r7, #2]
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	4313      	orrs	r3, r2
 80011fe:	80fb      	strh	r3, [r7, #6]

	if(tmp & (1<<11))
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001206:	2b00      	cmp	r3, #0
 8001208:	d005      	beq.n	8001216 <SPL006_getC1+0x6e>
		tmp = tmp | 0xF000;
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001210:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001214:	80fb      	strh	r3, [r7, #6]

	return tmp;
 8001216:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	080129dc 	.word	0x080129dc
 8001228:	20000de0 	.word	0x20000de0

0800122c <SPL006_getC00>:

static int32_t SPL006_getC00()
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af02      	add	r7, sp, #8
	int32_t tmp;
	uint8_t data[4] = {0x13, 0x00, 0x00, 0x00};
 8001232:	2313      	movs	r3, #19
 8001234:	603b      	str	r3, [r7, #0]
	HAL_I2C_Master_Transmit(&hi2c1, SPL006_ADDR, data, 1, HAL_MAX_DELAY);
 8001236:	23ec      	movs	r3, #236	; 0xec
 8001238:	b299      	uxth	r1, r3
 800123a:	463a      	mov	r2, r7
 800123c:	f04f 33ff 	mov.w	r3, #4294967295
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2301      	movs	r3, #1
 8001244:	4813      	ldr	r0, [pc, #76]	; (8001294 <SPL006_getC00+0x68>)
 8001246:	f002 fb6f 	bl	8003928 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, SPL006_ADDR, data+1, 3, HAL_MAX_DELAY);
 800124a:	23ec      	movs	r3, #236	; 0xec
 800124c:	b299      	uxth	r1, r3
 800124e:	463a      	mov	r2, r7
 8001250:	3201      	adds	r2, #1
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2303      	movs	r3, #3
 800125a:	480e      	ldr	r0, [pc, #56]	; (8001294 <SPL006_getC00+0x68>)
 800125c:	f002 fc62 	bl	8003b24 <HAL_I2C_Master_Receive>

	tmp = ((int32_t)data[1] << 12) | ((int32_t)data[2] << 4) | ((int32_t)data[3] >> 4);
 8001260:	787b      	ldrb	r3, [r7, #1]
 8001262:	031a      	lsls	r2, r3, #12
 8001264:	78bb      	ldrb	r3, [r7, #2]
 8001266:	011b      	lsls	r3, r3, #4
 8001268:	4313      	orrs	r3, r2
 800126a:	78fa      	ldrb	r2, [r7, #3]
 800126c:	0912      	lsrs	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	4313      	orrs	r3, r2
 8001272:	607b      	str	r3, [r7, #4]

	if(tmp & (1<<19))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d005      	beq.n	800128a <SPL006_getC00+0x5e>
		tmp = tmp | 0xFFF00000;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8001284:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8001288:	607b      	str	r3, [r7, #4]

	return tmp;
 800128a:	687b      	ldr	r3, [r7, #4]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000de0 	.word	0x20000de0

08001298 <SPL006_getC10>:

static int32_t SPL006_getC10()
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af02      	add	r7, sp, #8
	int32_t tmp;
	uint8_t data[4] = {0x15, 0x00, 0x00, 0x00};
 800129e:	2315      	movs	r3, #21
 80012a0:	603b      	str	r3, [r7, #0]
	HAL_I2C_Master_Transmit(&hi2c1, SPL006_ADDR, data, 1, HAL_MAX_DELAY);
 80012a2:	23ec      	movs	r3, #236	; 0xec
 80012a4:	b299      	uxth	r1, r3
 80012a6:	463a      	mov	r2, r7
 80012a8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	4813      	ldr	r0, [pc, #76]	; (8001300 <SPL006_getC10+0x68>)
 80012b2:	f002 fb39 	bl	8003928 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, SPL006_ADDR, data+1, 3, HAL_MAX_DELAY);
 80012b6:	23ec      	movs	r3, #236	; 0xec
 80012b8:	b299      	uxth	r1, r3
 80012ba:	463a      	mov	r2, r7
 80012bc:	3201      	adds	r2, #1
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2303      	movs	r3, #3
 80012c6:	480e      	ldr	r0, [pc, #56]	; (8001300 <SPL006_getC10+0x68>)
 80012c8:	f002 fc2c 	bl	8003b24 <HAL_I2C_Master_Receive>

	tmp = ((int32_t)(data[1] & 0x0F) << 16) | ((int32_t)data[2] << 8) | (int32_t)data[3];
 80012cc:	787b      	ldrb	r3, [r7, #1]
 80012ce:	041b      	lsls	r3, r3, #16
 80012d0:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80012d4:	78bb      	ldrb	r3, [r7, #2]
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	4313      	orrs	r3, r2
 80012da:	78fa      	ldrb	r2, [r7, #3]
 80012dc:	4313      	orrs	r3, r2
 80012de:	607b      	str	r3, [r7, #4]

	if(tmp & (1<<19))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d005      	beq.n	80012f6 <SPL006_getC10+0x5e>
		tmp = tmp | 0xFFF00000;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80012f0:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 80012f4:	607b      	str	r3, [r7, #4]

	return tmp;
 80012f6:	687b      	ldr	r3, [r7, #4]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000de0 	.word	0x20000de0

08001304 <SPL006_getC01>:

static int16_t SPL006_getC01()
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af02      	add	r7, sp, #8
	int16_t tmp;
	uint8_t data[3] = {0x18, 0x00, 0x00};
 800130a:	4a15      	ldr	r2, [pc, #84]	; (8001360 <SPL006_getC01+0x5c>)
 800130c:	463b      	mov	r3, r7
 800130e:	6812      	ldr	r2, [r2, #0]
 8001310:	4611      	mov	r1, r2
 8001312:	8019      	strh	r1, [r3, #0]
 8001314:	3302      	adds	r3, #2
 8001316:	0c12      	lsrs	r2, r2, #16
 8001318:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, SPL006_ADDR, data, 1, HAL_MAX_DELAY);
 800131a:	23ec      	movs	r3, #236	; 0xec
 800131c:	b299      	uxth	r1, r3
 800131e:	463a      	mov	r2, r7
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2301      	movs	r3, #1
 8001328:	480e      	ldr	r0, [pc, #56]	; (8001364 <SPL006_getC01+0x60>)
 800132a:	f002 fafd 	bl	8003928 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, SPL006_ADDR, data+1, 2, HAL_MAX_DELAY);
 800132e:	23ec      	movs	r3, #236	; 0xec
 8001330:	b299      	uxth	r1, r3
 8001332:	463a      	mov	r2, r7
 8001334:	3201      	adds	r2, #1
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2302      	movs	r3, #2
 800133e:	4809      	ldr	r0, [pc, #36]	; (8001364 <SPL006_getC01+0x60>)
 8001340:	f002 fbf0 	bl	8003b24 <HAL_I2C_Master_Receive>

	tmp = ((int32_t)data[1] << 8) | (int32_t)data[2];
 8001344:	787b      	ldrb	r3, [r7, #1]
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	b21a      	sxth	r2, r3
 800134a:	78bb      	ldrb	r3, [r7, #2]
 800134c:	b21b      	sxth	r3, r3
 800134e:	4313      	orrs	r3, r2
 8001350:	80fb      	strh	r3, [r7, #6]

	return tmp;
 8001352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	080129e0 	.word	0x080129e0
 8001364:	20000de0 	.word	0x20000de0

08001368 <SPL006_getC11>:

static int16_t SPL006_getC11()
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af02      	add	r7, sp, #8
	int16_t tmp;
	uint8_t data[3] = {0x1A, 0x00, 0x00};
 800136e:	4a15      	ldr	r2, [pc, #84]	; (80013c4 <SPL006_getC11+0x5c>)
 8001370:	463b      	mov	r3, r7
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	4611      	mov	r1, r2
 8001376:	8019      	strh	r1, [r3, #0]
 8001378:	3302      	adds	r3, #2
 800137a:	0c12      	lsrs	r2, r2, #16
 800137c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, SPL006_ADDR, data, 1, HAL_MAX_DELAY);
 800137e:	23ec      	movs	r3, #236	; 0xec
 8001380:	b299      	uxth	r1, r3
 8001382:	463a      	mov	r2, r7
 8001384:	f04f 33ff 	mov.w	r3, #4294967295
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2301      	movs	r3, #1
 800138c:	480e      	ldr	r0, [pc, #56]	; (80013c8 <SPL006_getC11+0x60>)
 800138e:	f002 facb 	bl	8003928 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, SPL006_ADDR, data+1, 2, HAL_MAX_DELAY);
 8001392:	23ec      	movs	r3, #236	; 0xec
 8001394:	b299      	uxth	r1, r3
 8001396:	463a      	mov	r2, r7
 8001398:	3201      	adds	r2, #1
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	2302      	movs	r3, #2
 80013a2:	4809      	ldr	r0, [pc, #36]	; (80013c8 <SPL006_getC11+0x60>)
 80013a4:	f002 fbbe 	bl	8003b24 <HAL_I2C_Master_Receive>

	tmp = ((int32_t)data[1] << 8) | (int32_t)data[2];
 80013a8:	787b      	ldrb	r3, [r7, #1]
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	78bb      	ldrb	r3, [r7, #2]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	80fb      	strh	r3, [r7, #6]

	return tmp;
 80013b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	080129e4 	.word	0x080129e4
 80013c8:	20000de0 	.word	0x20000de0

080013cc <SPL006_getC20>:

static int16_t SPL006_getC20()
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af02      	add	r7, sp, #8
	int16_t tmp;
	uint8_t data[3] = {0x1C, 0x00, 0x00};
 80013d2:	4a15      	ldr	r2, [pc, #84]	; (8001428 <SPL006_getC20+0x5c>)
 80013d4:	463b      	mov	r3, r7
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	4611      	mov	r1, r2
 80013da:	8019      	strh	r1, [r3, #0]
 80013dc:	3302      	adds	r3, #2
 80013de:	0c12      	lsrs	r2, r2, #16
 80013e0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, SPL006_ADDR, data, 1, HAL_MAX_DELAY);
 80013e2:	23ec      	movs	r3, #236	; 0xec
 80013e4:	b299      	uxth	r1, r3
 80013e6:	463a      	mov	r2, r7
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2301      	movs	r3, #1
 80013f0:	480e      	ldr	r0, [pc, #56]	; (800142c <SPL006_getC20+0x60>)
 80013f2:	f002 fa99 	bl	8003928 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, SPL006_ADDR, data+1, 2, HAL_MAX_DELAY);
 80013f6:	23ec      	movs	r3, #236	; 0xec
 80013f8:	b299      	uxth	r1, r3
 80013fa:	463a      	mov	r2, r7
 80013fc:	3201      	adds	r2, #1
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2302      	movs	r3, #2
 8001406:	4809      	ldr	r0, [pc, #36]	; (800142c <SPL006_getC20+0x60>)
 8001408:	f002 fb8c 	bl	8003b24 <HAL_I2C_Master_Receive>

	tmp = ((int32_t)data[1] << 8) | (int32_t)data[2];
 800140c:	787b      	ldrb	r3, [r7, #1]
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	b21a      	sxth	r2, r3
 8001412:	78bb      	ldrb	r3, [r7, #2]
 8001414:	b21b      	sxth	r3, r3
 8001416:	4313      	orrs	r3, r2
 8001418:	80fb      	strh	r3, [r7, #6]

	return tmp;
 800141a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	080129e8 	.word	0x080129e8
 800142c:	20000de0 	.word	0x20000de0

08001430 <SPL006_getC21>:

static int16_t SPL006_getC21()
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af02      	add	r7, sp, #8
	int16_t tmp;
	uint8_t data[3] = {0x1E, 0x00, 0x00};
 8001436:	4a15      	ldr	r2, [pc, #84]	; (800148c <SPL006_getC21+0x5c>)
 8001438:	463b      	mov	r3, r7
 800143a:	6812      	ldr	r2, [r2, #0]
 800143c:	4611      	mov	r1, r2
 800143e:	8019      	strh	r1, [r3, #0]
 8001440:	3302      	adds	r3, #2
 8001442:	0c12      	lsrs	r2, r2, #16
 8001444:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, SPL006_ADDR, data, 1, HAL_MAX_DELAY);
 8001446:	23ec      	movs	r3, #236	; 0xec
 8001448:	b299      	uxth	r1, r3
 800144a:	463a      	mov	r2, r7
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2301      	movs	r3, #1
 8001454:	480e      	ldr	r0, [pc, #56]	; (8001490 <SPL006_getC21+0x60>)
 8001456:	f002 fa67 	bl	8003928 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, SPL006_ADDR, data+1, 2, HAL_MAX_DELAY);
 800145a:	23ec      	movs	r3, #236	; 0xec
 800145c:	b299      	uxth	r1, r3
 800145e:	463a      	mov	r2, r7
 8001460:	3201      	adds	r2, #1
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	2302      	movs	r3, #2
 800146a:	4809      	ldr	r0, [pc, #36]	; (8001490 <SPL006_getC21+0x60>)
 800146c:	f002 fb5a 	bl	8003b24 <HAL_I2C_Master_Receive>

	tmp = ((int32_t)data[1] << 8) | (int32_t)data[2];
 8001470:	787b      	ldrb	r3, [r7, #1]
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	b21a      	sxth	r2, r3
 8001476:	78bb      	ldrb	r3, [r7, #2]
 8001478:	b21b      	sxth	r3, r3
 800147a:	4313      	orrs	r3, r2
 800147c:	80fb      	strh	r3, [r7, #6]

	return tmp;
 800147e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	080129ec 	.word	0x080129ec
 8001490:	20000de0 	.word	0x20000de0

08001494 <SPL006_getC30>:

static int16_t SPL006_getC30()
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af02      	add	r7, sp, #8
	int16_t tmp;
	uint8_t data[3] = {0x20, 0x00, 0x00};
 800149a:	4a15      	ldr	r2, [pc, #84]	; (80014f0 <SPL006_getC30+0x5c>)
 800149c:	463b      	mov	r3, r7
 800149e:	6812      	ldr	r2, [r2, #0]
 80014a0:	4611      	mov	r1, r2
 80014a2:	8019      	strh	r1, [r3, #0]
 80014a4:	3302      	adds	r3, #2
 80014a6:	0c12      	lsrs	r2, r2, #16
 80014a8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, SPL006_ADDR, data, 1, HAL_MAX_DELAY);
 80014aa:	23ec      	movs	r3, #236	; 0xec
 80014ac:	b299      	uxth	r1, r3
 80014ae:	463a      	mov	r2, r7
 80014b0:	f04f 33ff 	mov.w	r3, #4294967295
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2301      	movs	r3, #1
 80014b8:	480e      	ldr	r0, [pc, #56]	; (80014f4 <SPL006_getC30+0x60>)
 80014ba:	f002 fa35 	bl	8003928 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, SPL006_ADDR, data+1, 2, HAL_MAX_DELAY);
 80014be:	23ec      	movs	r3, #236	; 0xec
 80014c0:	b299      	uxth	r1, r3
 80014c2:	463a      	mov	r2, r7
 80014c4:	3201      	adds	r2, #1
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2302      	movs	r3, #2
 80014ce:	4809      	ldr	r0, [pc, #36]	; (80014f4 <SPL006_getC30+0x60>)
 80014d0:	f002 fb28 	bl	8003b24 <HAL_I2C_Master_Receive>

	tmp = ((int32_t)data[1] << 8) | (int32_t)data[2];
 80014d4:	787b      	ldrb	r3, [r7, #1]
 80014d6:	021b      	lsls	r3, r3, #8
 80014d8:	b21a      	sxth	r2, r3
 80014da:	78bb      	ldrb	r3, [r7, #2]
 80014dc:	b21b      	sxth	r3, r3
 80014de:	4313      	orrs	r3, r2
 80014e0:	80fb      	strh	r3, [r7, #6]

	return tmp;
 80014e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	080129f0 	.word	0x080129f0
 80014f4:	20000de0 	.word	0x20000de0

080014f8 <SPL006_getTempRaw>:

static int32_t SPL006_getTempRaw()
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af02      	add	r7, sp, #8
	int32_t tmp;
	uint8_t data[4] = {0x03, 0x00, 0x00, 0x00};
 80014fe:	2303      	movs	r3, #3
 8001500:	603b      	str	r3, [r7, #0]
	HAL_I2C_Master_Transmit(&hi2c1, SPL006_ADDR, data, 1, HAL_MAX_DELAY);
 8001502:	23ec      	movs	r3, #236	; 0xec
 8001504:	b299      	uxth	r1, r3
 8001506:	463a      	mov	r2, r7
 8001508:	f04f 33ff 	mov.w	r3, #4294967295
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	2301      	movs	r3, #1
 8001510:	4812      	ldr	r0, [pc, #72]	; (800155c <SPL006_getTempRaw+0x64>)
 8001512:	f002 fa09 	bl	8003928 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, SPL006_ADDR, data+1, 3, HAL_MAX_DELAY);
 8001516:	23ec      	movs	r3, #236	; 0xec
 8001518:	b299      	uxth	r1, r3
 800151a:	463a      	mov	r2, r7
 800151c:	3201      	adds	r2, #1
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	2303      	movs	r3, #3
 8001526:	480d      	ldr	r0, [pc, #52]	; (800155c <SPL006_getTempRaw+0x64>)
 8001528:	f002 fafc 	bl	8003b24 <HAL_I2C_Master_Receive>

	tmp = ((int32_t)data[1] << 8) | (int32_t)data[2];
 800152c:	787b      	ldrb	r3, [r7, #1]
 800152e:	021b      	lsls	r3, r3, #8
 8001530:	78ba      	ldrb	r2, [r7, #2]
 8001532:	4313      	orrs	r3, r2
 8001534:	607b      	str	r3, [r7, #4]
	tmp = (tmp << 8) | (int32_t)data[3];
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	78fa      	ldrb	r2, [r7, #3]
 800153c:	4313      	orrs	r3, r2
 800153e:	607b      	str	r3, [r7, #4]

	if(tmp & (1<<23))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <SPL006_getTempRaw+0x5a>
		tmp = tmp | 0xFF000000;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001550:	607b      	str	r3, [r7, #4]

	return tmp;
 8001552:	687b      	ldr	r3, [r7, #4]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000de0 	.word	0x20000de0

08001560 <SPL006_getPressureRaw>:

static int32_t SPL006_getPressureRaw()
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af02      	add	r7, sp, #8
	int32_t tmp;
	uint8_t data[4] = {0x00, 0x00, 0x00, 0x00};
 8001566:	2300      	movs	r3, #0
 8001568:	603b      	str	r3, [r7, #0]
	HAL_I2C_Master_Transmit(&hi2c1, SPL006_ADDR, data, 1, HAL_MAX_DELAY);
 800156a:	23ec      	movs	r3, #236	; 0xec
 800156c:	b299      	uxth	r1, r3
 800156e:	463a      	mov	r2, r7
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	2301      	movs	r3, #1
 8001578:	4812      	ldr	r0, [pc, #72]	; (80015c4 <SPL006_getPressureRaw+0x64>)
 800157a:	f002 f9d5 	bl	8003928 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, SPL006_ADDR, data+1, 3, HAL_MAX_DELAY);
 800157e:	23ec      	movs	r3, #236	; 0xec
 8001580:	b299      	uxth	r1, r3
 8001582:	463a      	mov	r2, r7
 8001584:	3201      	adds	r2, #1
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2303      	movs	r3, #3
 800158e:	480d      	ldr	r0, [pc, #52]	; (80015c4 <SPL006_getPressureRaw+0x64>)
 8001590:	f002 fac8 	bl	8003b24 <HAL_I2C_Master_Receive>

	tmp = ((int32_t)data[1] << 8) | (int32_t)data[2];
 8001594:	787b      	ldrb	r3, [r7, #1]
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	78ba      	ldrb	r2, [r7, #2]
 800159a:	4313      	orrs	r3, r2
 800159c:	607b      	str	r3, [r7, #4]
	tmp = (tmp << 8) | (int32_t)data[3];
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	78fa      	ldrb	r2, [r7, #3]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	607b      	str	r3, [r7, #4]

	if(tmp & (1<<23))
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <SPL006_getPressureRaw+0x5a>
		tmp = tmp | 0xFF000000;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80015b8:	607b      	str	r3, [r7, #4]

	return tmp;
 80015ba:	687b      	ldr	r3, [r7, #4]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000de0 	.word	0x20000de0

080015c8 <BMX055_init>:
#define MAGNET_DISABLE HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
#define GYRO_ENABLE HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
#define GYRO_DISABLE HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);

void BMX055_init(SPI_HandleTypeDef* hspi)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	ACCEL_DISABLE;
 80015d0:	2201      	movs	r2, #1
 80015d2:	2101      	movs	r1, #1
 80015d4:	4814      	ldr	r0, [pc, #80]	; (8001628 <BMX055_init+0x60>)
 80015d6:	f002 f849 	bl	800366c <HAL_GPIO_WritePin>
	MAGNET_DISABLE;
 80015da:	2201      	movs	r2, #1
 80015dc:	2102      	movs	r1, #2
 80015de:	4812      	ldr	r0, [pc, #72]	; (8001628 <BMX055_init+0x60>)
 80015e0:	f002 f844 	bl	800366c <HAL_GPIO_WritePin>
	GYRO_DISABLE;
 80015e4:	2201      	movs	r2, #1
 80015e6:	2104      	movs	r1, #4
 80015e8:	480f      	ldr	r0, [pc, #60]	; (8001628 <BMX055_init+0x60>)
 80015ea:	f002 f83f 	bl	800366c <HAL_GPIO_WritePin>

	MAGNET_ENABLE;
 80015ee:	2200      	movs	r2, #0
 80015f0:	2102      	movs	r1, #2
 80015f2:	480d      	ldr	r0, [pc, #52]	; (8001628 <BMX055_init+0x60>)
 80015f4:	f002 f83a 	bl	800366c <HAL_GPIO_WritePin>
	uint8_t data1[2] = {0x4B, 0x01};
 80015f8:	f240 134b 	movw	r3, #331	; 0x14b
 80015fc:	81bb      	strh	r3, [r7, #12]
	HAL_SPI_Transmit(hspi, data1, 2, 1000);
 80015fe:	f107 010c 	add.w	r1, r7, #12
 8001602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001606:	2202      	movs	r2, #2
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f006 f977 	bl	80078fc <HAL_SPI_Transmit>
	MAGNET_DISABLE;
 800160e:	2201      	movs	r2, #1
 8001610:	2102      	movs	r1, #2
 8001612:	4805      	ldr	r0, [pc, #20]	; (8001628 <BMX055_init+0x60>)
 8001614:	f002 f82a 	bl	800366c <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8001618:	2064      	movs	r0, #100	; 0x64
 800161a:	f001 f9b7 	bl	800298c <HAL_Delay>
}
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40020400 	.word	0x40020400

0800162c <BMX055_readAccel>:
	GYRO_DISABLE;
	return id[1];
}

void BMX055_readAccel(SPI_HandleTypeDef* hspi, int16_t data[3])
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af02      	add	r7, sp, #8
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
	uint8_t raw_data[7];
	uint8_t id_addr[1] = {(0x02 | 0x80)};
 8001636:	2382      	movs	r3, #130	; 0x82
 8001638:	733b      	strb	r3, [r7, #12]

	ACCEL_ENABLE;
 800163a:	2200      	movs	r2, #0
 800163c:	2101      	movs	r1, #1
 800163e:	481a      	ldr	r0, [pc, #104]	; (80016a8 <BMX055_readAccel+0x7c>)
 8001640:	f002 f814 	bl	800366c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi, id_addr, raw_data, 7, 1000);
 8001644:	f107 0210 	add.w	r2, r7, #16
 8001648:	f107 010c 	add.w	r1, r7, #12
 800164c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	2307      	movs	r3, #7
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f006 fa8d 	bl	8007b74 <HAL_SPI_TransmitReceive>
	ACCEL_DISABLE;
 800165a:	2201      	movs	r2, #1
 800165c:	2101      	movs	r1, #1
 800165e:	4812      	ldr	r0, [pc, #72]	; (80016a8 <BMX055_readAccel+0x7c>)
 8001660:	f002 f804 	bl	800366c <HAL_GPIO_WritePin>

	data[0] = raw_data[1] | (raw_data[2] << 8);
 8001664:	7c7b      	ldrb	r3, [r7, #17]
 8001666:	b21a      	sxth	r2, r3
 8001668:	7cbb      	ldrb	r3, [r7, #18]
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	b21b      	sxth	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	b21a      	sxth	r2, r3
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	801a      	strh	r2, [r3, #0]
	data[1] = raw_data[3] | (raw_data[4] << 8);
 8001676:	7cfb      	ldrb	r3, [r7, #19]
 8001678:	b219      	sxth	r1, r3
 800167a:	7d3b      	ldrb	r3, [r7, #20]
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	b21a      	sxth	r2, r3
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	3302      	adds	r3, #2
 8001684:	430a      	orrs	r2, r1
 8001686:	b212      	sxth	r2, r2
 8001688:	801a      	strh	r2, [r3, #0]
	data[2] = raw_data[5] | (raw_data[6] << 8);
 800168a:	7d7b      	ldrb	r3, [r7, #21]
 800168c:	b219      	sxth	r1, r3
 800168e:	7dbb      	ldrb	r3, [r7, #22]
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b21a      	sxth	r2, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	3304      	adds	r3, #4
 8001698:	430a      	orrs	r2, r1
 800169a:	b212      	sxth	r2, r2
 800169c:	801a      	strh	r2, [r3, #0]
}
 800169e:	bf00      	nop
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40020400 	.word	0x40020400

080016ac <BMX055_readGyro>:
	data[1] = ((raw_data[4] << 8) + (raw_data[3] & 0xF8));
	data[2] = ((raw_data[6] << 8) + (raw_data[5] & 0xFE));
}

void BMX055_readGyro(SPI_HandleTypeDef* hspi, int16_t data[3])
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af02      	add	r7, sp, #8
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
	uint8_t raw_data[7];
	uint8_t id_addr[1] = {(0x02 | 0x80)};
 80016b6:	2382      	movs	r3, #130	; 0x82
 80016b8:	733b      	strb	r3, [r7, #12]

	GYRO_ENABLE;
 80016ba:	2200      	movs	r2, #0
 80016bc:	2104      	movs	r1, #4
 80016be:	481a      	ldr	r0, [pc, #104]	; (8001728 <BMX055_readGyro+0x7c>)
 80016c0:	f001 ffd4 	bl	800366c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi, id_addr, raw_data, 7, 1000);
 80016c4:	f107 0210 	add.w	r2, r7, #16
 80016c8:	f107 010c 	add.w	r1, r7, #12
 80016cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	2307      	movs	r3, #7
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f006 fa4d 	bl	8007b74 <HAL_SPI_TransmitReceive>
	GYRO_DISABLE;
 80016da:	2201      	movs	r2, #1
 80016dc:	2104      	movs	r1, #4
 80016de:	4812      	ldr	r0, [pc, #72]	; (8001728 <BMX055_readGyro+0x7c>)
 80016e0:	f001 ffc4 	bl	800366c <HAL_GPIO_WritePin>

	data[0] = raw_data[1] | (raw_data[2] << 8);
 80016e4:	7c7b      	ldrb	r3, [r7, #17]
 80016e6:	b21a      	sxth	r2, r3
 80016e8:	7cbb      	ldrb	r3, [r7, #18]
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	4313      	orrs	r3, r2
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	801a      	strh	r2, [r3, #0]
	data[1] = raw_data[3] | (raw_data[4] << 8);
 80016f6:	7cfb      	ldrb	r3, [r7, #19]
 80016f8:	b219      	sxth	r1, r3
 80016fa:	7d3b      	ldrb	r3, [r7, #20]
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	b21a      	sxth	r2, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	3302      	adds	r3, #2
 8001704:	430a      	orrs	r2, r1
 8001706:	b212      	sxth	r2, r2
 8001708:	801a      	strh	r2, [r3, #0]
	data[2] = raw_data[5] | (raw_data[6] << 8);
 800170a:	7d7b      	ldrb	r3, [r7, #21]
 800170c:	b219      	sxth	r1, r3
 800170e:	7dbb      	ldrb	r3, [r7, #22]
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	b21a      	sxth	r2, r3
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	3304      	adds	r3, #4
 8001718:	430a      	orrs	r2, r1
 800171a:	b212      	sxth	r2, r2
 800171c:	801a      	strh	r2, [r3, #0]
}
 800171e:	bf00      	nop
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40020400 	.word	0x40020400

0800172c <BMX055_setAccelRange>:

void BMX055_setAccelRange(SPI_HandleTypeDef* hspi, accel_range_t range)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	70fb      	strb	r3, [r7, #3]
	ACCEL_ENABLE;
 8001738:	2200      	movs	r2, #0
 800173a:	2101      	movs	r1, #1
 800173c:	480b      	ldr	r0, [pc, #44]	; (800176c <BMX055_setAccelRange+0x40>)
 800173e:	f001 ff95 	bl	800366c <HAL_GPIO_WritePin>
	uint8_t data[2] = {0x0F, (uint8_t)range};
 8001742:	230f      	movs	r3, #15
 8001744:	733b      	strb	r3, [r7, #12]
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(hspi, data, 2, 1000);
 800174a:	f107 010c 	add.w	r1, r7, #12
 800174e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001752:	2202      	movs	r2, #2
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f006 f8d1 	bl	80078fc <HAL_SPI_Transmit>
	ACCEL_DISABLE;
 800175a:	2201      	movs	r2, #1
 800175c:	2101      	movs	r1, #1
 800175e:	4803      	ldr	r0, [pc, #12]	; (800176c <BMX055_setAccelRange+0x40>)
 8001760:	f001 ff84 	bl	800366c <HAL_GPIO_WritePin>
}
 8001764:	bf00      	nop
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40020400 	.word	0x40020400

08001770 <BMX055_setGyroRange>:

void BMX055_setGyroRange(SPI_HandleTypeDef* hspi, gyro_range_t range)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	70fb      	strb	r3, [r7, #3]
	GYRO_ENABLE;
 800177c:	2200      	movs	r2, #0
 800177e:	2104      	movs	r1, #4
 8001780:	480b      	ldr	r0, [pc, #44]	; (80017b0 <BMX055_setGyroRange+0x40>)
 8001782:	f001 ff73 	bl	800366c <HAL_GPIO_WritePin>
	uint8_t data[2] = {0x0F, (uint8_t)range};
 8001786:	230f      	movs	r3, #15
 8001788:	733b      	strb	r3, [r7, #12]
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(hspi, data, 2, 1000);
 800178e:	f107 010c 	add.w	r1, r7, #12
 8001792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001796:	2202      	movs	r2, #2
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f006 f8af 	bl	80078fc <HAL_SPI_Transmit>
	GYRO_DISABLE;
 800179e:	2201      	movs	r2, #1
 80017a0:	2104      	movs	r1, #4
 80017a2:	4803      	ldr	r0, [pc, #12]	; (80017b0 <BMX055_setGyroRange+0x40>)
 80017a4:	f001 ff62 	bl	800366c <HAL_GPIO_WritePin>
}
 80017a8:	bf00      	nop
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40020400 	.word	0x40020400

080017b4 <Filter_init>:
 */

#include "filter.h"

void Filter_init(filter_t *me, float hz, float dt)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80017c0:	edc7 0a01 	vstr	s1, [r7, #4]
	float rc = 1.0f / (2.0f * 3.141592f * hz);
 80017c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80017c8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001824 <Filter_init+0x70>
 80017cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017d8:	edc7 7a05 	vstr	s15, [r7, #20]
	me->filter_coefficient_x = dt / (dt + rc);
 80017dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80017e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80017e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017e8:	edd7 6a01 	vldr	s13, [r7, #4]
 80017ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	edc3 7a00 	vstr	s15, [r3]
	me->filter_coefficient_y = rc / (dt + rc);
 80017f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80017fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80017fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001802:	edd7 6a05 	vldr	s13, [r7, #20]
 8001806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	edc3 7a01 	vstr	s15, [r3, #4]
	me->previous_value = 0.0f;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
}
 8001818:	bf00      	nop
 800181a:	371c      	adds	r7, #28
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	40c90fd8 	.word	0x40c90fd8

08001828 <Filter_run>:

float Filter_run(filter_t *me, float current_value)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	ed87 0a00 	vstr	s0, [r7]
	float filtered_value = current_value * me->filter_coefficient_x + me->previous_value * me->filter_coefficient_y;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	ed93 7a00 	vldr	s14, [r3]
 800183a:	edd7 7a00 	vldr	s15, [r7]
 800183e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	edd3 6a02 	vldr	s13, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	edd3 7a01 	vldr	s15, [r3, #4]
 800184e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001856:	edc7 7a03 	vstr	s15, [r7, #12]
	me->previous_value = filtered_value;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	609a      	str	r2, [r3, #8]
	return filtered_value;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	ee07 3a90 	vmov	s15, r3
}
 8001866:	eeb0 0a67 	vmov.f32	s0, s15
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800187a:	f001 f815 	bl	80028a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800187e:	f000 f8c5 	bl	8001a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001882:	f000 f9fb 	bl	8001c7c <MX_GPIO_Init>
  MX_DMA_Init();
 8001886:	f000 f9d1 	bl	8001c2c <MX_DMA_Init>
  MX_I2C1_Init();
 800188a:	f000 f927 	bl	8001adc <MX_I2C1_Init>
  MX_SPI1_Init();
 800188e:	f000 f973 	bl	8001b78 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001892:	f00c fff7 	bl	800e884 <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 8001896:	f000 f94f 	bl	8001b38 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800189a:	f008 ff45 	bl	800a728 <MX_FATFS_Init>
  MX_TIM10_Init();
 800189e:	f000 f9a1 	bl	8001be4 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  	// wait for stuff
	HAL_Delay(500);
 80018a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018a6:	f001 f871 	bl	800298c <HAL_Delay>

	// init gyroscope
	BMX055_init(&hspi1);
 80018aa:	484a      	ldr	r0, [pc, #296]	; (80019d4 <main+0x160>)
 80018ac:	f7ff fe8c 	bl	80015c8 <BMX055_init>
	BMX055_setGyroRange(&hspi1, g250g);
 80018b0:	2103      	movs	r1, #3
 80018b2:	4848      	ldr	r0, [pc, #288]	; (80019d4 <main+0x160>)
 80018b4:	f7ff ff5c 	bl	8001770 <BMX055_setGyroRange>
	BMX055_setAccelRange(&hspi1, a4g);
 80018b8:	2105      	movs	r1, #5
 80018ba:	4846      	ldr	r0, [pc, #280]	; (80019d4 <main+0x160>)
 80018bc:	f7ff ff36 	bl	800172c <BMX055_setAccelRange>

	// init pressure sensor
	SPL006_Init();
 80018c0:	f7ff faf6 	bl	8000eb0 <SPL006_Init>

	HAL_Delay(200);
 80018c4:	20c8      	movs	r0, #200	; 0xc8
 80018c6:	f001 f861 	bl	800298c <HAL_Delay>

	// init filters;
	Filter_init(&filter_accel_x, 3.0f, 0.0333f);
 80018ca:	eddf 0a43 	vldr	s1, [pc, #268]	; 80019d8 <main+0x164>
 80018ce:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80018d2:	4842      	ldr	r0, [pc, #264]	; (80019dc <main+0x168>)
 80018d4:	f7ff ff6e 	bl	80017b4 <Filter_init>
	Filter_init(&filter_accel_y, 3.0f, 0.0333f);
 80018d8:	eddf 0a3f 	vldr	s1, [pc, #252]	; 80019d8 <main+0x164>
 80018dc:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80018e0:	483f      	ldr	r0, [pc, #252]	; (80019e0 <main+0x16c>)
 80018e2:	f7ff ff67 	bl	80017b4 <Filter_init>
	Filter_init(&filter_accel_z, 3.0f, 0.0333f);
 80018e6:	eddf 0a3c 	vldr	s1, [pc, #240]	; 80019d8 <main+0x164>
 80018ea:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80018ee:	483d      	ldr	r0, [pc, #244]	; (80019e4 <main+0x170>)
 80018f0:	f7ff ff60 	bl	80017b4 <Filter_init>
	Filter_init(&filter_gyro_x, 3.0f, 0.0333f);
 80018f4:	eddf 0a38 	vldr	s1, [pc, #224]	; 80019d8 <main+0x164>
 80018f8:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80018fc:	483a      	ldr	r0, [pc, #232]	; (80019e8 <main+0x174>)
 80018fe:	f7ff ff59 	bl	80017b4 <Filter_init>
	Filter_init(&filter_gyro_y, 3.0f, 0.0333f);
 8001902:	eddf 0a35 	vldr	s1, [pc, #212]	; 80019d8 <main+0x164>
 8001906:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800190a:	4838      	ldr	r0, [pc, #224]	; (80019ec <main+0x178>)
 800190c:	f7ff ff52 	bl	80017b4 <Filter_init>
	Filter_init(&filter_gyro_z, 3.0f, 0.0333f);
 8001910:	eddf 0a31 	vldr	s1, [pc, #196]	; 80019d8 <main+0x164>
 8001914:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8001918:	4835      	ldr	r0, [pc, #212]	; (80019f0 <main+0x17c>)
 800191a:	f7ff ff4b 	bl	80017b4 <Filter_init>
	Filter_init(&filter_temperature, 3.0f, 0.0333f);
 800191e:	eddf 0a2e 	vldr	s1, [pc, #184]	; 80019d8 <main+0x164>
 8001922:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8001926:	4833      	ldr	r0, [pc, #204]	; (80019f4 <main+0x180>)
 8001928:	f7ff ff44 	bl	80017b4 <Filter_init>
	Filter_init(&filter_altitude, 3.0f, 0.0333f);
 800192c:	eddf 0a2a 	vldr	s1, [pc, #168]	; 80019d8 <main+0x164>
 8001930:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8001934:	4830      	ldr	r0, [pc, #192]	; (80019f8 <main+0x184>)
 8001936:	f7ff ff3d 	bl	80017b4 <Filter_init>

	// init sd stuff
	initBinaryData();
 800193a:	f000 fa11 	bl	8001d60 <initBinaryData>

	// start indicator
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800193e:	2201      	movs	r2, #1
 8001940:	2104      	movs	r1, #4
 8001942:	482e      	ldr	r0, [pc, #184]	; (80019fc <main+0x188>)
 8001944:	f001 fe92 	bl	800366c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001948:	2064      	movs	r0, #100	; 0x64
 800194a:	f001 f81f 	bl	800298c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	2104      	movs	r1, #4
 8001952:	482a      	ldr	r0, [pc, #168]	; (80019fc <main+0x188>)
 8001954:	f001 fe8a 	bl	800366c <HAL_GPIO_WritePin>

	// init timer
	HAL_TIM_Base_Start_IT(&htim10);
 8001958:	4829      	ldr	r0, [pc, #164]	; (8001a00 <main+0x18c>)
 800195a:	f006 fbc7 	bl	80080ec <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		unsigned char minutes = save_counter / 1800;
 800195e:	4b29      	ldr	r3, [pc, #164]	; (8001a04 <main+0x190>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a29      	ldr	r2, [pc, #164]	; (8001a08 <main+0x194>)
 8001964:	fba2 2303 	umull	r2, r3, r2, r3
 8001968:	0a9b      	lsrs	r3, r3, #10
 800196a:	71fb      	strb	r3, [r7, #7]

		if(minutes & (1<<0)) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d005      	beq.n	8001982 <main+0x10e>
 8001976:	2201      	movs	r2, #1
 8001978:	2104      	movs	r1, #4
 800197a:	4820      	ldr	r0, [pc, #128]	; (80019fc <main+0x188>)
 800197c:	f001 fe76 	bl	800366c <HAL_GPIO_WritePin>
 8001980:	e004      	b.n	800198c <main+0x118>
		else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001982:	2200      	movs	r2, #0
 8001984:	2104      	movs	r1, #4
 8001986:	481d      	ldr	r0, [pc, #116]	; (80019fc <main+0x188>)
 8001988:	f001 fe70 	bl	800366c <HAL_GPIO_WritePin>

		if(minutes & (1<<1)) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d005      	beq.n	80019a2 <main+0x12e>
 8001996:	2201      	movs	r2, #1
 8001998:	2108      	movs	r1, #8
 800199a:	4818      	ldr	r0, [pc, #96]	; (80019fc <main+0x188>)
 800199c:	f001 fe66 	bl	800366c <HAL_GPIO_WritePin>
 80019a0:	e004      	b.n	80019ac <main+0x138>
		else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2108      	movs	r1, #8
 80019a6:	4815      	ldr	r0, [pc, #84]	; (80019fc <main+0x188>)
 80019a8:	f001 fe60 	bl	800366c <HAL_GPIO_WritePin>

		if(minutes & (1<<2)) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d005      	beq.n	80019c2 <main+0x14e>
 80019b6:	2201      	movs	r2, #1
 80019b8:	2110      	movs	r1, #16
 80019ba:	4810      	ldr	r0, [pc, #64]	; (80019fc <main+0x188>)
 80019bc:	f001 fe56 	bl	800366c <HAL_GPIO_WritePin>
 80019c0:	e004      	b.n	80019cc <main+0x158>
		else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2110      	movs	r1, #16
 80019c6:	480d      	ldr	r0, [pc, #52]	; (80019fc <main+0x188>)
 80019c8:	f001 fe50 	bl	800366c <HAL_GPIO_WritePin>

		HAL_Delay(100);
 80019cc:	2064      	movs	r0, #100	; 0x64
 80019ce:	f000 ffdd 	bl	800298c <HAL_Delay>
	while (1) {
 80019d2:	e7c4      	b.n	800195e <main+0xea>
 80019d4:	20001014 	.word	0x20001014
 80019d8:	3d086595 	.word	0x3d086595
 80019dc:	200014d8 	.word	0x200014d8
 80019e0:	2000129c 	.word	0x2000129c
 80019e4:	20000eec 	.word	0x20000eec
 80019e8:	20000f14 	.word	0x20000f14
 80019ec:	20000f04 	.word	0x20000f04
 80019f0:	20000e38 	.word	0x20000e38
 80019f4:	20000ef8 	.word	0x20000ef8
 80019f8:	20000f20 	.word	0x20000f20
 80019fc:	40020000 	.word	0x40020000
 8001a00:	20000ea4 	.word	0x20000ea4
 8001a04:	20000f10 	.word	0x20000f10
 8001a08:	91a2b3c5 	.word	0x91a2b3c5

08001a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b094      	sub	sp, #80	; 0x50
 8001a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a12:	f107 0320 	add.w	r3, r7, #32
 8001a16:	2230      	movs	r2, #48	; 0x30
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f00e f922 	bl	800fc64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a20:	f107 030c 	add.w	r3, r7, #12
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a30:	2300      	movs	r3, #0
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	4b27      	ldr	r3, [pc, #156]	; (8001ad4 <SystemClock_Config+0xc8>)
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	4a26      	ldr	r2, [pc, #152]	; (8001ad4 <SystemClock_Config+0xc8>)
 8001a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a40:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <SystemClock_Config+0xc8>)
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <SystemClock_Config+0xcc>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a20      	ldr	r2, [pc, #128]	; (8001ad8 <SystemClock_Config+0xcc>)
 8001a56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <SystemClock_Config+0xcc>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a72:	2302      	movs	r3, #2
 8001a74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a7c:	2308      	movs	r3, #8
 8001a7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001a80:	2348      	movs	r3, #72	; 0x48
 8001a82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a84:	2302      	movs	r3, #2
 8001a86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a8c:	f107 0320 	add.w	r3, r7, #32
 8001a90:	4618      	mov	r0, r3
 8001a92:	f003 ff1d 	bl	80058d0 <HAL_RCC_OscConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a9c:	f000 fb0a 	bl	80020b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa0:	230f      	movs	r3, #15
 8001aa2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ab6:	f107 030c 	add.w	r3, r7, #12
 8001aba:	2102      	movs	r1, #2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f004 f97f 	bl	8005dc0 <HAL_RCC_ClockConfig>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ac8:	f000 faf4 	bl	80020b4 <Error_Handler>
  }
}
 8001acc:	bf00      	nop
 8001ace:	3750      	adds	r7, #80	; 0x50
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40007000 	.word	0x40007000

08001adc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <MX_I2C1_Init+0x50>)
 8001ae2:	4a13      	ldr	r2, [pc, #76]	; (8001b30 <MX_I2C1_Init+0x54>)
 8001ae4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 80000;
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <MX_I2C1_Init+0x50>)
 8001ae8:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <MX_I2C1_Init+0x58>)
 8001aea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aec:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <MX_I2C1_Init+0x50>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <MX_I2C1_Init+0x50>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <MX_I2C1_Init+0x50>)
 8001afa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001afe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b00:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <MX_I2C1_Init+0x50>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <MX_I2C1_Init+0x50>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <MX_I2C1_Init+0x50>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <MX_I2C1_Init+0x50>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b18:	4804      	ldr	r0, [pc, #16]	; (8001b2c <MX_I2C1_Init+0x50>)
 8001b1a:	f001 fdc1 	bl	80036a0 <HAL_I2C_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b24:	f000 fac6 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000de0 	.word	0x20000de0
 8001b30:	40005400 	.word	0x40005400
 8001b34:	00013880 	.word	0x00013880

08001b38 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <MX_SDIO_SD_Init+0x38>)
 8001b3e:	4a0d      	ldr	r2, [pc, #52]	; (8001b74 <MX_SDIO_SD_Init+0x3c>)
 8001b40:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001b42:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <MX_SDIO_SD_Init+0x38>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <MX_SDIO_SD_Init+0x38>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001b4e:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <MX_SDIO_SD_Init+0x38>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <MX_SDIO_SD_Init+0x38>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <MX_SDIO_SD_Init+0x38>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001b60:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <MX_SDIO_SD_Init+0x38>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	20000f90 	.word	0x20000f90
 8001b74:	40012c00 	.word	0x40012c00

08001b78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b7c:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <MX_SPI1_Init+0x64>)
 8001b7e:	4a18      	ldr	r2, [pc, #96]	; (8001be0 <MX_SPI1_Init+0x68>)
 8001b80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b82:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <MX_SPI1_Init+0x64>)
 8001b84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b8a:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <MX_SPI1_Init+0x64>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <MX_SPI1_Init+0x64>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <MX_SPI1_Init+0x64>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <MX_SPI1_Init+0x64>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <MX_SPI1_Init+0x64>)
 8001ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ba8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001baa:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <MX_SPI1_Init+0x64>)
 8001bac:	2210      	movs	r2, #16
 8001bae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bb0:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <MX_SPI1_Init+0x64>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <MX_SPI1_Init+0x64>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <MX_SPI1_Init+0x64>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <MX_SPI1_Init+0x64>)
 8001bc4:	220a      	movs	r2, #10
 8001bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bc8:	4804      	ldr	r0, [pc, #16]	; (8001bdc <MX_SPI1_Init+0x64>)
 8001bca:	f005 fe0e 	bl	80077ea <HAL_SPI_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001bd4:	f000 fa6e 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20001014 	.word	0x20001014
 8001be0:	40013000 	.word	0x40013000

08001be4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001be8:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <MX_TIM10_Init+0x40>)
 8001bea:	4a0f      	ldr	r2, [pc, #60]	; (8001c28 <MX_TIM10_Init+0x44>)
 8001bec:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 240-1;
 8001bee:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <MX_TIM10_Init+0x40>)
 8001bf0:	22ef      	movs	r2, #239	; 0xef
 8001bf2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <MX_TIM10_Init+0x40>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <MX_TIM10_Init+0x40>)
 8001bfc:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c00:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <MX_TIM10_Init+0x40>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <MX_TIM10_Init+0x40>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001c0e:	4805      	ldr	r0, [pc, #20]	; (8001c24 <MX_TIM10_Init+0x40>)
 8001c10:	f006 fa1c 	bl	800804c <HAL_TIM_Base_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001c1a:	f000 fa4b 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000ea4 	.word	0x20000ea4
 8001c28:	40014400 	.word	0x40014400

08001c2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <MX_DMA_Init+0x4c>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	4a0f      	ldr	r2, [pc, #60]	; (8001c78 <MX_DMA_Init+0x4c>)
 8001c3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c40:	6313      	str	r3, [r2, #48]	; 0x30
 8001c42:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <MX_DMA_Init+0x4c>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2100      	movs	r1, #0
 8001c52:	203b      	movs	r0, #59	; 0x3b
 8001c54:	f000 ff99 	bl	8002b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001c58:	203b      	movs	r0, #59	; 0x3b
 8001c5a:	f000 ffb2 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	2045      	movs	r0, #69	; 0x45
 8001c64:	f000 ff91 	bl	8002b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001c68:	2045      	movs	r0, #69	; 0x45
 8001c6a:	f000 ffaa 	bl	8002bc2 <HAL_NVIC_EnableIRQ>

}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800

08001c7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
 8001c90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	4b2f      	ldr	r3, [pc, #188]	; (8001d54 <MX_GPIO_Init+0xd8>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a2e      	ldr	r2, [pc, #184]	; (8001d54 <MX_GPIO_Init+0xd8>)
 8001c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b2c      	ldr	r3, [pc, #176]	; (8001d54 <MX_GPIO_Init+0xd8>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	607b      	str	r3, [r7, #4]
 8001cb2:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <MX_GPIO_Init+0xd8>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	4a27      	ldr	r2, [pc, #156]	; (8001d54 <MX_GPIO_Init+0xd8>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbe:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <MX_GPIO_Init+0xd8>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <MX_GPIO_Init+0xd8>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a20      	ldr	r2, [pc, #128]	; (8001d54 <MX_GPIO_Init+0xd8>)
 8001cd4:	f043 0302 	orr.w	r3, r3, #2
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b1e      	ldr	r3, [pc, #120]	; (8001d54 <MX_GPIO_Init+0xd8>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	211c      	movs	r1, #28
 8001cea:	481b      	ldr	r0, [pc, #108]	; (8001d58 <MX_GPIO_Init+0xdc>)
 8001cec:	f001 fcbe 	bl	800366c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2107      	movs	r1, #7
 8001cf4:	4819      	ldr	r0, [pc, #100]	; (8001d5c <MX_GPIO_Init+0xe0>)
 8001cf6:	f001 fcb9 	bl	800366c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001cfa:	231c      	movs	r3, #28
 8001cfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0a:	f107 030c 	add.w	r3, r7, #12
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4811      	ldr	r0, [pc, #68]	; (8001d58 <MX_GPIO_Init+0xdc>)
 8001d12:	f001 fb0f 	bl	8003334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001d16:	2307      	movs	r3, #7
 8001d18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001d1a:	2311      	movs	r3, #17
 8001d1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d22:	2303      	movs	r3, #3
 8001d24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d26:	f107 030c 	add.w	r3, r7, #12
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	480b      	ldr	r0, [pc, #44]	; (8001d5c <MX_GPIO_Init+0xe0>)
 8001d2e:	f001 fb01 	bl	8003334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	4619      	mov	r1, r3
 8001d46:	4804      	ldr	r0, [pc, #16]	; (8001d58 <MX_GPIO_Init+0xdc>)
 8001d48:	f001 faf4 	bl	8003334 <HAL_GPIO_Init>

}
 8001d4c:	bf00      	nop
 8001d4e:	3720      	adds	r7, #32
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40020000 	.word	0x40020000
 8001d5c:	40020400 	.word	0x40020400

08001d60 <initBinaryData>:
		HAL_Delay(33);
	}
}

void initBinaryData()
{
 8001d60:	b5b0      	push	{r4, r5, r7, lr}
 8001d62:	b0a4      	sub	sp, #144	; 0x90
 8001d64:	af00      	add	r7, sp, #0
	// init and create new file with data
	SD_Init(&fatfs);
 8001d66:	481d      	ldr	r0, [pc, #116]	; (8001ddc <initBinaryData+0x7c>)
 8001d68:	f000 f9cc 	bl	8002104 <SD_Init>
	TCHAR file_path[12];
	SD_Exists(file_path);
 8001d6c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 f9db 	bl	800212c <SD_Exists>
	SD_Open(&fil, file_path, FA_CREATE_ALWAYS | FA_WRITE);
 8001d76:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001d7a:	220a      	movs	r2, #10
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4818      	ldr	r0, [pc, #96]	; (8001de0 <initBinaryData+0x80>)
 8001d80:	f000 f9fc 	bl	800217c <SD_Open>
	char text[128] = "ACCELX,ACCELY,ACCELZ,GYROX,GYROY,GYROZ,ALTITUDE,TEMP\n";
 8001d84:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <initBinaryData+0x84>)
 8001d86:	1d3c      	adds	r4, r7, #4
 8001d88:	461d      	mov	r5, r3
 8001d8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d9a:	6020      	str	r0, [r4, #0]
 8001d9c:	3404      	adds	r4, #4
 8001d9e:	8021      	strh	r1, [r4, #0]
 8001da0:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8001da4:	224a      	movs	r2, #74	; 0x4a
 8001da6:	2100      	movs	r1, #0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f00d ff5b 	bl	800fc64 <memset>
	SD_Write(&fil, text);
 8001dae:	1d3b      	adds	r3, r7, #4
 8001db0:	4619      	mov	r1, r3
 8001db2:	480b      	ldr	r0, [pc, #44]	; (8001de0 <initBinaryData+0x80>)
 8001db4:	f000 f9f7 	bl	80021a6 <SD_Write>
	SD_Save(&fil);
 8001db8:	4809      	ldr	r0, [pc, #36]	; (8001de0 <initBinaryData+0x80>)
 8001dba:	f000 fa0e 	bl	80021da <SD_Save>

	start_altitude = SPL006_ReadAltitude();
 8001dbe:	f7ff f989 	bl	80010d4 <SPL006_ReadAltitude>
 8001dc2:	eef0 7a40 	vmov.f32	s15, s0
 8001dc6:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <initBinaryData+0x88>)
 8001dc8:	edc3 7a00 	vstr	s15, [r3]

	save_counter = 0;
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <initBinaryData+0x8c>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
}
 8001dd2:	bf00      	nop
 8001dd4:	3790      	adds	r7, #144	; 0x90
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200012a8 	.word	0x200012a8
 8001de0:	2000106c 	.word	0x2000106c
 8001de4:	08012a48 	.word	0x08012a48
 8001de8:	20000f8c 	.word	0x20000f8c
 8001dec:	20000f10 	.word	0x20000f10

08001df0 <saveBinaryData>:

void saveBinaryData()
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b0b0      	sub	sp, #192	; 0xc0
 8001df4:	af00      	add	r7, sp, #0
	// manage accel data
	int16_t accel_data[3];
	BMX055_readAccel(&hspi1, accel_data);
 8001df6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	489d      	ldr	r0, [pc, #628]	; (8002074 <saveBinaryData+0x284>)
 8001dfe:	f7ff fc15 	bl	800162c <BMX055_readAccel>

	float accel_x = Filter_run(&filter_accel_x, accel_data[0] * 0.0005987f);
 8001e02:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8001e06:	ee07 3a90 	vmov	s15, r3
 8001e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e0e:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8002078 <saveBinaryData+0x288>
 8001e12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e16:	eeb0 0a67 	vmov.f32	s0, s15
 8001e1a:	4898      	ldr	r0, [pc, #608]	; (800207c <saveBinaryData+0x28c>)
 8001e1c:	f7ff fd04 	bl	8001828 <Filter_run>
 8001e20:	ed87 0a2f 	vstr	s0, [r7, #188]	; 0xbc
	float accel_y = Filter_run(&filter_accel_y, accel_data[1] * 0.0005987f);
 8001e24:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8001e28:	ee07 3a90 	vmov	s15, r3
 8001e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e30:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8002078 <saveBinaryData+0x288>
 8001e34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e38:	eeb0 0a67 	vmov.f32	s0, s15
 8001e3c:	4890      	ldr	r0, [pc, #576]	; (8002080 <saveBinaryData+0x290>)
 8001e3e:	f7ff fcf3 	bl	8001828 <Filter_run>
 8001e42:	ed87 0a2e 	vstr	s0, [r7, #184]	; 0xb8
	float accel_z = Filter_run(&filter_accel_z, accel_data[2] * 0.0005987f);
 8001e46:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 8001e4a:	ee07 3a90 	vmov	s15, r3
 8001e4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e52:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002078 <saveBinaryData+0x288>
 8001e56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e5e:	4889      	ldr	r0, [pc, #548]	; (8002084 <saveBinaryData+0x294>)
 8001e60:	f7ff fce2 	bl	8001828 <Filter_run>
 8001e64:	ed87 0a2d 	vstr	s0, [r7, #180]	; 0xb4

	// manage gyro data
	int16_t gyro_data[3];
	BMX055_readGyro(&hspi1, gyro_data);
 8001e68:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4881      	ldr	r0, [pc, #516]	; (8002074 <saveBinaryData+0x284>)
 8001e70:	f7ff fc1c 	bl	80016ac <BMX055_readGyro>

	float gyro_x = Filter_run(&filter_gyro_x, gyro_data[0] * 0.007629f);
 8001e74:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8001e78:	ee07 3a90 	vmov	s15, r3
 8001e7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e80:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8002088 <saveBinaryData+0x298>
 8001e84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e88:	eeb0 0a67 	vmov.f32	s0, s15
 8001e8c:	487f      	ldr	r0, [pc, #508]	; (800208c <saveBinaryData+0x29c>)
 8001e8e:	f7ff fccb 	bl	8001828 <Filter_run>
 8001e92:	ed87 0a2c 	vstr	s0, [r7, #176]	; 0xb0
	float gyro_y = Filter_run(&filter_gyro_y, gyro_data[1] * 0.007629f);
 8001e96:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea2:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8002088 <saveBinaryData+0x298>
 8001ea6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eaa:	eeb0 0a67 	vmov.f32	s0, s15
 8001eae:	4878      	ldr	r0, [pc, #480]	; (8002090 <saveBinaryData+0x2a0>)
 8001eb0:	f7ff fcba 	bl	8001828 <Filter_run>
 8001eb4:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
	float gyro_z = Filter_run(&filter_gyro_z, gyro_data[2] * 0.007629f);
 8001eb8:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8001ebc:	ee07 3a90 	vmov	s15, r3
 8001ec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec4:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8002088 <saveBinaryData+0x298>
 8001ec8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed0:	4870      	ldr	r0, [pc, #448]	; (8002094 <saveBinaryData+0x2a4>)
 8001ed2:	f7ff fca9 	bl	8001828 <Filter_run>
 8001ed6:	ed87 0a2a 	vstr	s0, [r7, #168]	; 0xa8

	// fetch altitude data
	float altitude = SPL006_ReadAltitude() - start_altitude;
 8001eda:	f7ff f8fb 	bl	80010d4 <SPL006_ReadAltitude>
 8001ede:	eeb0 7a40 	vmov.f32	s14, s0
 8001ee2:	4b6d      	ldr	r3, [pc, #436]	; (8002098 <saveBinaryData+0x2a8>)
 8001ee4:	edd3 7a00 	vldr	s15, [r3]
 8001ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eec:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	altitude = Filter_run(&filter_altitude, altitude);
 8001ef0:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 8001ef4:	4869      	ldr	r0, [pc, #420]	; (800209c <saveBinaryData+0x2ac>)
 8001ef6:	f7ff fc97 	bl	8001828 <Filter_run>
 8001efa:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4

	// fetch temperature data
	float temperature = SPL006_ReadTemperature();
 8001efe:	f7ff f829 	bl	8000f54 <SPL006_ReadTemperature>
 8001f02:	ed87 0a28 	vstr	s0, [r7, #160]	; 0xa0
	temperature = Filter_run(&filter_temperature, temperature);
 8001f06:	ed97 0a28 	vldr	s0, [r7, #160]	; 0xa0
 8001f0a:	4865      	ldr	r0, [pc, #404]	; (80020a0 <saveBinaryData+0x2b0>)
 8001f0c:	f7ff fc8c 	bl	8001828 <Filter_run>
 8001f10:	ed87 0a28 	vstr	s0, [r7, #160]	; 0xa0

	// write data
	char data[74];
	memset(data, 0, 74);
 8001f14:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f18:	224a      	movs	r2, #74	; 0x4a
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f00d fea1 	bl	800fc64 <memset>

	char accel_char_x[8];
	sprintf(accel_char_x, "%.3f,", accel_x);
 8001f22:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001f26:	f7fe fb17 	bl	8000558 <__aeabi_f2d>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001f32:	495c      	ldr	r1, [pc, #368]	; (80020a4 <saveBinaryData+0x2b4>)
 8001f34:	f00e fb08 	bl	8010548 <siprintf>
	strcat(data, accel_char_x);
 8001f38:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001f3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f40:	4611      	mov	r1, r2
 8001f42:	4618      	mov	r0, r3
 8001f44:	f00e fb20 	bl	8010588 <strcat>

	char accel_char_y[8];
	sprintf(accel_char_y, "%.3f,", accel_y);
 8001f48:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001f4c:	f7fe fb04 	bl	8000558 <__aeabi_f2d>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001f58:	4952      	ldr	r1, [pc, #328]	; (80020a4 <saveBinaryData+0x2b4>)
 8001f5a:	f00e faf5 	bl	8010548 <siprintf>
	strcat(data, accel_char_y);
 8001f5e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001f62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f00e fb0d 	bl	8010588 <strcat>

	char accel_char_z[8];
	sprintf(accel_char_z, "%.3f,", accel_z);
 8001f6e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001f72:	f7fe faf1 	bl	8000558 <__aeabi_f2d>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001f7e:	4949      	ldr	r1, [pc, #292]	; (80020a4 <saveBinaryData+0x2b4>)
 8001f80:	f00e fae2 	bl	8010548 <siprintf>
	strcat(data, accel_char_z);
 8001f84:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001f88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f00e fafa 	bl	8010588 <strcat>

	char gyro_char_x[8];
	sprintf(gyro_char_x, "%.3f,", gyro_x);
 8001f94:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8001f98:	f7fe fade 	bl	8000558 <__aeabi_f2d>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001fa4:	493f      	ldr	r1, [pc, #252]	; (80020a4 <saveBinaryData+0x2b4>)
 8001fa6:	f00e facf 	bl	8010548 <siprintf>
	strcat(data, gyro_char_x);
 8001faa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001fae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f00e fae7 	bl	8010588 <strcat>

	char gyro_char_y[8];
	sprintf(gyro_char_y, "%.3f,", gyro_y);
 8001fba:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001fbe:	f7fe facb 	bl	8000558 <__aeabi_f2d>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	f107 001c 	add.w	r0, r7, #28
 8001fca:	4936      	ldr	r1, [pc, #216]	; (80020a4 <saveBinaryData+0x2b4>)
 8001fcc:	f00e fabc 	bl	8010548 <siprintf>
	strcat(data, gyro_char_y);
 8001fd0:	f107 021c 	add.w	r2, r7, #28
 8001fd4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fd8:	4611      	mov	r1, r2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f00e fad4 	bl	8010588 <strcat>

	char gyro_char_z[8];
	sprintf(gyro_char_z, "%.3f,", gyro_z);
 8001fe0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001fe4:	f7fe fab8 	bl	8000558 <__aeabi_f2d>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	f107 0014 	add.w	r0, r7, #20
 8001ff0:	492c      	ldr	r1, [pc, #176]	; (80020a4 <saveBinaryData+0x2b4>)
 8001ff2:	f00e faa9 	bl	8010548 <siprintf>
	strcat(data, gyro_char_z);
 8001ff6:	f107 0214 	add.w	r2, r7, #20
 8001ffa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f00e fac1 	bl	8010588 <strcat>

	char altitude_char[8];
	sprintf(altitude_char, "%.3f,", altitude);
 8002006:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800200a:	f7fe faa5 	bl	8000558 <__aeabi_f2d>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	f107 000c 	add.w	r0, r7, #12
 8002016:	4923      	ldr	r1, [pc, #140]	; (80020a4 <saveBinaryData+0x2b4>)
 8002018:	f00e fa96 	bl	8010548 <siprintf>
	strcat(data, altitude_char);
 800201c:	f107 020c 	add.w	r2, r7, #12
 8002020:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f00e faae 	bl	8010588 <strcat>

	char temperature_char[7];
	sprintf(temperature_char, "%.3f\n", temperature);
 800202c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8002030:	f7fe fa92 	bl	8000558 <__aeabi_f2d>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	1d38      	adds	r0, r7, #4
 800203a:	491b      	ldr	r1, [pc, #108]	; (80020a8 <saveBinaryData+0x2b8>)
 800203c:	f00e fa84 	bl	8010548 <siprintf>
	strcat(data, temperature_char);
 8002040:	1d3a      	adds	r2, r7, #4
 8002042:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002046:	4611      	mov	r1, r2
 8002048:	4618      	mov	r0, r3
 800204a:	f00e fa9d 	bl	8010588 <strcat>

	SD_Write(&fil, data);
 800204e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002052:	4619      	mov	r1, r3
 8002054:	4815      	ldr	r0, [pc, #84]	; (80020ac <saveBinaryData+0x2bc>)
 8002056:	f000 f8a6 	bl	80021a6 <SD_Write>
	SD_Save(&fil);
 800205a:	4814      	ldr	r0, [pc, #80]	; (80020ac <saveBinaryData+0x2bc>)
 800205c:	f000 f8bd 	bl	80021da <SD_Save>

	save_counter++;
 8002060:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <saveBinaryData+0x2c0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3301      	adds	r3, #1
 8002066:	4a12      	ldr	r2, [pc, #72]	; (80020b0 <saveBinaryData+0x2c0>)
 8002068:	6013      	str	r3, [r2, #0]
}
 800206a:	bf00      	nop
 800206c:	37c0      	adds	r7, #192	; 0xc0
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20001014 	.word	0x20001014
 8002078:	3a1cf214 	.word	0x3a1cf214
 800207c:	200014d8 	.word	0x200014d8
 8002080:	2000129c 	.word	0x2000129c
 8002084:	20000eec 	.word	0x20000eec
 8002088:	3bf9fcb1 	.word	0x3bf9fcb1
 800208c:	20000f14 	.word	0x20000f14
 8002090:	20000f04 	.word	0x20000f04
 8002094:	20000e38 	.word	0x20000e38
 8002098:	20000f8c 	.word	0x20000f8c
 800209c:	20000f20 	.word	0x20000f20
 80020a0:	20000ef8 	.word	0x20000ef8
 80020a4:	08012ac8 	.word	0x08012ac8
 80020a8:	08012ad0 	.word	0x08012ad0
 80020ac:	2000106c 	.word	0x2000106c
 80020b0:	20000f10 	.word	0x20000f10

080020b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <checkCall>:
#include "sd_card.h"
#include <string.h>
#include <stdio.h>

static void checkCall(FRESULT result)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
	if(result != FR_OK)
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d010      	beq.n	80020f6 <checkCall+0x32>
	{
		while(1)
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80020d4:	2201      	movs	r2, #1
 80020d6:	2104      	movs	r1, #4
 80020d8:	4809      	ldr	r0, [pc, #36]	; (8002100 <checkCall+0x3c>)
 80020da:	f001 fac7 	bl	800366c <HAL_GPIO_WritePin>
			HAL_Delay(100);
 80020de:	2064      	movs	r0, #100	; 0x64
 80020e0:	f000 fc54 	bl	800298c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80020e4:	2200      	movs	r2, #0
 80020e6:	2104      	movs	r1, #4
 80020e8:	4805      	ldr	r0, [pc, #20]	; (8002100 <checkCall+0x3c>)
 80020ea:	f001 fabf 	bl	800366c <HAL_GPIO_WritePin>
			HAL_Delay(100);
 80020ee:	2064      	movs	r0, #100	; 0x64
 80020f0:	f000 fc4c 	bl	800298c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80020f4:	e7ee      	b.n	80020d4 <checkCall+0x10>
		}
	}
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40020000 	.word	0x40020000

08002104 <SD_Init>:

void SD_Init(FATFS* fatfs)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	checkCall(f_mount(fatfs, (TCHAR const*)SDPath, 0));
 800210c:	2200      	movs	r2, #0
 800210e:	4906      	ldr	r1, [pc, #24]	; (8002128 <SD_Init+0x24>)
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f00b ff2b 	bl	800df6c <f_mount>
 8002116:	4603      	mov	r3, r0
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ffd3 	bl	80020c4 <checkCall>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200014ec 	.word	0x200014ec

0800212c <SD_Exists>:

void SD_Exists(TCHAR* path)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08a      	sub	sp, #40	; 0x28
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
	uint8_t index = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    FRESULT fr;
    FILINFO fno;

    while(1)
    {
    	sprintf(path, "DATA%d.CSV", index);
 800213a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800213e:	461a      	mov	r2, r3
 8002140:	490d      	ldr	r1, [pc, #52]	; (8002178 <SD_Exists+0x4c>)
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f00e fa00 	bl	8010548 <siprintf>
		fr = f_stat(path, &fno);
 8002148:	f107 030c 	add.w	r3, r7, #12
 800214c:	4619      	mov	r1, r3
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f00c fb03 	bl	800e75a <f_stat>
 8002154:	4603      	mov	r3, r0
 8002156:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if(fr == FR_NO_FILE) break;
 800215a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800215e:	2b04      	cmp	r3, #4
 8002160:	d005      	beq.n	800216e <SD_Exists+0x42>
		else index++;
 8002162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002166:	3301      	adds	r3, #1
 8002168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    	sprintf(path, "DATA%d.CSV", index);
 800216c:	e7e5      	b.n	800213a <SD_Exists+0xe>
		if(fr == FR_NO_FILE) break;
 800216e:	bf00      	nop
    }
}
 8002170:	bf00      	nop
 8002172:	3728      	adds	r7, #40	; 0x28
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	08012ad8 	.word	0x08012ad8

0800217c <SD_Open>:

void SD_Open(FIL* file, const TCHAR* path, UINT mode)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
	checkCall(f_open(file, path, mode));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	461a      	mov	r2, r3
 800218e:	68b9      	ldr	r1, [r7, #8]
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f00b ff31 	bl	800dff8 <f_open>
 8002196:	4603      	mov	r3, r0
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff93 	bl	80020c4 <checkCall>
}
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <SD_Write>:

UINT SD_Write(FIL* file, char text[])
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b084      	sub	sp, #16
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	6039      	str	r1, [r7, #0]
	UINT written = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
	checkCall(f_write(file, text, strlen(text), &written));
 80021b4:	6838      	ldr	r0, [r7, #0]
 80021b6:	f7fe f813 	bl	80001e0 <strlen>
 80021ba:	4602      	mov	r2, r0
 80021bc:	f107 030c 	add.w	r3, r7, #12
 80021c0:	6839      	ldr	r1, [r7, #0]
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f00c f8d6 	bl	800e374 <f_write>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff ff7a 	bl	80020c4 <checkCall>
	return written;
 80021d0:	68fb      	ldr	r3, [r7, #12]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <SD_Save>:

void SD_Save(FIL* file)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
	checkCall(f_sync(file));
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f00c fa3b 	bl	800e65e <f_sync>
 80021e8:	4603      	mov	r3, r0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff ff6a 	bl	80020c4 <checkCall>
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	607b      	str	r3, [r7, #4]
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <HAL_MspInit+0x4c>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	4a0f      	ldr	r2, [pc, #60]	; (8002244 <HAL_MspInit+0x4c>)
 8002208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800220c:	6453      	str	r3, [r2, #68]	; 0x44
 800220e:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <HAL_MspInit+0x4c>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002216:	607b      	str	r3, [r7, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	603b      	str	r3, [r7, #0]
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <HAL_MspInit+0x4c>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	4a08      	ldr	r2, [pc, #32]	; (8002244 <HAL_MspInit+0x4c>)
 8002224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002228:	6413      	str	r3, [r2, #64]	; 0x40
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_MspInit+0x4c>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800

08002248 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a19      	ldr	r2, [pc, #100]	; (80022cc <HAL_I2C_MspInit+0x84>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d12c      	bne.n	80022c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <HAL_I2C_MspInit+0x88>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	4a17      	ldr	r2, [pc, #92]	; (80022d0 <HAL_I2C_MspInit+0x88>)
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	6313      	str	r3, [r2, #48]	; 0x30
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_I2C_MspInit+0x88>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002286:	f44f 7340 	mov.w	r3, #768	; 0x300
 800228a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800228c:	2312      	movs	r3, #18
 800228e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002290:	2301      	movs	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002294:	2303      	movs	r3, #3
 8002296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002298:	2304      	movs	r3, #4
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	4619      	mov	r1, r3
 80022a2:	480c      	ldr	r0, [pc, #48]	; (80022d4 <HAL_I2C_MspInit+0x8c>)
 80022a4:	f001 f846 	bl	8003334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <HAL_I2C_MspInit+0x88>)
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	4a07      	ldr	r2, [pc, #28]	; (80022d0 <HAL_I2C_MspInit+0x88>)
 80022b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022b6:	6413      	str	r3, [r2, #64]	; 0x40
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_I2C_MspInit+0x88>)
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022c4:	bf00      	nop
 80022c6:	3728      	adds	r7, #40	; 0x28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40005400 	.word	0x40005400
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40020400 	.word	0x40020400

080022d8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	; 0x28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a68      	ldr	r2, [pc, #416]	; (8002498 <HAL_SD_MspInit+0x1c0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	f040 80ca 	bne.w	8002490 <HAL_SD_MspInit+0x1b8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80022fc:	2300      	movs	r3, #0
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	4b66      	ldr	r3, [pc, #408]	; (800249c <HAL_SD_MspInit+0x1c4>)
 8002302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002304:	4a65      	ldr	r2, [pc, #404]	; (800249c <HAL_SD_MspInit+0x1c4>)
 8002306:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800230a:	6453      	str	r3, [r2, #68]	; 0x44
 800230c:	4b63      	ldr	r3, [pc, #396]	; (800249c <HAL_SD_MspInit+0x1c4>)
 800230e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	4b5f      	ldr	r3, [pc, #380]	; (800249c <HAL_SD_MspInit+0x1c4>)
 800231e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002320:	4a5e      	ldr	r2, [pc, #376]	; (800249c <HAL_SD_MspInit+0x1c4>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6313      	str	r3, [r2, #48]	; 0x30
 8002328:	4b5c      	ldr	r3, [pc, #368]	; (800249c <HAL_SD_MspInit+0x1c4>)
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002334:	2300      	movs	r3, #0
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	4b58      	ldr	r3, [pc, #352]	; (800249c <HAL_SD_MspInit+0x1c4>)
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	4a57      	ldr	r2, [pc, #348]	; (800249c <HAL_SD_MspInit+0x1c4>)
 800233e:	f043 0302 	orr.w	r3, r3, #2
 8002342:	6313      	str	r3, [r2, #48]	; 0x30
 8002344:	4b55      	ldr	r3, [pc, #340]	; (800249c <HAL_SD_MspInit+0x1c4>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8002350:	f44f 7350 	mov.w	r3, #832	; 0x340
 8002354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	2302      	movs	r3, #2
 8002358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235e:	2303      	movs	r3, #3
 8002360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002362:	230c      	movs	r3, #12
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002366:	f107 0314 	add.w	r3, r7, #20
 800236a:	4619      	mov	r1, r3
 800236c:	484c      	ldr	r0, [pc, #304]	; (80024a0 <HAL_SD_MspInit+0x1c8>)
 800236e:	f000 ffe1 	bl	8003334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 8002372:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8002376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002378:	2302      	movs	r3, #2
 800237a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002380:	2303      	movs	r3, #3
 8002382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002384:	230c      	movs	r3, #12
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	4619      	mov	r1, r3
 800238e:	4845      	ldr	r0, [pc, #276]	; (80024a4 <HAL_SD_MspInit+0x1cc>)
 8002390:	f000 ffd0 	bl	8003334 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002394:	4b44      	ldr	r3, [pc, #272]	; (80024a8 <HAL_SD_MspInit+0x1d0>)
 8002396:	4a45      	ldr	r2, [pc, #276]	; (80024ac <HAL_SD_MspInit+0x1d4>)
 8002398:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800239a:	4b43      	ldr	r3, [pc, #268]	; (80024a8 <HAL_SD_MspInit+0x1d0>)
 800239c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023a0:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023a2:	4b41      	ldr	r3, [pc, #260]	; (80024a8 <HAL_SD_MspInit+0x1d0>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023a8:	4b3f      	ldr	r3, [pc, #252]	; (80024a8 <HAL_SD_MspInit+0x1d0>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023ae:	4b3e      	ldr	r3, [pc, #248]	; (80024a8 <HAL_SD_MspInit+0x1d0>)
 80023b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023b4:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023b6:	4b3c      	ldr	r3, [pc, #240]	; (80024a8 <HAL_SD_MspInit+0x1d0>)
 80023b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023bc:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023be:	4b3a      	ldr	r3, [pc, #232]	; (80024a8 <HAL_SD_MspInit+0x1d0>)
 80023c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023c4:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80023c6:	4b38      	ldr	r3, [pc, #224]	; (80024a8 <HAL_SD_MspInit+0x1d0>)
 80023c8:	2220      	movs	r2, #32
 80023ca:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023cc:	4b36      	ldr	r3, [pc, #216]	; (80024a8 <HAL_SD_MspInit+0x1d0>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80023d2:	4b35      	ldr	r3, [pc, #212]	; (80024a8 <HAL_SD_MspInit+0x1d0>)
 80023d4:	2204      	movs	r2, #4
 80023d6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80023d8:	4b33      	ldr	r3, [pc, #204]	; (80024a8 <HAL_SD_MspInit+0x1d0>)
 80023da:	2203      	movs	r2, #3
 80023dc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80023de:	4b32      	ldr	r3, [pc, #200]	; (80024a8 <HAL_SD_MspInit+0x1d0>)
 80023e0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80023e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80023e6:	4b30      	ldr	r3, [pc, #192]	; (80024a8 <HAL_SD_MspInit+0x1d0>)
 80023e8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80023ec:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80023ee:	482e      	ldr	r0, [pc, #184]	; (80024a8 <HAL_SD_MspInit+0x1d0>)
 80023f0:	f000 fc02 	bl	8002bf8 <HAL_DMA_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 80023fa:	f7ff fe5b 	bl	80020b4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a29      	ldr	r2, [pc, #164]	; (80024a8 <HAL_SD_MspInit+0x1d0>)
 8002402:	641a      	str	r2, [r3, #64]	; 0x40
 8002404:	4a28      	ldr	r2, [pc, #160]	; (80024a8 <HAL_SD_MspInit+0x1d0>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800240a:	4b29      	ldr	r3, [pc, #164]	; (80024b0 <HAL_SD_MspInit+0x1d8>)
 800240c:	4a29      	ldr	r2, [pc, #164]	; (80024b4 <HAL_SD_MspInit+0x1dc>)
 800240e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002410:	4b27      	ldr	r3, [pc, #156]	; (80024b0 <HAL_SD_MspInit+0x1d8>)
 8002412:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002416:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002418:	4b25      	ldr	r3, [pc, #148]	; (80024b0 <HAL_SD_MspInit+0x1d8>)
 800241a:	2240      	movs	r2, #64	; 0x40
 800241c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800241e:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <HAL_SD_MspInit+0x1d8>)
 8002420:	2200      	movs	r2, #0
 8002422:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002424:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <HAL_SD_MspInit+0x1d8>)
 8002426:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800242a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800242c:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <HAL_SD_MspInit+0x1d8>)
 800242e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002432:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002434:	4b1e      	ldr	r3, [pc, #120]	; (80024b0 <HAL_SD_MspInit+0x1d8>)
 8002436:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800243a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800243c:	4b1c      	ldr	r3, [pc, #112]	; (80024b0 <HAL_SD_MspInit+0x1d8>)
 800243e:	2220      	movs	r2, #32
 8002440:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002442:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <HAL_SD_MspInit+0x1d8>)
 8002444:	2200      	movs	r2, #0
 8002446:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002448:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <HAL_SD_MspInit+0x1d8>)
 800244a:	2204      	movs	r2, #4
 800244c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800244e:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <HAL_SD_MspInit+0x1d8>)
 8002450:	2203      	movs	r2, #3
 8002452:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002454:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <HAL_SD_MspInit+0x1d8>)
 8002456:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800245c:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <HAL_SD_MspInit+0x1d8>)
 800245e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002462:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002464:	4812      	ldr	r0, [pc, #72]	; (80024b0 <HAL_SD_MspInit+0x1d8>)
 8002466:	f000 fbc7 	bl	8002bf8 <HAL_DMA_Init>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <HAL_SD_MspInit+0x19c>
    {
      Error_Handler();
 8002470:	f7ff fe20 	bl	80020b4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a0e      	ldr	r2, [pc, #56]	; (80024b0 <HAL_SD_MspInit+0x1d8>)
 8002478:	63da      	str	r2, [r3, #60]	; 0x3c
 800247a:	4a0d      	ldr	r2, [pc, #52]	; (80024b0 <HAL_SD_MspInit+0x1d8>)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002480:	2200      	movs	r2, #0
 8002482:	2100      	movs	r1, #0
 8002484:	2031      	movs	r0, #49	; 0x31
 8002486:	f000 fb80 	bl	8002b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800248a:	2031      	movs	r0, #49	; 0x31
 800248c:	f000 fb99 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002490:	bf00      	nop
 8002492:	3728      	adds	r7, #40	; 0x28
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40012c00 	.word	0x40012c00
 800249c:	40023800 	.word	0x40023800
 80024a0:	40020000 	.word	0x40020000
 80024a4:	40020400 	.word	0x40020400
 80024a8:	20000e44 	.word	0x20000e44
 80024ac:	40026458 	.word	0x40026458
 80024b0:	20000f2c 	.word	0x20000f2c
 80024b4:	400264a0 	.word	0x400264a0

080024b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	; 0x28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a28      	ldr	r2, [pc, #160]	; (8002578 <HAL_SPI_MspInit+0xc0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d149      	bne.n	800256e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	4b27      	ldr	r3, [pc, #156]	; (800257c <HAL_SPI_MspInit+0xc4>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	4a26      	ldr	r2, [pc, #152]	; (800257c <HAL_SPI_MspInit+0xc4>)
 80024e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024e8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ea:	4b24      	ldr	r3, [pc, #144]	; (800257c <HAL_SPI_MspInit+0xc4>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <HAL_SPI_MspInit+0xc4>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4a1f      	ldr	r2, [pc, #124]	; (800257c <HAL_SPI_MspInit+0xc4>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6313      	str	r3, [r2, #48]	; 0x30
 8002506:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_SPI_MspInit+0xc4>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	4b19      	ldr	r3, [pc, #100]	; (800257c <HAL_SPI_MspInit+0xc4>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a18      	ldr	r2, [pc, #96]	; (800257c <HAL_SPI_MspInit+0xc4>)
 800251c:	f043 0302 	orr.w	r3, r3, #2
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b16      	ldr	r3, [pc, #88]	; (800257c <HAL_SPI_MspInit+0xc4>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800252e:	23a0      	movs	r3, #160	; 0xa0
 8002530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002532:	2302      	movs	r3, #2
 8002534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253a:	2303      	movs	r3, #3
 800253c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800253e:	2305      	movs	r3, #5
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002542:	f107 0314 	add.w	r3, r7, #20
 8002546:	4619      	mov	r1, r3
 8002548:	480d      	ldr	r0, [pc, #52]	; (8002580 <HAL_SPI_MspInit+0xc8>)
 800254a:	f000 fef3 	bl	8003334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800254e:	2310      	movs	r3, #16
 8002550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255a:	2303      	movs	r3, #3
 800255c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800255e:	2305      	movs	r3, #5
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002562:	f107 0314 	add.w	r3, r7, #20
 8002566:	4619      	mov	r1, r3
 8002568:	4806      	ldr	r0, [pc, #24]	; (8002584 <HAL_SPI_MspInit+0xcc>)
 800256a:	f000 fee3 	bl	8003334 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800256e:	bf00      	nop
 8002570:	3728      	adds	r7, #40	; 0x28
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40013000 	.word	0x40013000
 800257c:	40023800 	.word	0x40023800
 8002580:	40020000 	.word	0x40020000
 8002584:	40020400 	.word	0x40020400

08002588 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <HAL_TIM_Base_MspInit+0x48>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d115      	bne.n	80025c6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	4b0d      	ldr	r3, [pc, #52]	; (80025d4 <HAL_TIM_Base_MspInit+0x4c>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	4a0c      	ldr	r2, [pc, #48]	; (80025d4 <HAL_TIM_Base_MspInit+0x4c>)
 80025a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a8:	6453      	str	r3, [r2, #68]	; 0x44
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <HAL_TIM_Base_MspInit+0x4c>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2101      	movs	r1, #1
 80025ba:	2019      	movs	r0, #25
 80025bc:	f000 fae5 	bl	8002b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80025c0:	2019      	movs	r0, #25
 80025c2:	f000 fafe 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40014400 	.word	0x40014400
 80025d4:	40023800 	.word	0x40023800

080025d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025e6:	b480      	push	{r7}
 80025e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ea:	e7fe      	b.n	80025ea <HardFault_Handler+0x4>

080025ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f0:	e7fe      	b.n	80025f0 <MemManage_Handler+0x4>

080025f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025f2:	b480      	push	{r7}
 80025f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025f6:	e7fe      	b.n	80025f6 <BusFault_Handler+0x4>

080025f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025fc:	e7fe      	b.n	80025fc <UsageFault_Handler+0x4>

080025fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025fe:	b480      	push	{r7}
 8002600:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800262c:	f000 f98e 	bl	800294c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002630:	bf00      	nop
 8002632:	bd80      	pop	{r7, pc}

08002634 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  saveBinaryData();
 8002638:	f7ff fbda 	bl	8001df0 <saveBinaryData>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800263c:	4802      	ldr	r0, [pc, #8]	; (8002648 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800263e:	f005 fdb7 	bl	80081b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000ea4 	.word	0x20000ea4

0800264c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002650:	4802      	ldr	r0, [pc, #8]	; (800265c <SDIO_IRQHandler+0x10>)
 8002652:	f004 f811 	bl	8006678 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000f90 	.word	0x20000f90

08002660 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <DMA2_Stream3_IRQHandler+0x10>)
 8002666:	f000 fbef 	bl	8002e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000e44 	.word	0x20000e44

08002674 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002678:	4802      	ldr	r0, [pc, #8]	; (8002684 <OTG_FS_IRQHandler+0x10>)
 800267a:	f002 f8f6 	bl	800486a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20002e20 	.word	0x20002e20

08002688 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800268c:	4802      	ldr	r0, [pc, #8]	; (8002698 <DMA2_Stream6_IRQHandler+0x10>)
 800268e:	f000 fbdb 	bl	8002e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000f2c 	.word	0x20000f2c

0800269c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
	return 1;
 80026a0:	2301      	movs	r3, #1
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <_kill>:

int _kill(int pid, int sig)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026b6:	f00d faab 	bl	800fc10 <__errno>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2216      	movs	r2, #22
 80026be:	601a      	str	r2, [r3, #0]
	return -1;
 80026c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <_exit>:

void _exit (int status)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026d4:	f04f 31ff 	mov.w	r1, #4294967295
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff ffe7 	bl	80026ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80026de:	e7fe      	b.n	80026de <_exit+0x12>

080026e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	e00a      	b.n	8002708 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026f2:	f3af 8000 	nop.w
 80026f6:	4601      	mov	r1, r0
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	60ba      	str	r2, [r7, #8]
 80026fe:	b2ca      	uxtb	r2, r1
 8002700:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	3301      	adds	r3, #1
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	429a      	cmp	r2, r3
 800270e:	dbf0      	blt.n	80026f2 <_read+0x12>
	}

return len;
 8002710:	687b      	ldr	r3, [r7, #4]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b086      	sub	sp, #24
 800271e:	af00      	add	r7, sp, #0
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	e009      	b.n	8002740 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	60ba      	str	r2, [r7, #8]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	3301      	adds	r3, #1
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	429a      	cmp	r2, r3
 8002746:	dbf1      	blt.n	800272c <_write+0x12>
	}
	return len;
 8002748:	687b      	ldr	r3, [r7, #4]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <_close>:

int _close(int file)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
	return -1;
 800275a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800275e:	4618      	mov	r0, r3
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
 8002772:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800277a:	605a      	str	r2, [r3, #4]
	return 0;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <_isatty>:

int _isatty(int file)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
	return 1;
 8002792:	2301      	movs	r3, #1
}
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
	return 0;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
	...

080027bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027c4:	4a14      	ldr	r2, [pc, #80]	; (8002818 <_sbrk+0x5c>)
 80027c6:	4b15      	ldr	r3, [pc, #84]	; (800281c <_sbrk+0x60>)
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027d0:	4b13      	ldr	r3, [pc, #76]	; (8002820 <_sbrk+0x64>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d102      	bne.n	80027de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027d8:	4b11      	ldr	r3, [pc, #68]	; (8002820 <_sbrk+0x64>)
 80027da:	4a12      	ldr	r2, [pc, #72]	; (8002824 <_sbrk+0x68>)
 80027dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027de:	4b10      	ldr	r3, [pc, #64]	; (8002820 <_sbrk+0x64>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4413      	add	r3, r2
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d207      	bcs.n	80027fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027ec:	f00d fa10 	bl	800fc10 <__errno>
 80027f0:	4603      	mov	r3, r0
 80027f2:	220c      	movs	r2, #12
 80027f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027f6:	f04f 33ff 	mov.w	r3, #4294967295
 80027fa:	e009      	b.n	8002810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027fc:	4b08      	ldr	r3, [pc, #32]	; (8002820 <_sbrk+0x64>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002802:	4b07      	ldr	r3, [pc, #28]	; (8002820 <_sbrk+0x64>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	4a05      	ldr	r2, [pc, #20]	; (8002820 <_sbrk+0x64>)
 800280c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800280e:	68fb      	ldr	r3, [r7, #12]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20020000 	.word	0x20020000
 800281c:	00000400 	.word	0x00000400
 8002820:	20000b74 	.word	0x20000b74
 8002824:	20003238 	.word	0x20003238

08002828 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800282c:	4b08      	ldr	r3, [pc, #32]	; (8002850 <SystemInit+0x28>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002832:	4a07      	ldr	r2, [pc, #28]	; (8002850 <SystemInit+0x28>)
 8002834:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002838:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <SystemInit+0x28>)
 800283e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002842:	609a      	str	r2, [r3, #8]
#endif
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002854:	f8df d034 	ldr.w	sp, [pc, #52]	; 800288c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002858:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800285a:	e003      	b.n	8002864 <LoopCopyDataInit>

0800285c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800285e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002860:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002862:	3104      	adds	r1, #4

08002864 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002864:	480b      	ldr	r0, [pc, #44]	; (8002894 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002866:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002868:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800286a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800286c:	d3f6      	bcc.n	800285c <CopyDataInit>
  ldr  r2, =_sbss
 800286e:	4a0b      	ldr	r2, [pc, #44]	; (800289c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002870:	e002      	b.n	8002878 <LoopFillZerobss>

08002872 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002872:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002874:	f842 3b04 	str.w	r3, [r2], #4

08002878 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002878:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800287a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800287c:	d3f9      	bcc.n	8002872 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800287e:	f7ff ffd3 	bl	8002828 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002882:	f00d f9cb 	bl	800fc1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002886:	f7fe fff5 	bl	8001874 <main>
  bx  lr    
 800288a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800288c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002890:	0801303c 	.word	0x0801303c
  ldr  r0, =_sdata
 8002894:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002898:	20000350 	.word	0x20000350
  ldr  r2, =_sbss
 800289c:	20000350 	.word	0x20000350
  ldr  r3, = _ebss
 80028a0:	20003238 	.word	0x20003238

080028a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028a4:	e7fe      	b.n	80028a4 <ADC_IRQHandler>
	...

080028a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028ac:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <HAL_Init+0x40>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a0d      	ldr	r2, [pc, #52]	; (80028e8 <HAL_Init+0x40>)
 80028b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_Init+0x40>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <HAL_Init+0x40>)
 80028be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028c4:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <HAL_Init+0x40>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a07      	ldr	r2, [pc, #28]	; (80028e8 <HAL_Init+0x40>)
 80028ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028d0:	2003      	movs	r0, #3
 80028d2:	f000 f94f 	bl	8002b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028d6:	2000      	movs	r0, #0
 80028d8:	f000 f808 	bl	80028ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028dc:	f7ff fc8c 	bl	80021f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40023c00 	.word	0x40023c00

080028ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028f4:	4b12      	ldr	r3, [pc, #72]	; (8002940 <HAL_InitTick+0x54>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4b12      	ldr	r3, [pc, #72]	; (8002944 <HAL_InitTick+0x58>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	4619      	mov	r1, r3
 80028fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002902:	fbb3 f3f1 	udiv	r3, r3, r1
 8002906:	fbb2 f3f3 	udiv	r3, r2, r3
 800290a:	4618      	mov	r0, r3
 800290c:	f000 f967 	bl	8002bde <HAL_SYSTICK_Config>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e00e      	b.n	8002938 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b0f      	cmp	r3, #15
 800291e:	d80a      	bhi.n	8002936 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002920:	2200      	movs	r2, #0
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	f04f 30ff 	mov.w	r0, #4294967295
 8002928:	f000 f92f 	bl	8002b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800292c:	4a06      	ldr	r2, [pc, #24]	; (8002948 <HAL_InitTick+0x5c>)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	e000      	b.n	8002938 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
}
 8002938:	4618      	mov	r0, r3
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20000000 	.word	0x20000000
 8002944:	20000008 	.word	0x20000008
 8002948:	20000004 	.word	0x20000004

0800294c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <HAL_IncTick+0x20>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	4b06      	ldr	r3, [pc, #24]	; (8002970 <HAL_IncTick+0x24>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4413      	add	r3, r2
 800295c:	4a04      	ldr	r2, [pc, #16]	; (8002970 <HAL_IncTick+0x24>)
 800295e:	6013      	str	r3, [r2, #0]
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	20000008 	.word	0x20000008
 8002970:	200014e4 	.word	0x200014e4

08002974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return uwTick;
 8002978:	4b03      	ldr	r3, [pc, #12]	; (8002988 <HAL_GetTick+0x14>)
 800297a:	681b      	ldr	r3, [r3, #0]
}
 800297c:	4618      	mov	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	200014e4 	.word	0x200014e4

0800298c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002994:	f7ff ffee 	bl	8002974 <HAL_GetTick>
 8002998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a4:	d005      	beq.n	80029b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029a6:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <HAL_Delay+0x44>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4413      	add	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029b2:	bf00      	nop
 80029b4:	f7ff ffde 	bl	8002974 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d8f7      	bhi.n	80029b4 <HAL_Delay+0x28>
  {
  }
}
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20000008 	.word	0x20000008

080029d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029e4:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <__NVIC_SetPriorityGrouping+0x44>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029f0:	4013      	ands	r3, r2
 80029f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a06:	4a04      	ldr	r2, [pc, #16]	; (8002a18 <__NVIC_SetPriorityGrouping+0x44>)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	60d3      	str	r3, [r2, #12]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000ed00 	.word	0xe000ed00

08002a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a20:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <__NVIC_GetPriorityGrouping+0x18>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	0a1b      	lsrs	r3, r3, #8
 8002a26:	f003 0307 	and.w	r3, r3, #7
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000ed00 	.word	0xe000ed00

08002a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	db0b      	blt.n	8002a62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a4a:	79fb      	ldrb	r3, [r7, #7]
 8002a4c:	f003 021f 	and.w	r2, r3, #31
 8002a50:	4907      	ldr	r1, [pc, #28]	; (8002a70 <__NVIC_EnableIRQ+0x38>)
 8002a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a56:	095b      	lsrs	r3, r3, #5
 8002a58:	2001      	movs	r0, #1
 8002a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	e000e100 	.word	0xe000e100

08002a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	6039      	str	r1, [r7, #0]
 8002a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	db0a      	blt.n	8002a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	490c      	ldr	r1, [pc, #48]	; (8002ac0 <__NVIC_SetPriority+0x4c>)
 8002a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a92:	0112      	lsls	r2, r2, #4
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	440b      	add	r3, r1
 8002a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a9c:	e00a      	b.n	8002ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	4908      	ldr	r1, [pc, #32]	; (8002ac4 <__NVIC_SetPriority+0x50>)
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	3b04      	subs	r3, #4
 8002aac:	0112      	lsls	r2, r2, #4
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	761a      	strb	r2, [r3, #24]
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	e000e100 	.word	0xe000e100
 8002ac4:	e000ed00 	.word	0xe000ed00

08002ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b089      	sub	sp, #36	; 0x24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f1c3 0307 	rsb	r3, r3, #7
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	bf28      	it	cs
 8002ae6:	2304      	movcs	r3, #4
 8002ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	3304      	adds	r3, #4
 8002aee:	2b06      	cmp	r3, #6
 8002af0:	d902      	bls.n	8002af8 <NVIC_EncodePriority+0x30>
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3b03      	subs	r3, #3
 8002af6:	e000      	b.n	8002afa <NVIC_EncodePriority+0x32>
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002afc:	f04f 32ff 	mov.w	r2, #4294967295
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43da      	mvns	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b10:	f04f 31ff 	mov.w	r1, #4294967295
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1a:	43d9      	mvns	r1, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b20:	4313      	orrs	r3, r2
         );
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3724      	adds	r7, #36	; 0x24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
	...

08002b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b40:	d301      	bcc.n	8002b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b42:	2301      	movs	r3, #1
 8002b44:	e00f      	b.n	8002b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b46:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <SysTick_Config+0x40>)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b4e:	210f      	movs	r1, #15
 8002b50:	f04f 30ff 	mov.w	r0, #4294967295
 8002b54:	f7ff ff8e 	bl	8002a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b58:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <SysTick_Config+0x40>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b5e:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <SysTick_Config+0x40>)
 8002b60:	2207      	movs	r2, #7
 8002b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	e000e010 	.word	0xe000e010

08002b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7ff ff29 	bl	80029d4 <__NVIC_SetPriorityGrouping>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b086      	sub	sp, #24
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	4603      	mov	r3, r0
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
 8002b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b9c:	f7ff ff3e 	bl	8002a1c <__NVIC_GetPriorityGrouping>
 8002ba0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68b9      	ldr	r1, [r7, #8]
 8002ba6:	6978      	ldr	r0, [r7, #20]
 8002ba8:	f7ff ff8e 	bl	8002ac8 <NVIC_EncodePriority>
 8002bac:	4602      	mov	r2, r0
 8002bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff ff5d 	bl	8002a74 <__NVIC_SetPriority>
}
 8002bba:	bf00      	nop
 8002bbc:	3718      	adds	r7, #24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	4603      	mov	r3, r0
 8002bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff ff31 	bl	8002a38 <__NVIC_EnableIRQ>
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff ffa2 	bl	8002b30 <SysTick_Config>
 8002bec:	4603      	mov	r3, r0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c04:	f7ff feb6 	bl	8002974 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e099      	b.n	8002d48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0201 	bic.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c34:	e00f      	b.n	8002c56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c36:	f7ff fe9d 	bl	8002974 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b05      	cmp	r3, #5
 8002c42:	d908      	bls.n	8002c56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2220      	movs	r2, #32
 8002c48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e078      	b.n	8002d48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1e8      	bne.n	8002c36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	4b38      	ldr	r3, [pc, #224]	; (8002d50 <HAL_DMA_Init+0x158>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d107      	bne.n	8002cc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f023 0307 	bic.w	r3, r3, #7
 8002cd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d117      	bne.n	8002d1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00e      	beq.n	8002d1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 fa9d 	bl	800323c <DMA_CheckFifoParam>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d008      	beq.n	8002d1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2240      	movs	r2, #64	; 0x40
 8002d0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d16:	2301      	movs	r3, #1
 8002d18:	e016      	b.n	8002d48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fa54 	bl	80031d0 <DMA_CalcBaseAndBitshift>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d30:	223f      	movs	r2, #63	; 0x3f
 8002d32:	409a      	lsls	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	f010803f 	.word	0xf010803f

08002d54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_DMA_Start_IT+0x26>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e040      	b.n	8002dfc <HAL_DMA_Start_IT+0xa8>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d12f      	bne.n	8002dee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2202      	movs	r2, #2
 8002d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 f9e6 	bl	8003174 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dac:	223f      	movs	r2, #63	; 0x3f
 8002dae:	409a      	lsls	r2, r3
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0216 	orr.w	r2, r2, #22
 8002dc2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d007      	beq.n	8002ddc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0208 	orr.w	r2, r2, #8
 8002dda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	e005      	b.n	8002dfa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002df6:	2302      	movs	r3, #2
 8002df8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d004      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2280      	movs	r2, #128	; 0x80
 8002e1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e00c      	b.n	8002e3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2205      	movs	r2, #5
 8002e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0201 	bic.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e54:	4b92      	ldr	r3, [pc, #584]	; (80030a0 <HAL_DMA_IRQHandler+0x258>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a92      	ldr	r2, [pc, #584]	; (80030a4 <HAL_DMA_IRQHandler+0x25c>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	0a9b      	lsrs	r3, r3, #10
 8002e60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e72:	2208      	movs	r2, #8
 8002e74:	409a      	lsls	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d01a      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d013      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0204 	bic.w	r2, r2, #4
 8002e9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea0:	2208      	movs	r2, #8
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eac:	f043 0201 	orr.w	r2, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb8:	2201      	movs	r2, #1
 8002eba:	409a      	lsls	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d012      	beq.n	8002eea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00b      	beq.n	8002eea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee2:	f043 0202 	orr.w	r2, r3, #2
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eee:	2204      	movs	r2, #4
 8002ef0:	409a      	lsls	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d012      	beq.n	8002f20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00b      	beq.n	8002f20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0c:	2204      	movs	r2, #4
 8002f0e:	409a      	lsls	r2, r3
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f18:	f043 0204 	orr.w	r2, r3, #4
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f24:	2210      	movs	r2, #16
 8002f26:	409a      	lsls	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d043      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d03c      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f42:	2210      	movs	r2, #16
 8002f44:	409a      	lsls	r2, r3
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d018      	beq.n	8002f8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d108      	bne.n	8002f78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d024      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	4798      	blx	r3
 8002f76:	e01f      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d01b      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	4798      	blx	r3
 8002f88:	e016      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d107      	bne.n	8002fa8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0208 	bic.w	r2, r2, #8
 8002fa6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 808e 	beq.w	80030e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 8086 	beq.w	80030e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fde:	2220      	movs	r2, #32
 8002fe0:	409a      	lsls	r2, r3
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b05      	cmp	r3, #5
 8002ff0:	d136      	bne.n	8003060 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0216 	bic.w	r2, r2, #22
 8003000:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003010:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	2b00      	cmp	r3, #0
 8003018:	d103      	bne.n	8003022 <HAL_DMA_IRQHandler+0x1da>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301e:	2b00      	cmp	r3, #0
 8003020:	d007      	beq.n	8003032 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0208 	bic.w	r2, r2, #8
 8003030:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003036:	223f      	movs	r2, #63	; 0x3f
 8003038:	409a      	lsls	r2, r3
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003052:	2b00      	cmp	r3, #0
 8003054:	d07d      	beq.n	8003152 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	4798      	blx	r3
        }
        return;
 800305e:	e078      	b.n	8003152 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d01c      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d108      	bne.n	800308e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003080:	2b00      	cmp	r3, #0
 8003082:	d030      	beq.n	80030e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	4798      	blx	r3
 800308c:	e02b      	b.n	80030e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003092:	2b00      	cmp	r3, #0
 8003094:	d027      	beq.n	80030e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	4798      	blx	r3
 800309e:	e022      	b.n	80030e6 <HAL_DMA_IRQHandler+0x29e>
 80030a0:	20000000 	.word	0x20000000
 80030a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10f      	bne.n	80030d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0210 	bic.w	r2, r2, #16
 80030c4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d032      	beq.n	8003154 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d022      	beq.n	8003140 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2205      	movs	r2, #5
 80030fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0201 	bic.w	r2, r2, #1
 8003110:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	3301      	adds	r3, #1
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	429a      	cmp	r2, r3
 800311c:	d307      	bcc.n	800312e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f2      	bne.n	8003112 <HAL_DMA_IRQHandler+0x2ca>
 800312c:	e000      	b.n	8003130 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800312e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	4798      	blx	r3
 8003150:	e000      	b.n	8003154 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003152:	bf00      	nop
    }
  }
}
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop

0800315c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003168:	4618      	mov	r0, r3
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003190:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2b40      	cmp	r3, #64	; 0x40
 80031a0:	d108      	bne.n	80031b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80031b2:	e007      	b.n	80031c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	60da      	str	r2, [r3, #12]
}
 80031c4:	bf00      	nop
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	3b10      	subs	r3, #16
 80031e0:	4a14      	ldr	r2, [pc, #80]	; (8003234 <DMA_CalcBaseAndBitshift+0x64>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	091b      	lsrs	r3, r3, #4
 80031e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031ea:	4a13      	ldr	r2, [pc, #76]	; (8003238 <DMA_CalcBaseAndBitshift+0x68>)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4413      	add	r3, r2
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d909      	bls.n	8003212 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003206:	f023 0303 	bic.w	r3, r3, #3
 800320a:	1d1a      	adds	r2, r3, #4
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	659a      	str	r2, [r3, #88]	; 0x58
 8003210:	e007      	b.n	8003222 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800321a:	f023 0303 	bic.w	r3, r3, #3
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003226:	4618      	mov	r0, r3
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	aaaaaaab 	.word	0xaaaaaaab
 8003238:	08012b90 	.word	0x08012b90

0800323c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d11f      	bne.n	8003296 <DMA_CheckFifoParam+0x5a>
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b03      	cmp	r3, #3
 800325a:	d856      	bhi.n	800330a <DMA_CheckFifoParam+0xce>
 800325c:	a201      	add	r2, pc, #4	; (adr r2, 8003264 <DMA_CheckFifoParam+0x28>)
 800325e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003262:	bf00      	nop
 8003264:	08003275 	.word	0x08003275
 8003268:	08003287 	.word	0x08003287
 800326c:	08003275 	.word	0x08003275
 8003270:	0800330b 	.word	0x0800330b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d046      	beq.n	800330e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003284:	e043      	b.n	800330e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800328e:	d140      	bne.n	8003312 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003294:	e03d      	b.n	8003312 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800329e:	d121      	bne.n	80032e4 <DMA_CheckFifoParam+0xa8>
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d837      	bhi.n	8003316 <DMA_CheckFifoParam+0xda>
 80032a6:	a201      	add	r2, pc, #4	; (adr r2, 80032ac <DMA_CheckFifoParam+0x70>)
 80032a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ac:	080032bd 	.word	0x080032bd
 80032b0:	080032c3 	.word	0x080032c3
 80032b4:	080032bd 	.word	0x080032bd
 80032b8:	080032d5 	.word	0x080032d5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	73fb      	strb	r3, [r7, #15]
      break;
 80032c0:	e030      	b.n	8003324 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d025      	beq.n	800331a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032d2:	e022      	b.n	800331a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032dc:	d11f      	bne.n	800331e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032e2:	e01c      	b.n	800331e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d903      	bls.n	80032f2 <DMA_CheckFifoParam+0xb6>
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d003      	beq.n	80032f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032f0:	e018      	b.n	8003324 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
      break;
 80032f6:	e015      	b.n	8003324 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00e      	beq.n	8003322 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
      break;
 8003308:	e00b      	b.n	8003322 <DMA_CheckFifoParam+0xe6>
      break;
 800330a:	bf00      	nop
 800330c:	e00a      	b.n	8003324 <DMA_CheckFifoParam+0xe8>
      break;
 800330e:	bf00      	nop
 8003310:	e008      	b.n	8003324 <DMA_CheckFifoParam+0xe8>
      break;
 8003312:	bf00      	nop
 8003314:	e006      	b.n	8003324 <DMA_CheckFifoParam+0xe8>
      break;
 8003316:	bf00      	nop
 8003318:	e004      	b.n	8003324 <DMA_CheckFifoParam+0xe8>
      break;
 800331a:	bf00      	nop
 800331c:	e002      	b.n	8003324 <DMA_CheckFifoParam+0xe8>
      break;   
 800331e:	bf00      	nop
 8003320:	e000      	b.n	8003324 <DMA_CheckFifoParam+0xe8>
      break;
 8003322:	bf00      	nop
    }
  } 
  
  return status; 
 8003324:	7bfb      	ldrb	r3, [r7, #15]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop

08003334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003334:	b480      	push	{r7}
 8003336:	b089      	sub	sp, #36	; 0x24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003342:	2300      	movs	r3, #0
 8003344:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003346:	2300      	movs	r3, #0
 8003348:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]
 800334e:	e159      	b.n	8003604 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003350:	2201      	movs	r2, #1
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4013      	ands	r3, r2
 8003362:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	429a      	cmp	r2, r3
 800336a:	f040 8148 	bne.w	80035fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b01      	cmp	r3, #1
 8003378:	d005      	beq.n	8003386 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003382:	2b02      	cmp	r3, #2
 8003384:	d130      	bne.n	80033e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	2203      	movs	r2, #3
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43db      	mvns	r3, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4013      	ands	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033bc:	2201      	movs	r2, #1
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	091b      	lsrs	r3, r3, #4
 80033d2:	f003 0201 	and.w	r2, r3, #1
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d017      	beq.n	8003424 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	2203      	movs	r2, #3
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4013      	ands	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d123      	bne.n	8003478 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	08da      	lsrs	r2, r3, #3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3208      	adds	r2, #8
 8003438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800343c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	220f      	movs	r2, #15
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	08da      	lsrs	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3208      	adds	r2, #8
 8003472:	69b9      	ldr	r1, [r7, #24]
 8003474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	2203      	movs	r2, #3
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 0203 	and.w	r2, r3, #3
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 80a2 	beq.w	80035fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	4b57      	ldr	r3, [pc, #348]	; (800361c <HAL_GPIO_Init+0x2e8>)
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	4a56      	ldr	r2, [pc, #344]	; (800361c <HAL_GPIO_Init+0x2e8>)
 80034c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034c8:	6453      	str	r3, [r2, #68]	; 0x44
 80034ca:	4b54      	ldr	r3, [pc, #336]	; (800361c <HAL_GPIO_Init+0x2e8>)
 80034cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034d6:	4a52      	ldr	r2, [pc, #328]	; (8003620 <HAL_GPIO_Init+0x2ec>)
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	089b      	lsrs	r3, r3, #2
 80034dc:	3302      	adds	r3, #2
 80034de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	220f      	movs	r2, #15
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43db      	mvns	r3, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4013      	ands	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a49      	ldr	r2, [pc, #292]	; (8003624 <HAL_GPIO_Init+0x2f0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d019      	beq.n	8003536 <HAL_GPIO_Init+0x202>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a48      	ldr	r2, [pc, #288]	; (8003628 <HAL_GPIO_Init+0x2f4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d013      	beq.n	8003532 <HAL_GPIO_Init+0x1fe>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a47      	ldr	r2, [pc, #284]	; (800362c <HAL_GPIO_Init+0x2f8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00d      	beq.n	800352e <HAL_GPIO_Init+0x1fa>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a46      	ldr	r2, [pc, #280]	; (8003630 <HAL_GPIO_Init+0x2fc>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d007      	beq.n	800352a <HAL_GPIO_Init+0x1f6>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a45      	ldr	r2, [pc, #276]	; (8003634 <HAL_GPIO_Init+0x300>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d101      	bne.n	8003526 <HAL_GPIO_Init+0x1f2>
 8003522:	2304      	movs	r3, #4
 8003524:	e008      	b.n	8003538 <HAL_GPIO_Init+0x204>
 8003526:	2307      	movs	r3, #7
 8003528:	e006      	b.n	8003538 <HAL_GPIO_Init+0x204>
 800352a:	2303      	movs	r3, #3
 800352c:	e004      	b.n	8003538 <HAL_GPIO_Init+0x204>
 800352e:	2302      	movs	r3, #2
 8003530:	e002      	b.n	8003538 <HAL_GPIO_Init+0x204>
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <HAL_GPIO_Init+0x204>
 8003536:	2300      	movs	r3, #0
 8003538:	69fa      	ldr	r2, [r7, #28]
 800353a:	f002 0203 	and.w	r2, r2, #3
 800353e:	0092      	lsls	r2, r2, #2
 8003540:	4093      	lsls	r3, r2
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4313      	orrs	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003548:	4935      	ldr	r1, [pc, #212]	; (8003620 <HAL_GPIO_Init+0x2ec>)
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	089b      	lsrs	r3, r3, #2
 800354e:	3302      	adds	r3, #2
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003556:	4b38      	ldr	r3, [pc, #224]	; (8003638 <HAL_GPIO_Init+0x304>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	43db      	mvns	r3, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4013      	ands	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800357a:	4a2f      	ldr	r2, [pc, #188]	; (8003638 <HAL_GPIO_Init+0x304>)
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003580:	4b2d      	ldr	r3, [pc, #180]	; (8003638 <HAL_GPIO_Init+0x304>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	43db      	mvns	r3, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4013      	ands	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035a4:	4a24      	ldr	r2, [pc, #144]	; (8003638 <HAL_GPIO_Init+0x304>)
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035aa:	4b23      	ldr	r3, [pc, #140]	; (8003638 <HAL_GPIO_Init+0x304>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	43db      	mvns	r3, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4013      	ands	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035ce:	4a1a      	ldr	r2, [pc, #104]	; (8003638 <HAL_GPIO_Init+0x304>)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035d4:	4b18      	ldr	r3, [pc, #96]	; (8003638 <HAL_GPIO_Init+0x304>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	43db      	mvns	r3, r3
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4013      	ands	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035f8:	4a0f      	ldr	r2, [pc, #60]	; (8003638 <HAL_GPIO_Init+0x304>)
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	3301      	adds	r3, #1
 8003602:	61fb      	str	r3, [r7, #28]
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	2b0f      	cmp	r3, #15
 8003608:	f67f aea2 	bls.w	8003350 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800360c:	bf00      	nop
 800360e:	bf00      	nop
 8003610:	3724      	adds	r7, #36	; 0x24
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40023800 	.word	0x40023800
 8003620:	40013800 	.word	0x40013800
 8003624:	40020000 	.word	0x40020000
 8003628:	40020400 	.word	0x40020400
 800362c:	40020800 	.word	0x40020800
 8003630:	40020c00 	.word	0x40020c00
 8003634:	40021000 	.word	0x40021000
 8003638:	40013c00 	.word	0x40013c00

0800363c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	887b      	ldrh	r3, [r7, #2]
 800364e:	4013      	ands	r3, r2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003654:	2301      	movs	r3, #1
 8003656:	73fb      	strb	r3, [r7, #15]
 8003658:	e001      	b.n	800365e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800365a:	2300      	movs	r3, #0
 800365c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800365e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	807b      	strh	r3, [r7, #2]
 8003678:	4613      	mov	r3, r2
 800367a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800367c:	787b      	ldrb	r3, [r7, #1]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003682:	887a      	ldrh	r2, [r7, #2]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003688:	e003      	b.n	8003692 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800368a:	887b      	ldrh	r3, [r7, #2]
 800368c:	041a      	lsls	r2, r3, #16
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	619a      	str	r2, [r3, #24]
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
	...

080036a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e12b      	b.n	800390a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fe fdbe 	bl	8002248 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2224      	movs	r2, #36	; 0x24
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003702:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003704:	f002 fd2e 	bl	8006164 <HAL_RCC_GetPCLK1Freq>
 8003708:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	4a81      	ldr	r2, [pc, #516]	; (8003914 <HAL_I2C_Init+0x274>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d807      	bhi.n	8003724 <HAL_I2C_Init+0x84>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4a80      	ldr	r2, [pc, #512]	; (8003918 <HAL_I2C_Init+0x278>)
 8003718:	4293      	cmp	r3, r2
 800371a:	bf94      	ite	ls
 800371c:	2301      	movls	r3, #1
 800371e:	2300      	movhi	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	e006      	b.n	8003732 <HAL_I2C_Init+0x92>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4a7d      	ldr	r2, [pc, #500]	; (800391c <HAL_I2C_Init+0x27c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	bf94      	ite	ls
 800372c:	2301      	movls	r3, #1
 800372e:	2300      	movhi	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e0e7      	b.n	800390a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4a78      	ldr	r2, [pc, #480]	; (8003920 <HAL_I2C_Init+0x280>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	0c9b      	lsrs	r3, r3, #18
 8003744:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	430a      	orrs	r2, r1
 8003758:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	4a6a      	ldr	r2, [pc, #424]	; (8003914 <HAL_I2C_Init+0x274>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d802      	bhi.n	8003774 <HAL_I2C_Init+0xd4>
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	3301      	adds	r3, #1
 8003772:	e009      	b.n	8003788 <HAL_I2C_Init+0xe8>
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800377a:	fb02 f303 	mul.w	r3, r2, r3
 800377e:	4a69      	ldr	r2, [pc, #420]	; (8003924 <HAL_I2C_Init+0x284>)
 8003780:	fba2 2303 	umull	r2, r3, r2, r3
 8003784:	099b      	lsrs	r3, r3, #6
 8003786:	3301      	adds	r3, #1
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6812      	ldr	r2, [r2, #0]
 800378c:	430b      	orrs	r3, r1
 800378e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800379a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	495c      	ldr	r1, [pc, #368]	; (8003914 <HAL_I2C_Init+0x274>)
 80037a4:	428b      	cmp	r3, r1
 80037a6:	d819      	bhi.n	80037dc <HAL_I2C_Init+0x13c>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	1e59      	subs	r1, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80037b6:	1c59      	adds	r1, r3, #1
 80037b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037bc:	400b      	ands	r3, r1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <HAL_I2C_Init+0x138>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1e59      	subs	r1, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80037d0:	3301      	adds	r3, #1
 80037d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d6:	e051      	b.n	800387c <HAL_I2C_Init+0x1dc>
 80037d8:	2304      	movs	r3, #4
 80037da:	e04f      	b.n	800387c <HAL_I2C_Init+0x1dc>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d111      	bne.n	8003808 <HAL_I2C_Init+0x168>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	1e58      	subs	r0, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6859      	ldr	r1, [r3, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	440b      	add	r3, r1
 80037f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037f6:	3301      	adds	r3, #1
 80037f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	bf0c      	ite	eq
 8003800:	2301      	moveq	r3, #1
 8003802:	2300      	movne	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	e012      	b.n	800382e <HAL_I2C_Init+0x18e>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	1e58      	subs	r0, r3, #1
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6859      	ldr	r1, [r3, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	0099      	lsls	r1, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	fbb0 f3f3 	udiv	r3, r0, r3
 800381e:	3301      	adds	r3, #1
 8003820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003824:	2b00      	cmp	r3, #0
 8003826:	bf0c      	ite	eq
 8003828:	2301      	moveq	r3, #1
 800382a:	2300      	movne	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_I2C_Init+0x196>
 8003832:	2301      	movs	r3, #1
 8003834:	e022      	b.n	800387c <HAL_I2C_Init+0x1dc>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10e      	bne.n	800385c <HAL_I2C_Init+0x1bc>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	1e58      	subs	r0, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6859      	ldr	r1, [r3, #4]
 8003846:	460b      	mov	r3, r1
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	440b      	add	r3, r1
 800384c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003850:	3301      	adds	r3, #1
 8003852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800385a:	e00f      	b.n	800387c <HAL_I2C_Init+0x1dc>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	1e58      	subs	r0, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6859      	ldr	r1, [r3, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	0099      	lsls	r1, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003872:	3301      	adds	r3, #1
 8003874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003878:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	6809      	ldr	r1, [r1, #0]
 8003880:	4313      	orrs	r3, r2
 8003882:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69da      	ldr	r2, [r3, #28]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6911      	ldr	r1, [r2, #16]
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	68d2      	ldr	r2, [r2, #12]
 80038b6:	4311      	orrs	r1, r2
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	430b      	orrs	r3, r1
 80038be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	000186a0 	.word	0x000186a0
 8003918:	001e847f 	.word	0x001e847f
 800391c:	003d08ff 	.word	0x003d08ff
 8003920:	431bde83 	.word	0x431bde83
 8003924:	10624dd3 	.word	0x10624dd3

08003928 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af02      	add	r7, sp, #8
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	607a      	str	r2, [r7, #4]
 8003932:	461a      	mov	r2, r3
 8003934:	460b      	mov	r3, r1
 8003936:	817b      	strh	r3, [r7, #10]
 8003938:	4613      	mov	r3, r2
 800393a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800393c:	f7ff f81a 	bl	8002974 <HAL_GetTick>
 8003940:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b20      	cmp	r3, #32
 800394c:	f040 80e0 	bne.w	8003b10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	2319      	movs	r3, #25
 8003956:	2201      	movs	r2, #1
 8003958:	4970      	ldr	r1, [pc, #448]	; (8003b1c <HAL_I2C_Master_Transmit+0x1f4>)
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 fc58 	bl	8004210 <I2C_WaitOnFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003966:	2302      	movs	r3, #2
 8003968:	e0d3      	b.n	8003b12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_I2C_Master_Transmit+0x50>
 8003974:	2302      	movs	r3, #2
 8003976:	e0cc      	b.n	8003b12 <HAL_I2C_Master_Transmit+0x1ea>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b01      	cmp	r3, #1
 800398c:	d007      	beq.n	800399e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0201 	orr.w	r2, r2, #1
 800399c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2221      	movs	r2, #33	; 0x21
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2210      	movs	r2, #16
 80039ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	893a      	ldrh	r2, [r7, #8]
 80039ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4a50      	ldr	r2, [pc, #320]	; (8003b20 <HAL_I2C_Master_Transmit+0x1f8>)
 80039de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039e0:	8979      	ldrh	r1, [r7, #10]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	6a3a      	ldr	r2, [r7, #32]
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 fac2 	bl	8003f70 <I2C_MasterRequestWrite>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e08d      	b.n	8003b12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f6:	2300      	movs	r3, #0
 80039f8:	613b      	str	r3, [r7, #16]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a0c:	e066      	b.n	8003adc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	6a39      	ldr	r1, [r7, #32]
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 fcd2 	bl	80043bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00d      	beq.n	8003a3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d107      	bne.n	8003a36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e06b      	b.n	8003b12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	781a      	ldrb	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d11b      	bne.n	8003ab0 <HAL_I2C_Master_Transmit+0x188>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d017      	beq.n	8003ab0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	781a      	ldrb	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	6a39      	ldr	r1, [r7, #32]
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 fcc2 	bl	800443e <I2C_WaitOnBTFFlagUntilTimeout>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00d      	beq.n	8003adc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d107      	bne.n	8003ad8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e01a      	b.n	8003b12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d194      	bne.n	8003a0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e000      	b.n	8003b12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b10:	2302      	movs	r3, #2
  }
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	00100002 	.word	0x00100002
 8003b20:	ffff0000 	.word	0xffff0000

08003b24 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08c      	sub	sp, #48	; 0x30
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	607a      	str	r2, [r7, #4]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	460b      	mov	r3, r1
 8003b32:	817b      	strh	r3, [r7, #10]
 8003b34:	4613      	mov	r3, r2
 8003b36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b38:	f7fe ff1c 	bl	8002974 <HAL_GetTick>
 8003b3c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b20      	cmp	r3, #32
 8003b48:	f040 820b 	bne.w	8003f62 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	2319      	movs	r3, #25
 8003b52:	2201      	movs	r2, #1
 8003b54:	497c      	ldr	r1, [pc, #496]	; (8003d48 <HAL_I2C_Master_Receive+0x224>)
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 fb5a 	bl	8004210 <I2C_WaitOnFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003b62:	2302      	movs	r3, #2
 8003b64:	e1fe      	b.n	8003f64 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_I2C_Master_Receive+0x50>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e1f7      	b.n	8003f64 <HAL_I2C_Master_Receive+0x440>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d007      	beq.n	8003b9a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 0201 	orr.w	r2, r2, #1
 8003b98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ba8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2222      	movs	r2, #34	; 0x22
 8003bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2210      	movs	r2, #16
 8003bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	893a      	ldrh	r2, [r7, #8]
 8003bca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4a5c      	ldr	r2, [pc, #368]	; (8003d4c <HAL_I2C_Master_Receive+0x228>)
 8003bda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003bdc:	8979      	ldrh	r1, [r7, #10]
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 fa46 	bl	8004074 <I2C_MasterRequestRead>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e1b8      	b.n	8003f64 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d113      	bne.n	8003c22 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	623b      	str	r3, [r7, #32]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	623b      	str	r3, [r7, #32]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	623b      	str	r3, [r7, #32]
 8003c0e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	e18c      	b.n	8003f3c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d11b      	bne.n	8003c62 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	61fb      	str	r3, [r7, #28]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	61fb      	str	r3, [r7, #28]
 8003c4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	e16c      	b.n	8003f3c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d11b      	bne.n	8003ca2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c78:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	61bb      	str	r3, [r7, #24]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	61bb      	str	r3, [r7, #24]
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	e14c      	b.n	8003f3c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	617b      	str	r3, [r7, #20]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	617b      	str	r3, [r7, #20]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003cc8:	e138      	b.n	8003f3c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	f200 80f1 	bhi.w	8003eb6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d123      	bne.n	8003d24 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 fbed 	bl	80044c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e139      	b.n	8003f64 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d22:	e10b      	b.n	8003f3c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d14e      	bne.n	8003dca <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d32:	2200      	movs	r2, #0
 8003d34:	4906      	ldr	r1, [pc, #24]	; (8003d50 <HAL_I2C_Master_Receive+0x22c>)
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 fa6a 	bl	8004210 <I2C_WaitOnFlagUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d008      	beq.n	8003d54 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e10e      	b.n	8003f64 <HAL_I2C_Master_Receive+0x440>
 8003d46:	bf00      	nop
 8003d48:	00100002 	.word	0x00100002
 8003d4c:	ffff0000 	.word	0xffff0000
 8003d50:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	691a      	ldr	r2, [r3, #16]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	b2d2      	uxtb	r2, r2
 8003da2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dc8:	e0b8      	b.n	8003f3c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	4966      	ldr	r1, [pc, #408]	; (8003f6c <HAL_I2C_Master_Receive+0x448>)
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 fa1b 	bl	8004210 <I2C_WaitOnFlagUntilTimeout>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e0bf      	b.n	8003f64 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	691a      	ldr	r2, [r3, #16]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	494f      	ldr	r1, [pc, #316]	; (8003f6c <HAL_I2C_Master_Receive+0x448>)
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 f9ed 	bl	8004210 <I2C_WaitOnFlagUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e091      	b.n	8003f64 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691a      	ldr	r2, [r3, #16]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003eb4:	e042      	b.n	8003f3c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 fb00 	bl	80044c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e04c      	b.n	8003f64 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	f003 0304 	and.w	r3, r3, #4
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d118      	bne.n	8003f3c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	691a      	ldr	r2, [r3, #16]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	b2d2      	uxtb	r2, r2
 8003f16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f47f aec2 	bne.w	8003cca <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	e000      	b.n	8003f64 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003f62:	2302      	movs	r3, #2
  }
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3728      	adds	r7, #40	; 0x28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	00010004 	.word	0x00010004

08003f70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	607a      	str	r2, [r7, #4]
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d006      	beq.n	8003f9a <I2C_MasterRequestWrite+0x2a>
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d003      	beq.n	8003f9a <I2C_MasterRequestWrite+0x2a>
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f98:	d108      	bne.n	8003fac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	e00b      	b.n	8003fc4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	2b12      	cmp	r3, #18
 8003fb2:	d107      	bne.n	8003fc4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fc2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 f91d 	bl	8004210 <I2C_WaitOnFlagUntilTimeout>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00d      	beq.n	8003ff8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fea:	d103      	bne.n	8003ff4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ff2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e035      	b.n	8004064 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004000:	d108      	bne.n	8004014 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004002:	897b      	ldrh	r3, [r7, #10]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004010:	611a      	str	r2, [r3, #16]
 8004012:	e01b      	b.n	800404c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004014:	897b      	ldrh	r3, [r7, #10]
 8004016:	11db      	asrs	r3, r3, #7
 8004018:	b2db      	uxtb	r3, r3
 800401a:	f003 0306 	and.w	r3, r3, #6
 800401e:	b2db      	uxtb	r3, r3
 8004020:	f063 030f 	orn	r3, r3, #15
 8004024:	b2da      	uxtb	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	490e      	ldr	r1, [pc, #56]	; (800406c <I2C_MasterRequestWrite+0xfc>)
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f943 	bl	80042be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e010      	b.n	8004064 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004042:	897b      	ldrh	r3, [r7, #10]
 8004044:	b2da      	uxtb	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	4907      	ldr	r1, [pc, #28]	; (8004070 <I2C_MasterRequestWrite+0x100>)
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 f933 	bl	80042be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	00010008 	.word	0x00010008
 8004070:	00010002 	.word	0x00010002

08004074 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af02      	add	r7, sp, #8
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	607a      	str	r2, [r7, #4]
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	460b      	mov	r3, r1
 8004082:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004098:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2b08      	cmp	r3, #8
 800409e:	d006      	beq.n	80040ae <I2C_MasterRequestRead+0x3a>
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d003      	beq.n	80040ae <I2C_MasterRequestRead+0x3a>
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040ac:	d108      	bne.n	80040c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	e00b      	b.n	80040d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	2b11      	cmp	r3, #17
 80040c6:	d107      	bne.n	80040d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 f893 	bl	8004210 <I2C_WaitOnFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00d      	beq.n	800410c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040fe:	d103      	bne.n	8004108 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004106:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e079      	b.n	8004200 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004114:	d108      	bne.n	8004128 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004116:	897b      	ldrh	r3, [r7, #10]
 8004118:	b2db      	uxtb	r3, r3
 800411a:	f043 0301 	orr.w	r3, r3, #1
 800411e:	b2da      	uxtb	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	611a      	str	r2, [r3, #16]
 8004126:	e05f      	b.n	80041e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004128:	897b      	ldrh	r3, [r7, #10]
 800412a:	11db      	asrs	r3, r3, #7
 800412c:	b2db      	uxtb	r3, r3
 800412e:	f003 0306 	and.w	r3, r3, #6
 8004132:	b2db      	uxtb	r3, r3
 8004134:	f063 030f 	orn	r3, r3, #15
 8004138:	b2da      	uxtb	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	4930      	ldr	r1, [pc, #192]	; (8004208 <I2C_MasterRequestRead+0x194>)
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 f8b9 	bl	80042be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e054      	b.n	8004200 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004156:	897b      	ldrh	r3, [r7, #10]
 8004158:	b2da      	uxtb	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	4929      	ldr	r1, [pc, #164]	; (800420c <I2C_MasterRequestRead+0x198>)
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 f8a9 	bl	80042be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e044      	b.n	8004200 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004176:	2300      	movs	r3, #0
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	613b      	str	r3, [r7, #16]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	613b      	str	r3, [r7, #16]
 800418a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800419a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 f831 	bl	8004210 <I2C_WaitOnFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00d      	beq.n	80041d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041c2:	d103      	bne.n	80041cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e017      	b.n	8004200 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80041d0:	897b      	ldrh	r3, [r7, #10]
 80041d2:	11db      	asrs	r3, r3, #7
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	f003 0306 	and.w	r3, r3, #6
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	f063 030e 	orn	r3, r3, #14
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	4907      	ldr	r1, [pc, #28]	; (800420c <I2C_MasterRequestRead+0x198>)
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 f865 	bl	80042be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e000      	b.n	8004200 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	00010008 	.word	0x00010008
 800420c:	00010002 	.word	0x00010002

08004210 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	4613      	mov	r3, r2
 800421e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004220:	e025      	b.n	800426e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d021      	beq.n	800426e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422a:	f7fe fba3 	bl	8002974 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d302      	bcc.n	8004240 <I2C_WaitOnFlagUntilTimeout+0x30>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d116      	bne.n	800426e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f043 0220 	orr.w	r2, r3, #32
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e023      	b.n	80042b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	0c1b      	lsrs	r3, r3, #16
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b01      	cmp	r3, #1
 8004276:	d10d      	bne.n	8004294 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	43da      	mvns	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4013      	ands	r3, r2
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	bf0c      	ite	eq
 800428a:	2301      	moveq	r3, #1
 800428c:	2300      	movne	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	461a      	mov	r2, r3
 8004292:	e00c      	b.n	80042ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	43da      	mvns	r2, r3
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	4013      	ands	r3, r2
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	bf0c      	ite	eq
 80042a6:	2301      	moveq	r3, #1
 80042a8:	2300      	movne	r3, #0
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	461a      	mov	r2, r3
 80042ae:	79fb      	ldrb	r3, [r7, #7]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d0b6      	beq.n	8004222 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	60f8      	str	r0, [r7, #12]
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	607a      	str	r2, [r7, #4]
 80042ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042cc:	e051      	b.n	8004372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042dc:	d123      	bne.n	8004326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	f043 0204 	orr.w	r2, r3, #4
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e046      	b.n	80043b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432c:	d021      	beq.n	8004372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800432e:	f7fe fb21 	bl	8002974 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	429a      	cmp	r2, r3
 800433c:	d302      	bcc.n	8004344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d116      	bne.n	8004372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	f043 0220 	orr.w	r2, r3, #32
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e020      	b.n	80043b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	0c1b      	lsrs	r3, r3, #16
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b01      	cmp	r3, #1
 800437a:	d10c      	bne.n	8004396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	43da      	mvns	r2, r3
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	4013      	ands	r3, r2
 8004388:	b29b      	uxth	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	bf14      	ite	ne
 800438e:	2301      	movne	r3, #1
 8004390:	2300      	moveq	r3, #0
 8004392:	b2db      	uxtb	r3, r3
 8004394:	e00b      	b.n	80043ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	43da      	mvns	r2, r3
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	4013      	ands	r3, r2
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	bf14      	ite	ne
 80043a8:	2301      	movne	r3, #1
 80043aa:	2300      	moveq	r3, #0
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d18d      	bne.n	80042ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043c8:	e02d      	b.n	8004426 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 f8ce 	bl	800456c <I2C_IsAcknowledgeFailed>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e02d      	b.n	8004436 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e0:	d021      	beq.n	8004426 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e2:	f7fe fac7 	bl	8002974 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d302      	bcc.n	80043f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d116      	bne.n	8004426 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2220      	movs	r2, #32
 8004402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	f043 0220 	orr.w	r2, r3, #32
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e007      	b.n	8004436 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004430:	2b80      	cmp	r3, #128	; 0x80
 8004432:	d1ca      	bne.n	80043ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b084      	sub	sp, #16
 8004442:	af00      	add	r7, sp, #0
 8004444:	60f8      	str	r0, [r7, #12]
 8004446:	60b9      	str	r1, [r7, #8]
 8004448:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800444a:	e02d      	b.n	80044a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 f88d 	bl	800456c <I2C_IsAcknowledgeFailed>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e02d      	b.n	80044b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004462:	d021      	beq.n	80044a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004464:	f7fe fa86 	bl	8002974 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	429a      	cmp	r2, r3
 8004472:	d302      	bcc.n	800447a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d116      	bne.n	80044a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	f043 0220 	orr.w	r2, r3, #32
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e007      	b.n	80044b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	f003 0304 	and.w	r3, r3, #4
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d1ca      	bne.n	800444c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044cc:	e042      	b.n	8004554 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	f003 0310 	and.w	r3, r3, #16
 80044d8:	2b10      	cmp	r3, #16
 80044da:	d119      	bne.n	8004510 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f06f 0210 	mvn.w	r2, #16
 80044e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2220      	movs	r2, #32
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e029      	b.n	8004564 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004510:	f7fe fa30 	bl	8002974 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	429a      	cmp	r2, r3
 800451e:	d302      	bcc.n	8004526 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d116      	bne.n	8004554 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	f043 0220 	orr.w	r2, r3, #32
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e007      	b.n	8004564 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455e:	2b40      	cmp	r3, #64	; 0x40
 8004560:	d1b5      	bne.n	80044ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800457e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004582:	d11b      	bne.n	80045bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800458c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	f043 0204 	orr.w	r2, r3, #4
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e000      	b.n	80045be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80045ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045cc:	b08f      	sub	sp, #60	; 0x3c
 80045ce:	af0a      	add	r7, sp, #40	; 0x28
 80045d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e10f      	b.n	80047fc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f00a fbbc 	bl	800ed74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2203      	movs	r2, #3
 8004600:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460c:	2b00      	cmp	r3, #0
 800460e:	d102      	bne.n	8004616 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f004 fe1f 	bl	800925e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	603b      	str	r3, [r7, #0]
 8004626:	687e      	ldr	r6, [r7, #4]
 8004628:	466d      	mov	r5, sp
 800462a:	f106 0410 	add.w	r4, r6, #16
 800462e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004636:	e894 0003 	ldmia.w	r4, {r0, r1}
 800463a:	e885 0003 	stmia.w	r5, {r0, r1}
 800463e:	1d33      	adds	r3, r6, #4
 8004640:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004642:	6838      	ldr	r0, [r7, #0]
 8004644:	f004 fcf6 	bl	8009034 <USB_CoreInit>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d005      	beq.n	800465a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2202      	movs	r2, #2
 8004652:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e0d0      	b.n	80047fc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2100      	movs	r1, #0
 8004660:	4618      	mov	r0, r3
 8004662:	f004 fe0d 	bl	8009280 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004666:	2300      	movs	r3, #0
 8004668:	73fb      	strb	r3, [r7, #15]
 800466a:	e04a      	b.n	8004702 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800466c:	7bfa      	ldrb	r2, [r7, #15]
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	4613      	mov	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	333d      	adds	r3, #61	; 0x3d
 800467c:	2201      	movs	r2, #1
 800467e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004680:	7bfa      	ldrb	r2, [r7, #15]
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	4613      	mov	r3, r2
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	1a9b      	subs	r3, r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	440b      	add	r3, r1
 800468e:	333c      	adds	r3, #60	; 0x3c
 8004690:	7bfa      	ldrb	r2, [r7, #15]
 8004692:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004694:	7bfa      	ldrb	r2, [r7, #15]
 8004696:	7bfb      	ldrb	r3, [r7, #15]
 8004698:	b298      	uxth	r0, r3
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	3342      	adds	r3, #66	; 0x42
 80046a8:	4602      	mov	r2, r0
 80046aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80046ac:	7bfa      	ldrb	r2, [r7, #15]
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	333f      	adds	r3, #63	; 0x3f
 80046bc:	2200      	movs	r2, #0
 80046be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80046c0:	7bfa      	ldrb	r2, [r7, #15]
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	4613      	mov	r3, r2
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	1a9b      	subs	r3, r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	3344      	adds	r3, #68	; 0x44
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80046d4:	7bfa      	ldrb	r2, [r7, #15]
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	4613      	mov	r3, r2
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	1a9b      	subs	r3, r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	3348      	adds	r3, #72	; 0x48
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80046e8:	7bfa      	ldrb	r2, [r7, #15]
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	4613      	mov	r3, r2
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	1a9b      	subs	r3, r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	3350      	adds	r3, #80	; 0x50
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	3301      	adds	r3, #1
 8004700:	73fb      	strb	r3, [r7, #15]
 8004702:	7bfa      	ldrb	r2, [r7, #15]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	429a      	cmp	r2, r3
 800470a:	d3af      	bcc.n	800466c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800470c:	2300      	movs	r3, #0
 800470e:	73fb      	strb	r3, [r7, #15]
 8004710:	e044      	b.n	800479c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004712:	7bfa      	ldrb	r2, [r7, #15]
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	4613      	mov	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	1a9b      	subs	r3, r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	440b      	add	r3, r1
 8004720:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004724:	2200      	movs	r2, #0
 8004726:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004728:	7bfa      	ldrb	r2, [r7, #15]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800473a:	7bfa      	ldrb	r2, [r7, #15]
 800473c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800473e:	7bfa      	ldrb	r2, [r7, #15]
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	4613      	mov	r3, r2
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	1a9b      	subs	r3, r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	440b      	add	r3, r1
 800474c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004750:	2200      	movs	r2, #0
 8004752:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004754:	7bfa      	ldrb	r2, [r7, #15]
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	4613      	mov	r3, r2
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	1a9b      	subs	r3, r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800476a:	7bfa      	ldrb	r2, [r7, #15]
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	4613      	mov	r3, r2
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	1a9b      	subs	r3, r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	440b      	add	r3, r1
 8004778:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004780:	7bfa      	ldrb	r2, [r7, #15]
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	4613      	mov	r3, r2
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	1a9b      	subs	r3, r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	440b      	add	r3, r1
 800478e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004792:	2200      	movs	r2, #0
 8004794:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004796:	7bfb      	ldrb	r3, [r7, #15]
 8004798:	3301      	adds	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
 800479c:	7bfa      	ldrb	r2, [r7, #15]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d3b5      	bcc.n	8004712 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	687e      	ldr	r6, [r7, #4]
 80047ae:	466d      	mov	r5, sp
 80047b0:	f106 0410 	add.w	r4, r6, #16
 80047b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80047c4:	1d33      	adds	r3, r6, #4
 80047c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047c8:	6838      	ldr	r0, [r7, #0]
 80047ca:	f004 fda5 	bl	8009318 <USB_DevInit>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e00d      	b.n	80047fc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f005 fe21 	bl	800a43c <USB_DevDisconnect>

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004804 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <HAL_PCD_Start+0x1c>
 800481c:	2302      	movs	r3, #2
 800481e:	e020      	b.n	8004862 <HAL_PCD_Start+0x5e>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482c:	2b01      	cmp	r3, #1
 800482e:	d109      	bne.n	8004844 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004834:	2b01      	cmp	r3, #1
 8004836:	d005      	beq.n	8004844 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4618      	mov	r0, r3
 800484a:	f004 fcf7 	bl	800923c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f005 fdd1 	bl	800a3fa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800486a:	b590      	push	{r4, r7, lr}
 800486c:	b08d      	sub	sp, #52	; 0x34
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4618      	mov	r0, r3
 8004882:	f005 fe8f 	bl	800a5a4 <USB_GetMode>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	f040 839d 	bne.w	8004fc8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f005 fdf3 	bl	800a47e <USB_ReadInterrupts>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 8393 	beq.w	8004fc6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f005 fdea 	bl	800a47e <USB_ReadInterrupts>
 80048aa:	4603      	mov	r3, r0
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d107      	bne.n	80048c4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	695a      	ldr	r2, [r3, #20]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f002 0202 	and.w	r2, r2, #2
 80048c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f005 fdd8 	bl	800a47e <USB_ReadInterrupts>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f003 0310 	and.w	r3, r3, #16
 80048d4:	2b10      	cmp	r3, #16
 80048d6:	d161      	bne.n	800499c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699a      	ldr	r2, [r3, #24]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0210 	bic.w	r2, r2, #16
 80048e6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	f003 020f 	and.w	r2, r3, #15
 80048f4:	4613      	mov	r3, r2
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	1a9b      	subs	r3, r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	4413      	add	r3, r2
 8004904:	3304      	adds	r3, #4
 8004906:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	0c5b      	lsrs	r3, r3, #17
 800490c:	f003 030f 	and.w	r3, r3, #15
 8004910:	2b02      	cmp	r3, #2
 8004912:	d124      	bne.n	800495e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800491a:	4013      	ands	r3, r2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d035      	beq.n	800498c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	091b      	lsrs	r3, r3, #4
 8004928:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800492a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800492e:	b29b      	uxth	r3, r3
 8004930:	461a      	mov	r2, r3
 8004932:	6a38      	ldr	r0, [r7, #32]
 8004934:	f005 fc0f 	bl	800a156 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	091b      	lsrs	r3, r3, #4
 8004940:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004944:	441a      	add	r2, r3
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	699a      	ldr	r2, [r3, #24]
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	091b      	lsrs	r3, r3, #4
 8004952:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004956:	441a      	add	r2, r3
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	619a      	str	r2, [r3, #24]
 800495c:	e016      	b.n	800498c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	0c5b      	lsrs	r3, r3, #17
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	2b06      	cmp	r3, #6
 8004968:	d110      	bne.n	800498c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004970:	2208      	movs	r2, #8
 8004972:	4619      	mov	r1, r3
 8004974:	6a38      	ldr	r0, [r7, #32]
 8004976:	f005 fbee 	bl	800a156 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	699a      	ldr	r2, [r3, #24]
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	091b      	lsrs	r3, r3, #4
 8004982:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004986:	441a      	add	r2, r3
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699a      	ldr	r2, [r3, #24]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0210 	orr.w	r2, r2, #16
 800499a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f005 fd6c 	bl	800a47e <USB_ReadInterrupts>
 80049a6:	4603      	mov	r3, r0
 80049a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049b0:	d16e      	bne.n	8004a90 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f005 fd72 	bl	800a4a4 <USB_ReadDevAllOutEpInterrupt>
 80049c0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80049c2:	e062      	b.n	8004a8a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d057      	beq.n	8004a7e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d4:	b2d2      	uxtb	r2, r2
 80049d6:	4611      	mov	r1, r2
 80049d8:	4618      	mov	r0, r3
 80049da:	f005 fd97 	bl	800a50c <USB_ReadDevOutEPInterrupt>
 80049de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00c      	beq.n	8004a04 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f6:	461a      	mov	r2, r3
 80049f8:	2301      	movs	r3, #1
 80049fa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80049fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fdb0 	bl	8005564 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f003 0308 	and.w	r3, r3, #8
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00c      	beq.n	8004a28 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	2308      	movs	r3, #8
 8004a1e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004a20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 feaa 	bl	800577c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	f003 0310 	and.w	r3, r3, #16
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d008      	beq.n	8004a44 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3e:	461a      	mov	r2, r3
 8004a40:	2310      	movs	r3, #16
 8004a42:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d008      	beq.n	8004a60 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	2320      	movs	r3, #32
 8004a5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d009      	beq.n	8004a7e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a76:	461a      	mov	r2, r3
 8004a78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a7c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	3301      	adds	r3, #1
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a86:	085b      	lsrs	r3, r3, #1
 8004a88:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d199      	bne.n	80049c4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f005 fcf2 	bl	800a47e <USB_ReadInterrupts>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aa0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004aa4:	f040 80c0 	bne.w	8004c28 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f005 fd13 	bl	800a4d8 <USB_ReadDevAllInEpInterrupt>
 8004ab2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004ab8:	e0b2      	b.n	8004c20 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 80a7 	beq.w	8004c14 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	4611      	mov	r1, r2
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f005 fd39 	bl	800a548 <USB_ReadDevInEPInterrupt>
 8004ad6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d057      	beq.n	8004b92 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	f003 030f 	and.w	r3, r3, #15
 8004ae8:	2201      	movs	r2, #1
 8004aea:	fa02 f303 	lsl.w	r3, r2, r3
 8004aee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	43db      	mvns	r3, r3
 8004afc:	69f9      	ldr	r1, [r7, #28]
 8004afe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b02:	4013      	ands	r3, r2
 8004b04:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b12:	461a      	mov	r2, r3
 8004b14:	2301      	movs	r3, #1
 8004b16:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d132      	bne.n	8004b86 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004b20:	6879      	ldr	r1, [r7, #4]
 8004b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b24:	4613      	mov	r3, r2
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	1a9b      	subs	r3, r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	440b      	add	r3, r1
 8004b2e:	3348      	adds	r3, #72	; 0x48
 8004b30:	6819      	ldr	r1, [r3, #0]
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b36:	4613      	mov	r3, r2
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	1a9b      	subs	r3, r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4403      	add	r3, r0
 8004b40:	3344      	adds	r3, #68	; 0x44
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4419      	add	r1, r3
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	1a9b      	subs	r3, r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4403      	add	r3, r0
 8004b54:	3348      	adds	r3, #72	; 0x48
 8004b56:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d113      	bne.n	8004b86 <HAL_PCD_IRQHandler+0x31c>
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b62:	4613      	mov	r3, r2
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	1a9b      	subs	r3, r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	3350      	adds	r3, #80	; 0x50
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d108      	bne.n	8004b86 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6818      	ldr	r0, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004b7e:	461a      	mov	r2, r3
 8004b80:	2101      	movs	r1, #1
 8004b82:	f005 fd41 	bl	800a608 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f00a f972 	bl	800ee76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f003 0308 	and.w	r3, r3, #8
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d008      	beq.n	8004bae <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba8:	461a      	mov	r2, r3
 8004baa:	2308      	movs	r3, #8
 8004bac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d008      	beq.n	8004bca <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	2310      	movs	r3, #16
 8004bc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d008      	beq.n	8004be6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be0:	461a      	mov	r2, r3
 8004be2:	2340      	movs	r3, #64	; 0x40
 8004be4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d008      	beq.n	8004c02 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	2302      	movs	r3, #2
 8004c00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004c0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 fc1b 	bl	800544a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	3301      	adds	r3, #1
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1c:	085b      	lsrs	r3, r3, #1
 8004c1e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f47f af49 	bne.w	8004aba <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f005 fc26 	bl	800a47e <USB_ReadInterrupts>
 8004c32:	4603      	mov	r3, r0
 8004c34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c3c:	d122      	bne.n	8004c84 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	69fa      	ldr	r2, [r7, #28]
 8004c48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c4c:	f023 0301 	bic.w	r3, r3, #1
 8004c50:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d108      	bne.n	8004c6e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004c64:	2100      	movs	r1, #0
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fe26 	bl	80058b8 <HAL_PCDEx_LPM_Callback>
 8004c6c:	e002      	b.n	8004c74 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f00a f96e 	bl	800ef50 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695a      	ldr	r2, [r3, #20]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004c82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f005 fbf8 	bl	800a47e <USB_ReadInterrupts>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c98:	d112      	bne.n	8004cc0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d102      	bne.n	8004cb0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f00a f92a 	bl	800ef04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695a      	ldr	r2, [r3, #20]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004cbe:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f005 fbda 	bl	800a47e <USB_ReadInterrupts>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd4:	f040 80c7 	bne.w	8004e66 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	69fa      	ldr	r2, [r7, #28]
 8004ce2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ce6:	f023 0301 	bic.w	r3, r3, #1
 8004cea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2110      	movs	r1, #16
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f004 fc74 	bl	80095e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cfc:	e056      	b.n	8004dac <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d10:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d14:	015a      	lsls	r2, r3, #5
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	4413      	add	r3, r2
 8004d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d22:	0151      	lsls	r1, r2, #5
 8004d24:	69fa      	ldr	r2, [r7, #28]
 8004d26:	440a      	add	r2, r1
 8004d28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d30:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d42:	0151      	lsls	r1, r2, #5
 8004d44:	69fa      	ldr	r2, [r7, #28]
 8004d46:	440a      	add	r2, r1
 8004d48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d50:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d64:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d76:	0151      	lsls	r1, r2, #5
 8004d78:	69fa      	ldr	r2, [r7, #28]
 8004d7a:	440a      	add	r2, r1
 8004d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d84:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d96:	0151      	lsls	r1, r2, #5
 8004d98:	69fa      	ldr	r2, [r7, #28]
 8004d9a:	440a      	add	r2, r1
 8004d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004da0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004da4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da8:	3301      	adds	r3, #1
 8004daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d3a3      	bcc.n	8004cfe <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	69fa      	ldr	r2, [r7, #28]
 8004dc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dc4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004dc8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d016      	beq.n	8004e00 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ddc:	69fa      	ldr	r2, [r7, #28]
 8004dde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004de2:	f043 030b 	orr.w	r3, r3, #11
 8004de6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004df8:	f043 030b 	orr.w	r3, r3, #11
 8004dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8004dfe:	e015      	b.n	8004e2c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	69fa      	ldr	r2, [r7, #28]
 8004e0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e12:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004e16:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	69fa      	ldr	r2, [r7, #28]
 8004e22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e26:	f043 030b 	orr.w	r3, r3, #11
 8004e2a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	69fa      	ldr	r2, [r7, #28]
 8004e36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e3a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004e3e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6818      	ldr	r0, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e50:	461a      	mov	r2, r3
 8004e52:	f005 fbd9 	bl	800a608 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695a      	ldr	r2, [r3, #20]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004e64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f005 fb07 	bl	800a47e <USB_ReadInterrupts>
 8004e70:	4603      	mov	r3, r0
 8004e72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e7a:	d124      	bne.n	8004ec6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f005 fb9d 	bl	800a5c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f004 fc05 	bl	800969a <USB_GetDevSpeed>
 8004e90:	4603      	mov	r3, r0
 8004e92:	461a      	mov	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681c      	ldr	r4, [r3, #0]
 8004e9c:	f001 f956 	bl	800614c <HAL_RCC_GetHCLKFreq>
 8004ea0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f004 f924 	bl	80090f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f00a f808 	bl	800eec6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	695a      	ldr	r2, [r3, #20]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004ec4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f005 fad7 	bl	800a47e <USB_ReadInterrupts>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	f003 0308 	and.w	r3, r3, #8
 8004ed6:	2b08      	cmp	r3, #8
 8004ed8:	d10a      	bne.n	8004ef0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f009 ffe5 	bl	800eeaa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	695a      	ldr	r2, [r3, #20]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f002 0208 	and.w	r2, r2, #8
 8004eee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f005 fac2 	bl	800a47e <USB_ReadInterrupts>
 8004efa:	4603      	mov	r3, r0
 8004efc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f04:	d10f      	bne.n	8004f26 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	4619      	mov	r1, r3
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f00a f83d 	bl	800ef90 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	695a      	ldr	r2, [r3, #20]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004f24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f005 faa7 	bl	800a47e <USB_ReadInterrupts>
 8004f30:	4603      	mov	r3, r0
 8004f32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f3a:	d10f      	bne.n	8004f5c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	4619      	mov	r1, r3
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f00a f810 	bl	800ef6c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695a      	ldr	r2, [r3, #20]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004f5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f005 fa8c 	bl	800a47e <USB_ReadInterrupts>
 8004f66:	4603      	mov	r3, r0
 8004f68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f70:	d10a      	bne.n	8004f88 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f00a f81e 	bl	800efb4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	695a      	ldr	r2, [r3, #20]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004f86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f005 fa76 	bl	800a47e <USB_ReadInterrupts>
 8004f92:	4603      	mov	r3, r0
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d115      	bne.n	8004fc8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	f003 0304 	and.w	r3, r3, #4
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d002      	beq.n	8004fb4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f00a f80e 	bl	800efd0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6859      	ldr	r1, [r3, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	605a      	str	r2, [r3, #4]
 8004fc4:	e000      	b.n	8004fc8 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004fc6:	bf00      	nop
    }
  }
}
 8004fc8:	3734      	adds	r7, #52	; 0x34
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd90      	pop	{r4, r7, pc}

08004fce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b082      	sub	sp, #8
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d101      	bne.n	8004fe8 <HAL_PCD_SetAddress+0x1a>
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	e013      	b.n	8005010 <HAL_PCD_SetAddress+0x42>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	78fa      	ldrb	r2, [r7, #3]
 8004ff4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	78fa      	ldrb	r2, [r7, #3]
 8004ffe:	4611      	mov	r1, r2
 8005000:	4618      	mov	r0, r3
 8005002:	f005 f9d4 	bl	800a3ae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	4608      	mov	r0, r1
 8005022:	4611      	mov	r1, r2
 8005024:	461a      	mov	r2, r3
 8005026:	4603      	mov	r3, r0
 8005028:	70fb      	strb	r3, [r7, #3]
 800502a:	460b      	mov	r3, r1
 800502c:	803b      	strh	r3, [r7, #0]
 800502e:	4613      	mov	r3, r2
 8005030:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005036:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800503a:	2b00      	cmp	r3, #0
 800503c:	da0f      	bge.n	800505e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800503e:	78fb      	ldrb	r3, [r7, #3]
 8005040:	f003 020f 	and.w	r2, r3, #15
 8005044:	4613      	mov	r3, r2
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	1a9b      	subs	r3, r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	3338      	adds	r3, #56	; 0x38
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	4413      	add	r3, r2
 8005052:	3304      	adds	r3, #4
 8005054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2201      	movs	r2, #1
 800505a:	705a      	strb	r2, [r3, #1]
 800505c:	e00f      	b.n	800507e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800505e:	78fb      	ldrb	r3, [r7, #3]
 8005060:	f003 020f 	and.w	r2, r3, #15
 8005064:	4613      	mov	r3, r2
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	1a9b      	subs	r3, r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	4413      	add	r3, r2
 8005074:	3304      	adds	r3, #4
 8005076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800507e:	78fb      	ldrb	r3, [r7, #3]
 8005080:	f003 030f 	and.w	r3, r3, #15
 8005084:	b2da      	uxtb	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800508a:	883a      	ldrh	r2, [r7, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	78ba      	ldrb	r2, [r7, #2]
 8005094:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	785b      	ldrb	r3, [r3, #1]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d004      	beq.n	80050a8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80050a8:	78bb      	ldrb	r3, [r7, #2]
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d102      	bne.n	80050b4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d101      	bne.n	80050c2 <HAL_PCD_EP_Open+0xaa>
 80050be:	2302      	movs	r3, #2
 80050c0:	e00e      	b.n	80050e0 <HAL_PCD_EP_Open+0xc8>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68f9      	ldr	r1, [r7, #12]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f004 fb07 	bl	80096e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80050de:	7afb      	ldrb	r3, [r7, #11]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	460b      	mov	r3, r1
 80050f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80050f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	da0f      	bge.n	800511c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050fc:	78fb      	ldrb	r3, [r7, #3]
 80050fe:	f003 020f 	and.w	r2, r3, #15
 8005102:	4613      	mov	r3, r2
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	1a9b      	subs	r3, r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	3338      	adds	r3, #56	; 0x38
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	4413      	add	r3, r2
 8005110:	3304      	adds	r3, #4
 8005112:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2201      	movs	r2, #1
 8005118:	705a      	strb	r2, [r3, #1]
 800511a:	e00f      	b.n	800513c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800511c:	78fb      	ldrb	r3, [r7, #3]
 800511e:	f003 020f 	and.w	r2, r3, #15
 8005122:	4613      	mov	r3, r2
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	1a9b      	subs	r3, r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	4413      	add	r3, r2
 8005132:	3304      	adds	r3, #4
 8005134:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800513c:	78fb      	ldrb	r3, [r7, #3]
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	b2da      	uxtb	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800514e:	2b01      	cmp	r3, #1
 8005150:	d101      	bne.n	8005156 <HAL_PCD_EP_Close+0x6e>
 8005152:	2302      	movs	r3, #2
 8005154:	e00e      	b.n	8005174 <HAL_PCD_EP_Close+0x8c>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68f9      	ldr	r1, [r7, #12]
 8005164:	4618      	mov	r0, r3
 8005166:	f004 fb45 	bl	80097f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	607a      	str	r2, [r7, #4]
 8005186:	603b      	str	r3, [r7, #0]
 8005188:	460b      	mov	r3, r1
 800518a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800518c:	7afb      	ldrb	r3, [r7, #11]
 800518e:	f003 020f 	and.w	r2, r3, #15
 8005192:	4613      	mov	r3, r2
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	1a9b      	subs	r3, r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	4413      	add	r3, r2
 80051a2:	3304      	adds	r3, #4
 80051a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2200      	movs	r2, #0
 80051b6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2200      	movs	r2, #0
 80051bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051be:	7afb      	ldrb	r3, [r7, #11]
 80051c0:	f003 030f 	and.w	r3, r3, #15
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d102      	bne.n	80051d8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80051d8:	7afb      	ldrb	r3, [r7, #11]
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d109      	bne.n	80051f6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	461a      	mov	r2, r3
 80051ee:	6979      	ldr	r1, [r7, #20]
 80051f0:	f004 fe20 	bl	8009e34 <USB_EP0StartXfer>
 80051f4:	e008      	b.n	8005208 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6818      	ldr	r0, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	461a      	mov	r2, r3
 8005202:	6979      	ldr	r1, [r7, #20]
 8005204:	f004 fbd2 	bl	80099ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3718      	adds	r7, #24
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	460b      	mov	r3, r1
 800521c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800521e:	78fb      	ldrb	r3, [r7, #3]
 8005220:	f003 020f 	and.w	r2, r3, #15
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	1a9b      	subs	r3, r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005234:	681b      	ldr	r3, [r3, #0]
}
 8005236:	4618      	mov	r0, r3
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b086      	sub	sp, #24
 8005246:	af00      	add	r7, sp, #0
 8005248:	60f8      	str	r0, [r7, #12]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	603b      	str	r3, [r7, #0]
 800524e:	460b      	mov	r3, r1
 8005250:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005252:	7afb      	ldrb	r3, [r7, #11]
 8005254:	f003 020f 	and.w	r2, r3, #15
 8005258:	4613      	mov	r3, r2
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	1a9b      	subs	r3, r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	3338      	adds	r3, #56	; 0x38
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	3304      	adds	r3, #4
 8005268:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2200      	movs	r2, #0
 800527a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	2201      	movs	r2, #1
 8005280:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005282:	7afb      	ldrb	r3, [r7, #11]
 8005284:	f003 030f 	and.w	r3, r3, #15
 8005288:	b2da      	uxtb	r2, r3
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d102      	bne.n	800529c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800529c:	7afb      	ldrb	r3, [r7, #11]
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d109      	bne.n	80052ba <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6818      	ldr	r0, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	461a      	mov	r2, r3
 80052b2:	6979      	ldr	r1, [r7, #20]
 80052b4:	f004 fdbe 	bl	8009e34 <USB_EP0StartXfer>
 80052b8:	e008      	b.n	80052cc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6818      	ldr	r0, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	461a      	mov	r2, r3
 80052c6:	6979      	ldr	r1, [r7, #20]
 80052c8:	f004 fb70 	bl	80099ac <USB_EPStartXfer>
  }

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	460b      	mov	r3, r1
 80052e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80052e2:	78fb      	ldrb	r3, [r7, #3]
 80052e4:	f003 020f 	and.w	r2, r3, #15
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d901      	bls.n	80052f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e050      	b.n	8005396 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	da0f      	bge.n	800531c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052fc:	78fb      	ldrb	r3, [r7, #3]
 80052fe:	f003 020f 	and.w	r2, r3, #15
 8005302:	4613      	mov	r3, r2
 8005304:	00db      	lsls	r3, r3, #3
 8005306:	1a9b      	subs	r3, r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	3338      	adds	r3, #56	; 0x38
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	4413      	add	r3, r2
 8005310:	3304      	adds	r3, #4
 8005312:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2201      	movs	r2, #1
 8005318:	705a      	strb	r2, [r3, #1]
 800531a:	e00d      	b.n	8005338 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800531c:	78fa      	ldrb	r2, [r7, #3]
 800531e:	4613      	mov	r3, r2
 8005320:	00db      	lsls	r3, r3, #3
 8005322:	1a9b      	subs	r3, r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	4413      	add	r3, r2
 800532e:	3304      	adds	r3, #4
 8005330:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2201      	movs	r2, #1
 800533c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800533e:	78fb      	ldrb	r3, [r7, #3]
 8005340:	f003 030f 	and.w	r3, r3, #15
 8005344:	b2da      	uxtb	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005350:	2b01      	cmp	r3, #1
 8005352:	d101      	bne.n	8005358 <HAL_PCD_EP_SetStall+0x82>
 8005354:	2302      	movs	r3, #2
 8005356:	e01e      	b.n	8005396 <HAL_PCD_EP_SetStall+0xc0>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68f9      	ldr	r1, [r7, #12]
 8005366:	4618      	mov	r0, r3
 8005368:	f004 ff4d 	bl	800a206 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800536c:	78fb      	ldrb	r3, [r7, #3]
 800536e:	f003 030f 	and.w	r3, r3, #15
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10a      	bne.n	800538c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6818      	ldr	r0, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	b2d9      	uxtb	r1, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005386:	461a      	mov	r2, r3
 8005388:	f005 f93e 	bl	800a608 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b084      	sub	sp, #16
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	460b      	mov	r3, r1
 80053a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80053aa:	78fb      	ldrb	r3, [r7, #3]
 80053ac:	f003 020f 	and.w	r2, r3, #15
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d901      	bls.n	80053bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e042      	b.n	8005442 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	da0f      	bge.n	80053e4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053c4:	78fb      	ldrb	r3, [r7, #3]
 80053c6:	f003 020f 	and.w	r2, r3, #15
 80053ca:	4613      	mov	r3, r2
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	1a9b      	subs	r3, r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	3338      	adds	r3, #56	; 0x38
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	4413      	add	r3, r2
 80053d8:	3304      	adds	r3, #4
 80053da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2201      	movs	r2, #1
 80053e0:	705a      	strb	r2, [r3, #1]
 80053e2:	e00f      	b.n	8005404 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053e4:	78fb      	ldrb	r3, [r7, #3]
 80053e6:	f003 020f 	and.w	r2, r3, #15
 80053ea:	4613      	mov	r3, r2
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	4413      	add	r3, r2
 80053fa:	3304      	adds	r3, #4
 80053fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800540a:	78fb      	ldrb	r3, [r7, #3]
 800540c:	f003 030f 	and.w	r3, r3, #15
 8005410:	b2da      	uxtb	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_PCD_EP_ClrStall+0x86>
 8005420:	2302      	movs	r3, #2
 8005422:	e00e      	b.n	8005442 <HAL_PCD_EP_ClrStall+0xa4>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68f9      	ldr	r1, [r7, #12]
 8005432:	4618      	mov	r0, r3
 8005434:	f004 ff55 	bl	800a2e2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b08a      	sub	sp, #40	; 0x28
 800544e:	af02      	add	r7, sp, #8
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	4613      	mov	r3, r2
 8005462:	00db      	lsls	r3, r3, #3
 8005464:	1a9b      	subs	r3, r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	3338      	adds	r3, #56	; 0x38
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	4413      	add	r3, r2
 800546e:	3304      	adds	r3, #4
 8005470:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	699a      	ldr	r2, [r3, #24]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	429a      	cmp	r2, r3
 800547c:	d901      	bls.n	8005482 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e06c      	b.n	800555c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	695a      	ldr	r2, [r3, #20]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	69fa      	ldr	r2, [r7, #28]
 8005494:	429a      	cmp	r2, r3
 8005496:	d902      	bls.n	800549e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	3303      	adds	r3, #3
 80054a2:	089b      	lsrs	r3, r3, #2
 80054a4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80054a6:	e02b      	b.n	8005500 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	695a      	ldr	r2, [r3, #20]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	69fa      	ldr	r2, [r7, #28]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d902      	bls.n	80054c4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	3303      	adds	r3, #3
 80054c8:	089b      	lsrs	r3, r3, #2
 80054ca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	68d9      	ldr	r1, [r3, #12]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	4603      	mov	r3, r0
 80054e2:	6978      	ldr	r0, [r7, #20]
 80054e4:	f004 fdf9 	bl	800a0da <USB_WritePacket>

    ep->xfer_buff  += len;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	441a      	add	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	699a      	ldr	r2, [r3, #24]
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	441a      	add	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	b29b      	uxth	r3, r3
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	429a      	cmp	r2, r3
 8005514:	d809      	bhi.n	800552a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	699a      	ldr	r2, [r3, #24]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800551e:	429a      	cmp	r2, r3
 8005520:	d203      	bcs.n	800552a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1be      	bne.n	80054a8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	695a      	ldr	r2, [r3, #20]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	429a      	cmp	r2, r3
 8005534:	d811      	bhi.n	800555a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	f003 030f 	and.w	r3, r3, #15
 800553c:	2201      	movs	r2, #1
 800553e:	fa02 f303 	lsl.w	r3, r2, r3
 8005542:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	43db      	mvns	r3, r3
 8005550:	6939      	ldr	r1, [r7, #16]
 8005552:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005556:	4013      	ands	r3, r2
 8005558:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3720      	adds	r7, #32
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	333c      	adds	r3, #60	; 0x3c
 800557c:	3304      	adds	r3, #4
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	2b01      	cmp	r3, #1
 8005598:	f040 80a0 	bne.w	80056dc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d015      	beq.n	80055d2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4a72      	ldr	r2, [pc, #456]	; (8005774 <PCD_EP_OutXfrComplete_int+0x210>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	f240 80dd 	bls.w	800576a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 80d7 	beq.w	800576a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c8:	461a      	mov	r2, r3
 80055ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ce:	6093      	str	r3, [r2, #8]
 80055d0:	e0cb      	b.n	800576a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f003 0320 	and.w	r3, r3, #32
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d009      	beq.n	80055f0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e8:	461a      	mov	r2, r3
 80055ea:	2320      	movs	r3, #32
 80055ec:	6093      	str	r3, [r2, #8]
 80055ee:	e0bc      	b.n	800576a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f040 80b7 	bne.w	800576a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4a5d      	ldr	r2, [pc, #372]	; (8005774 <PCD_EP_OutXfrComplete_int+0x210>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d90f      	bls.n	8005624 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561a:	461a      	mov	r2, r3
 800561c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005620:	6093      	str	r3, [r2, #8]
 8005622:	e0a2      	b.n	800576a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	4613      	mov	r3, r2
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	1a9b      	subs	r3, r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	440b      	add	r3, r1
 8005632:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005636:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	0159      	lsls	r1, r3, #5
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	440b      	add	r3, r1
 8005640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800564a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	4613      	mov	r3, r2
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	1a9b      	subs	r3, r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4403      	add	r3, r0
 800565a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800565e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005660:	6879      	ldr	r1, [r7, #4]
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	4613      	mov	r3, r2
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	1a9b      	subs	r3, r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	440b      	add	r3, r1
 800566e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005672:	6819      	ldr	r1, [r3, #0]
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	4613      	mov	r3, r2
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	1a9b      	subs	r3, r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4403      	add	r3, r0
 8005682:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4419      	add	r1, r3
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	4613      	mov	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	1a9b      	subs	r3, r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4403      	add	r3, r0
 8005698:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800569c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d114      	bne.n	80056ce <PCD_EP_OutXfrComplete_int+0x16a>
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	4613      	mov	r3, r2
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	1a9b      	subs	r3, r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d108      	bne.n	80056ce <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6818      	ldr	r0, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80056c6:	461a      	mov	r2, r3
 80056c8:	2101      	movs	r1, #1
 80056ca:	f004 ff9d 	bl	800a608 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	4619      	mov	r1, r3
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f009 fbb3 	bl	800ee40 <HAL_PCD_DataOutStageCallback>
 80056da:	e046      	b.n	800576a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4a26      	ldr	r2, [pc, #152]	; (8005778 <PCD_EP_OutXfrComplete_int+0x214>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d124      	bne.n	800572e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00a      	beq.n	8005704 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fa:	461a      	mov	r2, r3
 80056fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005700:	6093      	str	r3, [r2, #8]
 8005702:	e032      	b.n	800576a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	f003 0320 	and.w	r3, r3, #32
 800570a:	2b00      	cmp	r3, #0
 800570c:	d008      	beq.n	8005720 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571a:	461a      	mov	r2, r3
 800571c:	2320      	movs	r3, #32
 800571e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	b2db      	uxtb	r3, r3
 8005724:	4619      	mov	r1, r3
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f009 fb8a 	bl	800ee40 <HAL_PCD_DataOutStageCallback>
 800572c:	e01d      	b.n	800576a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d114      	bne.n	800575e <PCD_EP_OutXfrComplete_int+0x1fa>
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	4613      	mov	r3, r2
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	1a9b      	subs	r3, r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	440b      	add	r3, r1
 8005742:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d108      	bne.n	800575e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6818      	ldr	r0, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005756:	461a      	mov	r2, r3
 8005758:	2100      	movs	r1, #0
 800575a:	f004 ff55 	bl	800a608 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	b2db      	uxtb	r3, r3
 8005762:	4619      	mov	r1, r3
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f009 fb6b 	bl	800ee40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3718      	adds	r7, #24
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	4f54300a 	.word	0x4f54300a
 8005778:	4f54310a 	.word	0x4f54310a

0800577c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	333c      	adds	r3, #60	; 0x3c
 8005794:	3304      	adds	r3, #4
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	4a15      	ldr	r2, [pc, #84]	; (8005804 <PCD_EP_OutSetupPacket_int+0x88>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d90e      	bls.n	80057d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d009      	beq.n	80057d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c8:	461a      	mov	r2, r3
 80057ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f009 fb23 	bl	800ee1c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4a0a      	ldr	r2, [pc, #40]	; (8005804 <PCD_EP_OutSetupPacket_int+0x88>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d90c      	bls.n	80057f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d108      	bne.n	80057f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6818      	ldr	r0, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80057f0:	461a      	mov	r2, r3
 80057f2:	2101      	movs	r1, #1
 80057f4:	f004 ff08 	bl	800a608 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	4f54300a 	.word	0x4f54300a

08005808 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	460b      	mov	r3, r1
 8005812:	70fb      	strb	r3, [r7, #3]
 8005814:	4613      	mov	r3, r2
 8005816:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005820:	78fb      	ldrb	r3, [r7, #3]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d107      	bne.n	8005836 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005826:	883b      	ldrh	r3, [r7, #0]
 8005828:	0419      	lsls	r1, r3, #16
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	430a      	orrs	r2, r1
 8005832:	629a      	str	r2, [r3, #40]	; 0x28
 8005834:	e028      	b.n	8005888 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583c:	0c1b      	lsrs	r3, r3, #16
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	4413      	add	r3, r2
 8005842:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005844:	2300      	movs	r3, #0
 8005846:	73fb      	strb	r3, [r7, #15]
 8005848:	e00d      	b.n	8005866 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	7bfb      	ldrb	r3, [r7, #15]
 8005850:	3340      	adds	r3, #64	; 0x40
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	0c1b      	lsrs	r3, r3, #16
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	4413      	add	r3, r2
 800585e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	3301      	adds	r3, #1
 8005864:	73fb      	strb	r3, [r7, #15]
 8005866:	7bfa      	ldrb	r2, [r7, #15]
 8005868:	78fb      	ldrb	r3, [r7, #3]
 800586a:	3b01      	subs	r3, #1
 800586c:	429a      	cmp	r2, r3
 800586e:	d3ec      	bcc.n	800584a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005870:	883b      	ldrh	r3, [r7, #0]
 8005872:	0418      	lsls	r0, r3, #16
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6819      	ldr	r1, [r3, #0]
 8005878:	78fb      	ldrb	r3, [r7, #3]
 800587a:	3b01      	subs	r3, #1
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	4302      	orrs	r2, r0
 8005880:	3340      	adds	r3, #64	; 0x40
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	440b      	add	r3, r1
 8005886:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005896:	b480      	push	{r7}
 8005898:	b083      	sub	sp, #12
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	460b      	mov	r3, r1
 80058a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	887a      	ldrh	r2, [r7, #2]
 80058a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	460b      	mov	r3, r1
 80058c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e264      	b.n	8005dac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d075      	beq.n	80059da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058ee:	4ba3      	ldr	r3, [pc, #652]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f003 030c 	and.w	r3, r3, #12
 80058f6:	2b04      	cmp	r3, #4
 80058f8:	d00c      	beq.n	8005914 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058fa:	4ba0      	ldr	r3, [pc, #640]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005902:	2b08      	cmp	r3, #8
 8005904:	d112      	bne.n	800592c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005906:	4b9d      	ldr	r3, [pc, #628]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800590e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005912:	d10b      	bne.n	800592c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005914:	4b99      	ldr	r3, [pc, #612]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d05b      	beq.n	80059d8 <HAL_RCC_OscConfig+0x108>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d157      	bne.n	80059d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e23f      	b.n	8005dac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005934:	d106      	bne.n	8005944 <HAL_RCC_OscConfig+0x74>
 8005936:	4b91      	ldr	r3, [pc, #580]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a90      	ldr	r2, [pc, #576]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 800593c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005940:	6013      	str	r3, [r2, #0]
 8005942:	e01d      	b.n	8005980 <HAL_RCC_OscConfig+0xb0>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800594c:	d10c      	bne.n	8005968 <HAL_RCC_OscConfig+0x98>
 800594e:	4b8b      	ldr	r3, [pc, #556]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a8a      	ldr	r2, [pc, #552]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 8005954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005958:	6013      	str	r3, [r2, #0]
 800595a:	4b88      	ldr	r3, [pc, #544]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a87      	ldr	r2, [pc, #540]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 8005960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005964:	6013      	str	r3, [r2, #0]
 8005966:	e00b      	b.n	8005980 <HAL_RCC_OscConfig+0xb0>
 8005968:	4b84      	ldr	r3, [pc, #528]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a83      	ldr	r2, [pc, #524]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 800596e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005972:	6013      	str	r3, [r2, #0]
 8005974:	4b81      	ldr	r3, [pc, #516]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a80      	ldr	r2, [pc, #512]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 800597a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800597e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d013      	beq.n	80059b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005988:	f7fc fff4 	bl	8002974 <HAL_GetTick>
 800598c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800598e:	e008      	b.n	80059a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005990:	f7fc fff0 	bl	8002974 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b64      	cmp	r3, #100	; 0x64
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e204      	b.n	8005dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059a2:	4b76      	ldr	r3, [pc, #472]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d0f0      	beq.n	8005990 <HAL_RCC_OscConfig+0xc0>
 80059ae:	e014      	b.n	80059da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b0:	f7fc ffe0 	bl	8002974 <HAL_GetTick>
 80059b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059b6:	e008      	b.n	80059ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059b8:	f7fc ffdc 	bl	8002974 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b64      	cmp	r3, #100	; 0x64
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e1f0      	b.n	8005dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ca:	4b6c      	ldr	r3, [pc, #432]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1f0      	bne.n	80059b8 <HAL_RCC_OscConfig+0xe8>
 80059d6:	e000      	b.n	80059da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d063      	beq.n	8005aae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059e6:	4b65      	ldr	r3, [pc, #404]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 030c 	and.w	r3, r3, #12
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00b      	beq.n	8005a0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059f2:	4b62      	ldr	r3, [pc, #392]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059fa:	2b08      	cmp	r3, #8
 80059fc:	d11c      	bne.n	8005a38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059fe:	4b5f      	ldr	r3, [pc, #380]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d116      	bne.n	8005a38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a0a:	4b5c      	ldr	r3, [pc, #368]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d005      	beq.n	8005a22 <HAL_RCC_OscConfig+0x152>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d001      	beq.n	8005a22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e1c4      	b.n	8005dac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a22:	4b56      	ldr	r3, [pc, #344]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	4952      	ldr	r1, [pc, #328]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a36:	e03a      	b.n	8005aae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d020      	beq.n	8005a82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a40:	4b4f      	ldr	r3, [pc, #316]	; (8005b80 <HAL_RCC_OscConfig+0x2b0>)
 8005a42:	2201      	movs	r2, #1
 8005a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a46:	f7fc ff95 	bl	8002974 <HAL_GetTick>
 8005a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a4e:	f7fc ff91 	bl	8002974 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e1a5      	b.n	8005dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a60:	4b46      	ldr	r3, [pc, #280]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0302 	and.w	r3, r3, #2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d0f0      	beq.n	8005a4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a6c:	4b43      	ldr	r3, [pc, #268]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	4940      	ldr	r1, [pc, #256]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	600b      	str	r3, [r1, #0]
 8005a80:	e015      	b.n	8005aae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a82:	4b3f      	ldr	r3, [pc, #252]	; (8005b80 <HAL_RCC_OscConfig+0x2b0>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a88:	f7fc ff74 	bl	8002974 <HAL_GetTick>
 8005a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a8e:	e008      	b.n	8005aa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a90:	f7fc ff70 	bl	8002974 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e184      	b.n	8005dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aa2:	4b36      	ldr	r3, [pc, #216]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1f0      	bne.n	8005a90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0308 	and.w	r3, r3, #8
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d030      	beq.n	8005b1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d016      	beq.n	8005af0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ac2:	4b30      	ldr	r3, [pc, #192]	; (8005b84 <HAL_RCC_OscConfig+0x2b4>)
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac8:	f7fc ff54 	bl	8002974 <HAL_GetTick>
 8005acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ad0:	f7fc ff50 	bl	8002974 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e164      	b.n	8005dac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ae2:	4b26      	ldr	r3, [pc, #152]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 8005ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d0f0      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x200>
 8005aee:	e015      	b.n	8005b1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005af0:	4b24      	ldr	r3, [pc, #144]	; (8005b84 <HAL_RCC_OscConfig+0x2b4>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005af6:	f7fc ff3d 	bl	8002974 <HAL_GetTick>
 8005afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005afc:	e008      	b.n	8005b10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005afe:	f7fc ff39 	bl	8002974 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d901      	bls.n	8005b10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e14d      	b.n	8005dac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b10:	4b1a      	ldr	r3, [pc, #104]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 8005b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b14:	f003 0302 	and.w	r3, r3, #2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1f0      	bne.n	8005afe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 80a0 	beq.w	8005c6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b2e:	4b13      	ldr	r3, [pc, #76]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10f      	bne.n	8005b5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60bb      	str	r3, [r7, #8]
 8005b3e:	4b0f      	ldr	r3, [pc, #60]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	4a0e      	ldr	r2, [pc, #56]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 8005b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b48:	6413      	str	r3, [r2, #64]	; 0x40
 8005b4a:	4b0c      	ldr	r3, [pc, #48]	; (8005b7c <HAL_RCC_OscConfig+0x2ac>)
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b52:	60bb      	str	r3, [r7, #8]
 8005b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b56:	2301      	movs	r3, #1
 8005b58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b5a:	4b0b      	ldr	r3, [pc, #44]	; (8005b88 <HAL_RCC_OscConfig+0x2b8>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d121      	bne.n	8005baa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b66:	4b08      	ldr	r3, [pc, #32]	; (8005b88 <HAL_RCC_OscConfig+0x2b8>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a07      	ldr	r2, [pc, #28]	; (8005b88 <HAL_RCC_OscConfig+0x2b8>)
 8005b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b72:	f7fc feff 	bl	8002974 <HAL_GetTick>
 8005b76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b78:	e011      	b.n	8005b9e <HAL_RCC_OscConfig+0x2ce>
 8005b7a:	bf00      	nop
 8005b7c:	40023800 	.word	0x40023800
 8005b80:	42470000 	.word	0x42470000
 8005b84:	42470e80 	.word	0x42470e80
 8005b88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b8c:	f7fc fef2 	bl	8002974 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e106      	b.n	8005dac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b9e:	4b85      	ldr	r3, [pc, #532]	; (8005db4 <HAL_RCC_OscConfig+0x4e4>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0f0      	beq.n	8005b8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d106      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x2f0>
 8005bb2:	4b81      	ldr	r3, [pc, #516]	; (8005db8 <HAL_RCC_OscConfig+0x4e8>)
 8005bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb6:	4a80      	ldr	r2, [pc, #512]	; (8005db8 <HAL_RCC_OscConfig+0x4e8>)
 8005bb8:	f043 0301 	orr.w	r3, r3, #1
 8005bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8005bbe:	e01c      	b.n	8005bfa <HAL_RCC_OscConfig+0x32a>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	2b05      	cmp	r3, #5
 8005bc6:	d10c      	bne.n	8005be2 <HAL_RCC_OscConfig+0x312>
 8005bc8:	4b7b      	ldr	r3, [pc, #492]	; (8005db8 <HAL_RCC_OscConfig+0x4e8>)
 8005bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bcc:	4a7a      	ldr	r2, [pc, #488]	; (8005db8 <HAL_RCC_OscConfig+0x4e8>)
 8005bce:	f043 0304 	orr.w	r3, r3, #4
 8005bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8005bd4:	4b78      	ldr	r3, [pc, #480]	; (8005db8 <HAL_RCC_OscConfig+0x4e8>)
 8005bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd8:	4a77      	ldr	r2, [pc, #476]	; (8005db8 <HAL_RCC_OscConfig+0x4e8>)
 8005bda:	f043 0301 	orr.w	r3, r3, #1
 8005bde:	6713      	str	r3, [r2, #112]	; 0x70
 8005be0:	e00b      	b.n	8005bfa <HAL_RCC_OscConfig+0x32a>
 8005be2:	4b75      	ldr	r3, [pc, #468]	; (8005db8 <HAL_RCC_OscConfig+0x4e8>)
 8005be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be6:	4a74      	ldr	r2, [pc, #464]	; (8005db8 <HAL_RCC_OscConfig+0x4e8>)
 8005be8:	f023 0301 	bic.w	r3, r3, #1
 8005bec:	6713      	str	r3, [r2, #112]	; 0x70
 8005bee:	4b72      	ldr	r3, [pc, #456]	; (8005db8 <HAL_RCC_OscConfig+0x4e8>)
 8005bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf2:	4a71      	ldr	r2, [pc, #452]	; (8005db8 <HAL_RCC_OscConfig+0x4e8>)
 8005bf4:	f023 0304 	bic.w	r3, r3, #4
 8005bf8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d015      	beq.n	8005c2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c02:	f7fc feb7 	bl	8002974 <HAL_GetTick>
 8005c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c08:	e00a      	b.n	8005c20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c0a:	f7fc feb3 	bl	8002974 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e0c5      	b.n	8005dac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c20:	4b65      	ldr	r3, [pc, #404]	; (8005db8 <HAL_RCC_OscConfig+0x4e8>)
 8005c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d0ee      	beq.n	8005c0a <HAL_RCC_OscConfig+0x33a>
 8005c2c:	e014      	b.n	8005c58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c2e:	f7fc fea1 	bl	8002974 <HAL_GetTick>
 8005c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c34:	e00a      	b.n	8005c4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c36:	f7fc fe9d 	bl	8002974 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e0af      	b.n	8005dac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c4c:	4b5a      	ldr	r3, [pc, #360]	; (8005db8 <HAL_RCC_OscConfig+0x4e8>)
 8005c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1ee      	bne.n	8005c36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c58:	7dfb      	ldrb	r3, [r7, #23]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d105      	bne.n	8005c6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c5e:	4b56      	ldr	r3, [pc, #344]	; (8005db8 <HAL_RCC_OscConfig+0x4e8>)
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	4a55      	ldr	r2, [pc, #340]	; (8005db8 <HAL_RCC_OscConfig+0x4e8>)
 8005c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 809b 	beq.w	8005daa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c74:	4b50      	ldr	r3, [pc, #320]	; (8005db8 <HAL_RCC_OscConfig+0x4e8>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f003 030c 	and.w	r3, r3, #12
 8005c7c:	2b08      	cmp	r3, #8
 8005c7e:	d05c      	beq.n	8005d3a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d141      	bne.n	8005d0c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c88:	4b4c      	ldr	r3, [pc, #304]	; (8005dbc <HAL_RCC_OscConfig+0x4ec>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c8e:	f7fc fe71 	bl	8002974 <HAL_GetTick>
 8005c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c94:	e008      	b.n	8005ca8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c96:	f7fc fe6d 	bl	8002974 <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d901      	bls.n	8005ca8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e081      	b.n	8005dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ca8:	4b43      	ldr	r3, [pc, #268]	; (8005db8 <HAL_RCC_OscConfig+0x4e8>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1f0      	bne.n	8005c96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	69da      	ldr	r2, [r3, #28]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	019b      	lsls	r3, r3, #6
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cca:	085b      	lsrs	r3, r3, #1
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	041b      	lsls	r3, r3, #16
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd6:	061b      	lsls	r3, r3, #24
 8005cd8:	4937      	ldr	r1, [pc, #220]	; (8005db8 <HAL_RCC_OscConfig+0x4e8>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cde:	4b37      	ldr	r3, [pc, #220]	; (8005dbc <HAL_RCC_OscConfig+0x4ec>)
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ce4:	f7fc fe46 	bl	8002974 <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cec:	f7fc fe42 	bl	8002974 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e056      	b.n	8005dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cfe:	4b2e      	ldr	r3, [pc, #184]	; (8005db8 <HAL_RCC_OscConfig+0x4e8>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0f0      	beq.n	8005cec <HAL_RCC_OscConfig+0x41c>
 8005d0a:	e04e      	b.n	8005daa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d0c:	4b2b      	ldr	r3, [pc, #172]	; (8005dbc <HAL_RCC_OscConfig+0x4ec>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d12:	f7fc fe2f 	bl	8002974 <HAL_GetTick>
 8005d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d18:	e008      	b.n	8005d2c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d1a:	f7fc fe2b 	bl	8002974 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e03f      	b.n	8005dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d2c:	4b22      	ldr	r3, [pc, #136]	; (8005db8 <HAL_RCC_OscConfig+0x4e8>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1f0      	bne.n	8005d1a <HAL_RCC_OscConfig+0x44a>
 8005d38:	e037      	b.n	8005daa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d101      	bne.n	8005d46 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e032      	b.n	8005dac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d46:	4b1c      	ldr	r3, [pc, #112]	; (8005db8 <HAL_RCC_OscConfig+0x4e8>)
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d028      	beq.n	8005da6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d121      	bne.n	8005da6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d11a      	bne.n	8005da6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d76:	4013      	ands	r3, r2
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d7c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d111      	bne.n	8005da6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8c:	085b      	lsrs	r3, r3, #1
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d107      	bne.n	8005da6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d001      	beq.n	8005daa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e000      	b.n	8005dac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3718      	adds	r7, #24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	40007000 	.word	0x40007000
 8005db8:	40023800 	.word	0x40023800
 8005dbc:	42470060 	.word	0x42470060

08005dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d101      	bne.n	8005dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e0cc      	b.n	8005f6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005dd4:	4b68      	ldr	r3, [pc, #416]	; (8005f78 <HAL_RCC_ClockConfig+0x1b8>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0307 	and.w	r3, r3, #7
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d90c      	bls.n	8005dfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005de2:	4b65      	ldr	r3, [pc, #404]	; (8005f78 <HAL_RCC_ClockConfig+0x1b8>)
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dea:	4b63      	ldr	r3, [pc, #396]	; (8005f78 <HAL_RCC_ClockConfig+0x1b8>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d001      	beq.n	8005dfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e0b8      	b.n	8005f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d020      	beq.n	8005e4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d005      	beq.n	8005e20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e14:	4b59      	ldr	r3, [pc, #356]	; (8005f7c <HAL_RCC_ClockConfig+0x1bc>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	4a58      	ldr	r2, [pc, #352]	; (8005f7c <HAL_RCC_ClockConfig+0x1bc>)
 8005e1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0308 	and.w	r3, r3, #8
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d005      	beq.n	8005e38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e2c:	4b53      	ldr	r3, [pc, #332]	; (8005f7c <HAL_RCC_ClockConfig+0x1bc>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	4a52      	ldr	r2, [pc, #328]	; (8005f7c <HAL_RCC_ClockConfig+0x1bc>)
 8005e32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e38:	4b50      	ldr	r3, [pc, #320]	; (8005f7c <HAL_RCC_ClockConfig+0x1bc>)
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	494d      	ldr	r1, [pc, #308]	; (8005f7c <HAL_RCC_ClockConfig+0x1bc>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d044      	beq.n	8005ee0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d107      	bne.n	8005e6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e5e:	4b47      	ldr	r3, [pc, #284]	; (8005f7c <HAL_RCC_ClockConfig+0x1bc>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d119      	bne.n	8005e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e07f      	b.n	8005f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d003      	beq.n	8005e7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e7a:	2b03      	cmp	r3, #3
 8005e7c:	d107      	bne.n	8005e8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e7e:	4b3f      	ldr	r3, [pc, #252]	; (8005f7c <HAL_RCC_ClockConfig+0x1bc>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d109      	bne.n	8005e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e06f      	b.n	8005f6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e8e:	4b3b      	ldr	r3, [pc, #236]	; (8005f7c <HAL_RCC_ClockConfig+0x1bc>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e067      	b.n	8005f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e9e:	4b37      	ldr	r3, [pc, #220]	; (8005f7c <HAL_RCC_ClockConfig+0x1bc>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f023 0203 	bic.w	r2, r3, #3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	4934      	ldr	r1, [pc, #208]	; (8005f7c <HAL_RCC_ClockConfig+0x1bc>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005eb0:	f7fc fd60 	bl	8002974 <HAL_GetTick>
 8005eb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eb6:	e00a      	b.n	8005ece <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eb8:	f7fc fd5c 	bl	8002974 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d901      	bls.n	8005ece <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e04f      	b.n	8005f6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ece:	4b2b      	ldr	r3, [pc, #172]	; (8005f7c <HAL_RCC_ClockConfig+0x1bc>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f003 020c 	and.w	r2, r3, #12
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d1eb      	bne.n	8005eb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ee0:	4b25      	ldr	r3, [pc, #148]	; (8005f78 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0307 	and.w	r3, r3, #7
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d20c      	bcs.n	8005f08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eee:	4b22      	ldr	r3, [pc, #136]	; (8005f78 <HAL_RCC_ClockConfig+0x1b8>)
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	b2d2      	uxtb	r2, r2
 8005ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ef6:	4b20      	ldr	r3, [pc, #128]	; (8005f78 <HAL_RCC_ClockConfig+0x1b8>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d001      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e032      	b.n	8005f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d008      	beq.n	8005f26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f14:	4b19      	ldr	r3, [pc, #100]	; (8005f7c <HAL_RCC_ClockConfig+0x1bc>)
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	4916      	ldr	r1, [pc, #88]	; (8005f7c <HAL_RCC_ClockConfig+0x1bc>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0308 	and.w	r3, r3, #8
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d009      	beq.n	8005f46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f32:	4b12      	ldr	r3, [pc, #72]	; (8005f7c <HAL_RCC_ClockConfig+0x1bc>)
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	490e      	ldr	r1, [pc, #56]	; (8005f7c <HAL_RCC_ClockConfig+0x1bc>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f46:	f000 f821 	bl	8005f8c <HAL_RCC_GetSysClockFreq>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	4b0b      	ldr	r3, [pc, #44]	; (8005f7c <HAL_RCC_ClockConfig+0x1bc>)
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	091b      	lsrs	r3, r3, #4
 8005f52:	f003 030f 	and.w	r3, r3, #15
 8005f56:	490a      	ldr	r1, [pc, #40]	; (8005f80 <HAL_RCC_ClockConfig+0x1c0>)
 8005f58:	5ccb      	ldrb	r3, [r1, r3]
 8005f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f5e:	4a09      	ldr	r2, [pc, #36]	; (8005f84 <HAL_RCC_ClockConfig+0x1c4>)
 8005f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f62:	4b09      	ldr	r3, [pc, #36]	; (8005f88 <HAL_RCC_ClockConfig+0x1c8>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fc fcc0 	bl	80028ec <HAL_InitTick>

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	40023c00 	.word	0x40023c00
 8005f7c:	40023800 	.word	0x40023800
 8005f80:	08012b78 	.word	0x08012b78
 8005f84:	20000000 	.word	0x20000000
 8005f88:	20000004 	.word	0x20000004

08005f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	607b      	str	r3, [r7, #4]
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fa4:	4b67      	ldr	r3, [pc, #412]	; (8006144 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f003 030c 	and.w	r3, r3, #12
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d00d      	beq.n	8005fcc <HAL_RCC_GetSysClockFreq+0x40>
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	f200 80bd 	bhi.w	8006130 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d002      	beq.n	8005fc0 <HAL_RCC_GetSysClockFreq+0x34>
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d003      	beq.n	8005fc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005fbe:	e0b7      	b.n	8006130 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fc0:	4b61      	ldr	r3, [pc, #388]	; (8006148 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005fc2:	60bb      	str	r3, [r7, #8]
       break;
 8005fc4:	e0b7      	b.n	8006136 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fc6:	4b60      	ldr	r3, [pc, #384]	; (8006148 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005fc8:	60bb      	str	r3, [r7, #8]
      break;
 8005fca:	e0b4      	b.n	8006136 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fcc:	4b5d      	ldr	r3, [pc, #372]	; (8006144 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fd4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fd6:	4b5b      	ldr	r3, [pc, #364]	; (8006144 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d04d      	beq.n	800607e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fe2:	4b58      	ldr	r3, [pc, #352]	; (8006144 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	099b      	lsrs	r3, r3, #6
 8005fe8:	461a      	mov	r2, r3
 8005fea:	f04f 0300 	mov.w	r3, #0
 8005fee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ff2:	f04f 0100 	mov.w	r1, #0
 8005ff6:	ea02 0800 	and.w	r8, r2, r0
 8005ffa:	ea03 0901 	and.w	r9, r3, r1
 8005ffe:	4640      	mov	r0, r8
 8006000:	4649      	mov	r1, r9
 8006002:	f04f 0200 	mov.w	r2, #0
 8006006:	f04f 0300 	mov.w	r3, #0
 800600a:	014b      	lsls	r3, r1, #5
 800600c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006010:	0142      	lsls	r2, r0, #5
 8006012:	4610      	mov	r0, r2
 8006014:	4619      	mov	r1, r3
 8006016:	ebb0 0008 	subs.w	r0, r0, r8
 800601a:	eb61 0109 	sbc.w	r1, r1, r9
 800601e:	f04f 0200 	mov.w	r2, #0
 8006022:	f04f 0300 	mov.w	r3, #0
 8006026:	018b      	lsls	r3, r1, #6
 8006028:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800602c:	0182      	lsls	r2, r0, #6
 800602e:	1a12      	subs	r2, r2, r0
 8006030:	eb63 0301 	sbc.w	r3, r3, r1
 8006034:	f04f 0000 	mov.w	r0, #0
 8006038:	f04f 0100 	mov.w	r1, #0
 800603c:	00d9      	lsls	r1, r3, #3
 800603e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006042:	00d0      	lsls	r0, r2, #3
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	eb12 0208 	adds.w	r2, r2, r8
 800604c:	eb43 0309 	adc.w	r3, r3, r9
 8006050:	f04f 0000 	mov.w	r0, #0
 8006054:	f04f 0100 	mov.w	r1, #0
 8006058:	0299      	lsls	r1, r3, #10
 800605a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800605e:	0290      	lsls	r0, r2, #10
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4610      	mov	r0, r2
 8006066:	4619      	mov	r1, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	461a      	mov	r2, r3
 800606c:	f04f 0300 	mov.w	r3, #0
 8006070:	f7fa fda2 	bl	8000bb8 <__aeabi_uldivmod>
 8006074:	4602      	mov	r2, r0
 8006076:	460b      	mov	r3, r1
 8006078:	4613      	mov	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	e04a      	b.n	8006114 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800607e:	4b31      	ldr	r3, [pc, #196]	; (8006144 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	099b      	lsrs	r3, r3, #6
 8006084:	461a      	mov	r2, r3
 8006086:	f04f 0300 	mov.w	r3, #0
 800608a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800608e:	f04f 0100 	mov.w	r1, #0
 8006092:	ea02 0400 	and.w	r4, r2, r0
 8006096:	ea03 0501 	and.w	r5, r3, r1
 800609a:	4620      	mov	r0, r4
 800609c:	4629      	mov	r1, r5
 800609e:	f04f 0200 	mov.w	r2, #0
 80060a2:	f04f 0300 	mov.w	r3, #0
 80060a6:	014b      	lsls	r3, r1, #5
 80060a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80060ac:	0142      	lsls	r2, r0, #5
 80060ae:	4610      	mov	r0, r2
 80060b0:	4619      	mov	r1, r3
 80060b2:	1b00      	subs	r0, r0, r4
 80060b4:	eb61 0105 	sbc.w	r1, r1, r5
 80060b8:	f04f 0200 	mov.w	r2, #0
 80060bc:	f04f 0300 	mov.w	r3, #0
 80060c0:	018b      	lsls	r3, r1, #6
 80060c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80060c6:	0182      	lsls	r2, r0, #6
 80060c8:	1a12      	subs	r2, r2, r0
 80060ca:	eb63 0301 	sbc.w	r3, r3, r1
 80060ce:	f04f 0000 	mov.w	r0, #0
 80060d2:	f04f 0100 	mov.w	r1, #0
 80060d6:	00d9      	lsls	r1, r3, #3
 80060d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80060dc:	00d0      	lsls	r0, r2, #3
 80060de:	4602      	mov	r2, r0
 80060e0:	460b      	mov	r3, r1
 80060e2:	1912      	adds	r2, r2, r4
 80060e4:	eb45 0303 	adc.w	r3, r5, r3
 80060e8:	f04f 0000 	mov.w	r0, #0
 80060ec:	f04f 0100 	mov.w	r1, #0
 80060f0:	0299      	lsls	r1, r3, #10
 80060f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80060f6:	0290      	lsls	r0, r2, #10
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	4610      	mov	r0, r2
 80060fe:	4619      	mov	r1, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	461a      	mov	r2, r3
 8006104:	f04f 0300 	mov.w	r3, #0
 8006108:	f7fa fd56 	bl	8000bb8 <__aeabi_uldivmod>
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	4613      	mov	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006114:	4b0b      	ldr	r3, [pc, #44]	; (8006144 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	0c1b      	lsrs	r3, r3, #16
 800611a:	f003 0303 	and.w	r3, r3, #3
 800611e:	3301      	adds	r3, #1
 8006120:	005b      	lsls	r3, r3, #1
 8006122:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	fbb2 f3f3 	udiv	r3, r2, r3
 800612c:	60bb      	str	r3, [r7, #8]
      break;
 800612e:	e002      	b.n	8006136 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006130:	4b05      	ldr	r3, [pc, #20]	; (8006148 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006132:	60bb      	str	r3, [r7, #8]
      break;
 8006134:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006136:	68bb      	ldr	r3, [r7, #8]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006142:	bf00      	nop
 8006144:	40023800 	.word	0x40023800
 8006148:	00f42400 	.word	0x00f42400

0800614c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800614c:	b480      	push	{r7}
 800614e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006150:	4b03      	ldr	r3, [pc, #12]	; (8006160 <HAL_RCC_GetHCLKFreq+0x14>)
 8006152:	681b      	ldr	r3, [r3, #0]
}
 8006154:	4618      	mov	r0, r3
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	20000000 	.word	0x20000000

08006164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006168:	f7ff fff0 	bl	800614c <HAL_RCC_GetHCLKFreq>
 800616c:	4602      	mov	r2, r0
 800616e:	4b05      	ldr	r3, [pc, #20]	; (8006184 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	0a9b      	lsrs	r3, r3, #10
 8006174:	f003 0307 	and.w	r3, r3, #7
 8006178:	4903      	ldr	r1, [pc, #12]	; (8006188 <HAL_RCC_GetPCLK1Freq+0x24>)
 800617a:	5ccb      	ldrb	r3, [r1, r3]
 800617c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006180:	4618      	mov	r0, r3
 8006182:	bd80      	pop	{r7, pc}
 8006184:	40023800 	.word	0x40023800
 8006188:	08012b88 	.word	0x08012b88

0800618c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e022      	b.n	80061e4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d105      	bne.n	80061b6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7fc f891 	bl	80022d8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2203      	movs	r2, #3
 80061ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f814 	bl	80061ec <HAL_SD_InitCard>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e00a      	b.n	80061e4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80061ec:	b5b0      	push	{r4, r5, r7, lr}
 80061ee:	b08e      	sub	sp, #56	; 0x38
 80061f0:	af04      	add	r7, sp, #16
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80061f4:	2300      	movs	r3, #0
 80061f6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80061fc:	2300      	movs	r3, #0
 80061fe:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006200:	2300      	movs	r3, #0
 8006202:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006204:	2300      	movs	r3, #0
 8006206:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006208:	2376      	movs	r3, #118	; 0x76
 800620a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681d      	ldr	r5, [r3, #0]
 8006210:	466c      	mov	r4, sp
 8006212:	f107 0314 	add.w	r3, r7, #20
 8006216:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800621a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800621e:	f107 0308 	add.w	r3, r7, #8
 8006222:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006224:	4628      	mov	r0, r5
 8006226:	f002 f991 	bl	800854c <SDIO_Init>
 800622a:	4603      	mov	r3, r0
 800622c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e04c      	b.n	80062d6 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800623c:	4b28      	ldr	r3, [pc, #160]	; (80062e0 <HAL_SD_InitCard+0xf4>)
 800623e:	2200      	movs	r2, #0
 8006240:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4618      	mov	r0, r3
 8006248:	f002 f9c9 	bl	80085de <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800624c:	4b24      	ldr	r3, [pc, #144]	; (80062e0 <HAL_SD_InitCard+0xf4>)
 800624e:	2201      	movs	r2, #1
 8006250:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f001 f804 	bl	8007260 <SD_PowerON>
 8006258:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00b      	beq.n	8006278 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	431a      	orrs	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e02e      	b.n	80062d6 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 ff25 	bl	80070c8 <SD_InitCard>
 800627e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00b      	beq.n	800629e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	431a      	orrs	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e01b      	b.n	80062d6 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062a6:	4618      	mov	r0, r3
 80062a8:	f002 fa2c 	bl	8008704 <SDMMC_CmdBlockLength>
 80062ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00f      	beq.n	80062d4 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a0a      	ldr	r2, [pc, #40]	; (80062e4 <HAL_SD_InitCard+0xf8>)
 80062ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	431a      	orrs	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e000      	b.n	80062d6 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3728      	adds	r7, #40	; 0x28
 80062da:	46bd      	mov	sp, r7
 80062dc:	bdb0      	pop	{r4, r5, r7, pc}
 80062de:	bf00      	nop
 80062e0:	422580a0 	.word	0x422580a0
 80062e4:	004005ff 	.word	0x004005ff

080062e8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08c      	sub	sp, #48	; 0x30
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d107      	bne.n	8006310 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006304:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e0c0      	b.n	8006492 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b01      	cmp	r3, #1
 800631a:	f040 80b9 	bne.w	8006490 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	441a      	add	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800632e:	429a      	cmp	r2, r3
 8006330:	d907      	bls.n	8006342 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006336:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e0a7      	b.n	8006492 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2203      	movs	r2, #3
 8006346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2200      	movs	r2, #0
 8006350:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	6812      	ldr	r2, [r2, #0]
 800635c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8006360:	f043 0302 	orr.w	r3, r3, #2
 8006364:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636a:	4a4c      	ldr	r2, [pc, #304]	; (800649c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800636c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	4a4b      	ldr	r2, [pc, #300]	; (80064a0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006374:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	2200      	movs	r2, #0
 800637c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006382:	2200      	movs	r2, #0
 8006384:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3380      	adds	r3, #128	; 0x80
 80063ac:	4619      	mov	r1, r3
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	025b      	lsls	r3, r3, #9
 80063b4:	089b      	lsrs	r3, r3, #2
 80063b6:	f7fc fccd 	bl	8002d54 <HAL_DMA_Start_IT>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d017      	beq.n	80063f0 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80063ce:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a33      	ldr	r2, [pc, #204]	; (80064a4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80063d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e050      	b.n	8006492 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80063f0:	4b2d      	ldr	r3, [pc, #180]	; (80064a8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80063f2:	2201      	movs	r2, #1
 80063f4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d002      	beq.n	8006404 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80063fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006400:	025b      	lsls	r3, r3, #9
 8006402:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006404:	f04f 33ff 	mov.w	r3, #4294967295
 8006408:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	025b      	lsls	r3, r3, #9
 800640e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006410:	2390      	movs	r3, #144	; 0x90
 8006412:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006414:	2302      	movs	r3, #2
 8006416:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006418:	2300      	movs	r3, #0
 800641a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800641c:	2301      	movs	r3, #1
 800641e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f107 0210 	add.w	r2, r7, #16
 8006428:	4611      	mov	r1, r2
 800642a:	4618      	mov	r0, r3
 800642c:	f002 f93e 	bl	80086ac <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d90a      	bls.n	800644c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2282      	movs	r2, #130	; 0x82
 800643a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006442:	4618      	mov	r0, r3
 8006444:	f002 f9a2 	bl	800878c <SDMMC_CmdReadMultiBlock>
 8006448:	62f8      	str	r0, [r7, #44]	; 0x2c
 800644a:	e009      	b.n	8006460 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2281      	movs	r2, #129	; 0x81
 8006450:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006458:	4618      	mov	r0, r3
 800645a:	f002 f975 	bl	8008748 <SDMMC_CmdReadSingleBlock>
 800645e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006462:	2b00      	cmp	r3, #0
 8006464:	d012      	beq.n	800648c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a0e      	ldr	r2, [pc, #56]	; (80064a4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800646c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006474:	431a      	orrs	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e002      	b.n	8006492 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800648c:	2300      	movs	r3, #0
 800648e:	e000      	b.n	8006492 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8006490:	2302      	movs	r3, #2
  }
}
 8006492:	4618      	mov	r0, r3
 8006494:	3730      	adds	r7, #48	; 0x30
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	08006ed7 	.word	0x08006ed7
 80064a0:	08006f49 	.word	0x08006f49
 80064a4:	004005ff 	.word	0x004005ff
 80064a8:	4225858c 	.word	0x4225858c

080064ac <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b08c      	sub	sp, #48	; 0x30
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
 80064b8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d107      	bne.n	80064d4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e0c5      	b.n	8006660 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b01      	cmp	r3, #1
 80064de:	f040 80be 	bne.w	800665e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80064e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	441a      	add	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d907      	bls.n	8006506 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e0ac      	b.n	8006660 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2203      	movs	r2, #3
 800650a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2200      	movs	r2, #0
 8006514:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	6812      	ldr	r2, [r2, #0]
 8006520:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8006524:	f043 0302 	orr.w	r3, r3, #2
 8006528:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800652e:	4a4e      	ldr	r2, [pc, #312]	; (8006668 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8006530:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006536:	4a4d      	ldr	r2, [pc, #308]	; (800666c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006538:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800653e:	2200      	movs	r2, #0
 8006540:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006546:	2b01      	cmp	r3, #1
 8006548:	d002      	beq.n	8006550 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654c:	025b      	lsls	r3, r3, #9
 800654e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d90a      	bls.n	800656c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	22a0      	movs	r2, #160	; 0xa0
 800655a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006562:	4618      	mov	r0, r3
 8006564:	f002 f956 	bl	8008814 <SDMMC_CmdWriteMultiBlock>
 8006568:	62f8      	str	r0, [r7, #44]	; 0x2c
 800656a:	e009      	b.n	8006580 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2290      	movs	r2, #144	; 0x90
 8006570:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006578:	4618      	mov	r0, r3
 800657a:	f002 f929 	bl	80087d0 <SDMMC_CmdWriteSingleBlock>
 800657e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006582:	2b00      	cmp	r3, #0
 8006584:	d012      	beq.n	80065ac <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a39      	ldr	r2, [pc, #228]	; (8006670 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800658c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006594:	431a      	orrs	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e059      	b.n	8006660 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80065ac:	4b31      	ldr	r3, [pc, #196]	; (8006674 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80065ae:	2201      	movs	r2, #1
 80065b0:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b6:	2240      	movs	r2, #64	; 0x40
 80065b8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ca:	689a      	ldr	r2, [r3, #8]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3380      	adds	r3, #128	; 0x80
 80065e2:	461a      	mov	r2, r3
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	025b      	lsls	r3, r3, #9
 80065e8:	089b      	lsrs	r3, r3, #2
 80065ea:	f7fc fbb3 	bl	8002d54 <HAL_DMA_Start_IT>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d01c      	beq.n	800662e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	6812      	ldr	r2, [r2, #0]
 80065fe:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8006602:	f023 0302 	bic.w	r3, r3, #2
 8006606:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a18      	ldr	r2, [pc, #96]	; (8006670 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800660e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006614:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e018      	b.n	8006660 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800662e:	f04f 33ff 	mov.w	r3, #4294967295
 8006632:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	025b      	lsls	r3, r3, #9
 8006638:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800663a:	2390      	movs	r3, #144	; 0x90
 800663c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800663e:	2300      	movs	r3, #0
 8006640:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006642:	2300      	movs	r3, #0
 8006644:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006646:	2301      	movs	r3, #1
 8006648:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f107 0210 	add.w	r2, r7, #16
 8006652:	4611      	mov	r1, r2
 8006654:	4618      	mov	r0, r3
 8006656:	f002 f829 	bl	80086ac <SDIO_ConfigData>

      return HAL_OK;
 800665a:	2300      	movs	r3, #0
 800665c:	e000      	b.n	8006660 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800665e:	2302      	movs	r3, #2
  }
}
 8006660:	4618      	mov	r0, r3
 8006662:	3730      	adds	r7, #48	; 0x30
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	08006ead 	.word	0x08006ead
 800666c:	08006f49 	.word	0x08006f49
 8006670:	004005ff 	.word	0x004005ff
 8006674:	4225858c 	.word	0x4225858c

08006678 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006684:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800668c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d008      	beq.n	80066a6 <HAL_SD_IRQHandler+0x2e>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f003 0308 	and.w	r3, r3, #8
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fffd 	bl	800769e <SD_Read_IT>
 80066a4:	e165      	b.n	8006972 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 808f 	beq.w	80067d4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066be:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	6812      	ldr	r2, [r2, #0]
 80066ca:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80066ce:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80066d2:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 0201 	bic.w	r2, r2, #1
 80066e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f003 0308 	and.w	r3, r3, #8
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d039      	beq.n	8006762 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d104      	bne.n	8006702 <HAL_SD_IRQHandler+0x8a>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f003 0320 	and.w	r3, r3, #32
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d011      	beq.n	8006726 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4618      	mov	r0, r3
 8006708:	f002 f8a6 	bl	8008858 <SDMMC_CmdStopTransfer>
 800670c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d008      	beq.n	8006726 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	431a      	orrs	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f92f 	bl	8006984 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f240 523a 	movw	r2, #1338	; 0x53a
 800672e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b00      	cmp	r3, #0
 8006746:	d104      	bne.n	8006752 <HAL_SD_IRQHandler+0xda>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f003 0302 	and.w	r3, r3, #2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f004 f88e 	bl	800a874 <HAL_SD_RxCpltCallback>
 8006758:	e10b      	b.n	8006972 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f004 f880 	bl	800a860 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006760:	e107      	b.n	8006972 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 8102 	beq.w	8006972 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f003 0320 	and.w	r3, r3, #32
 8006774:	2b00      	cmp	r3, #0
 8006776:	d011      	beq.n	800679c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4618      	mov	r0, r3
 800677e:	f002 f86b 	bl	8008858 <SDMMC_CmdStopTransfer>
 8006782:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d008      	beq.n	800679c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f8f4 	bl	8006984 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f040 80e5 	bne.w	8006972 <HAL_SD_IRQHandler+0x2fa>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f040 80df 	bne.w	8006972 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 0208 	bic.w	r2, r2, #8
 80067c2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f004 f847 	bl	800a860 <HAL_SD_TxCpltCallback>
}
 80067d2:	e0ce      	b.n	8006972 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d008      	beq.n	80067f4 <HAL_SD_IRQHandler+0x17c>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f003 0308 	and.w	r3, r3, #8
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d003      	beq.n	80067f4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 ffa7 	bl	8007740 <SD_Write_IT>
 80067f2:	e0be      	b.n	8006972 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067fa:	f240 233a 	movw	r3, #570	; 0x23a
 80067fe:	4013      	ands	r3, r2
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 80b6 	beq.w	8006972 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d005      	beq.n	8006820 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006818:	f043 0202 	orr.w	r2, r3, #2
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006826:	f003 0308 	and.w	r3, r3, #8
 800682a:	2b00      	cmp	r3, #0
 800682c:	d005      	beq.n	800683a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006832:	f043 0208 	orr.w	r2, r3, #8
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006840:	f003 0320 	and.w	r3, r3, #32
 8006844:	2b00      	cmp	r3, #0
 8006846:	d005      	beq.n	8006854 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684c:	f043 0220 	orr.w	r2, r3, #32
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685a:	f003 0310 	and.w	r3, r3, #16
 800685e:	2b00      	cmp	r3, #0
 8006860:	d005      	beq.n	800686e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006866:	f043 0210 	orr.w	r2, r3, #16
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006878:	2b00      	cmp	r3, #0
 800687a:	d005      	beq.n	8006888 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006880:	f043 0208 	orr.w	r2, r3, #8
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f240 723a 	movw	r2, #1850	; 0x73a
 8006890:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	6812      	ldr	r2, [r2, #0]
 800689c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80068a0:	f023 0302 	bic.w	r3, r3, #2
 80068a4:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f001 ffd4 	bl	8008858 <SDMMC_CmdStopTransfer>
 80068b0:	4602      	mov	r2, r0
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b6:	431a      	orrs	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f003 0308 	and.w	r3, r3, #8
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00a      	beq.n	80068dc <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f855 	bl	8006984 <HAL_SD_ErrorCallback>
}
 80068da:	e04a      	b.n	8006972 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d045      	beq.n	8006972 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f003 0310 	and.w	r3, r3, #16
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d104      	bne.n	80068fa <HAL_SD_IRQHandler+0x282>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f003 0320 	and.w	r3, r3, #32
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d011      	beq.n	800691e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fe:	4a1f      	ldr	r2, [pc, #124]	; (800697c <HAL_SD_IRQHandler+0x304>)
 8006900:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006906:	4618      	mov	r0, r3
 8006908:	f7fc fa7c 	bl	8002e04 <HAL_DMA_Abort_IT>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d02f      	beq.n	8006972 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006916:	4618      	mov	r0, r3
 8006918:	f000 fb68 	bl	8006fec <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800691c:	e029      	b.n	8006972 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b00      	cmp	r3, #0
 8006926:	d104      	bne.n	8006932 <HAL_SD_IRQHandler+0x2ba>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d011      	beq.n	8006956 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006936:	4a12      	ldr	r2, [pc, #72]	; (8006980 <HAL_SD_IRQHandler+0x308>)
 8006938:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693e:	4618      	mov	r0, r3
 8006940:	f7fc fa60 	bl	8002e04 <HAL_DMA_Abort_IT>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d013      	beq.n	8006972 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	4618      	mov	r0, r3
 8006950:	f000 fb83 	bl	800705a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006954:	e00d      	b.n	8006972 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f003 ff6e 	bl	800a84c <HAL_SD_AbortCallback>
}
 8006970:	e7ff      	b.n	8006972 <HAL_SD_IRQHandler+0x2fa>
 8006972:	bf00      	nop
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	08006fed 	.word	0x08006fed
 8006980:	0800705b 	.word	0x0800705b

08006984 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069a6:	0f9b      	lsrs	r3, r3, #30
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069b2:	0e9b      	lsrs	r3, r3, #26
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	f003 030f 	and.w	r3, r3, #15
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069c4:	0e1b      	lsrs	r3, r3, #24
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	f003 0303 	and.w	r3, r3, #3
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069d6:	0c1b      	lsrs	r3, r3, #16
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069e2:	0a1b      	lsrs	r3, r3, #8
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069f8:	0d1b      	lsrs	r3, r3, #20
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a04:	0c1b      	lsrs	r3, r3, #16
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	f003 030f 	and.w	r3, r3, #15
 8006a0c:	b2da      	uxtb	r2, r3
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a16:	0bdb      	lsrs	r3, r3, #15
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a28:	0b9b      	lsrs	r3, r3, #14
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	f003 0301 	and.w	r3, r3, #1
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a3a:	0b5b      	lsrs	r3, r3, #13
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	b2da      	uxtb	r2, r3
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a4c:	0b1b      	lsrs	r3, r3, #12
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d163      	bne.n	8006b30 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a6c:	009a      	lsls	r2, r3, #2
 8006a6e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006a72:	4013      	ands	r3, r2
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006a78:	0f92      	lsrs	r2, r2, #30
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a84:	0edb      	lsrs	r3, r3, #27
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	f003 0307 	and.w	r3, r3, #7
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a96:	0e1b      	lsrs	r3, r3, #24
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	f003 0307 	and.w	r3, r3, #7
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aa8:	0d5b      	lsrs	r3, r3, #21
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	f003 0307 	and.w	r3, r3, #7
 8006ab0:	b2da      	uxtb	r2, r3
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aba:	0c9b      	lsrs	r3, r3, #18
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	f003 0307 	and.w	r3, r3, #7
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006acc:	0bdb      	lsrs	r3, r3, #15
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	f003 0307 	and.w	r3, r3, #7
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	1c5a      	adds	r2, r3, #1
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	7e1b      	ldrb	r3, [r3, #24]
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	f003 0307 	and.w	r3, r3, #7
 8006aee:	3302      	adds	r3, #2
 8006af0:	2201      	movs	r2, #1
 8006af2:	fa02 f303 	lsl.w	r3, r2, r3
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006afa:	fb02 f203 	mul.w	r2, r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	7a1b      	ldrb	r3, [r3, #8]
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	f003 030f 	and.w	r3, r3, #15
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	409a      	lsls	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006b1c:	0a52      	lsrs	r2, r2, #9
 8006b1e:	fb02 f203 	mul.w	r2, r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b2c:	661a      	str	r2, [r3, #96]	; 0x60
 8006b2e:	e031      	b.n	8006b94 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d11d      	bne.n	8006b74 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b3c:	041b      	lsls	r3, r3, #16
 8006b3e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b46:	0c1b      	lsrs	r3, r3, #16
 8006b48:	431a      	orrs	r2, r3
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	3301      	adds	r3, #1
 8006b54:	029a      	lsls	r2, r3, #10
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b68:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	661a      	str	r2, [r3, #96]	; 0x60
 8006b72:	e00f      	b.n	8006b94 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a58      	ldr	r2, [pc, #352]	; (8006cdc <HAL_SD_GetCardCSD+0x344>)
 8006b7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b80:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e09d      	b.n	8006cd0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b98:	0b9b      	lsrs	r3, r3, #14
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006baa:	09db      	lsrs	r3, r3, #7
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bb2:	b2da      	uxtb	r2, r3
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bcc:	0fdb      	lsrs	r3, r3, #31
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd8:	0f5b      	lsrs	r3, r3, #29
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	f003 0303 	and.w	r3, r3, #3
 8006be0:	b2da      	uxtb	r2, r3
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bea:	0e9b      	lsrs	r3, r3, #26
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	f003 0307 	and.w	r3, r3, #7
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfc:	0d9b      	lsrs	r3, r3, #22
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	f003 030f 	and.w	r3, r3, #15
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c0e:	0d5b      	lsrs	r3, r3, #21
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c2a:	0c1b      	lsrs	r3, r3, #16
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c3e:	0bdb      	lsrs	r3, r3, #15
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c52:	0b9b      	lsrs	r3, r3, #14
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c66:	0b5b      	lsrs	r3, r3, #13
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	b2da      	uxtb	r2, r3
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7a:	0b1b      	lsrs	r3, r3, #12
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	b2da      	uxtb	r2, r3
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8e:	0a9b      	lsrs	r3, r3, #10
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	f003 0303 	and.w	r3, r3, #3
 8006c96:	b2da      	uxtb	r2, r3
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca2:	0a1b      	lsrs	r3, r3, #8
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	f003 0303 	and.w	r3, r3, #3
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb6:	085b      	lsrs	r3, r3, #1
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	004005ff 	.word	0x004005ff

08006ce0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006d38:	b5b0      	push	{r4, r5, r7, lr}
 8006d3a:	b08e      	sub	sp, #56	; 0x38
 8006d3c:	af04      	add	r7, sp, #16
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006d42:	2300      	movs	r3, #0
 8006d44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2203      	movs	r2, #3
 8006d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d54:	2b03      	cmp	r3, #3
 8006d56:	d02e      	beq.n	8006db6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d5e:	d106      	bne.n	8006d6e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	639a      	str	r2, [r3, #56]	; 0x38
 8006d6c:	e029      	b.n	8006dc2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d74:	d10a      	bne.n	8006d8c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fb28 	bl	80073cc <SD_WideBus_Enable>
 8006d7c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d82:	6a3b      	ldr	r3, [r7, #32]
 8006d84:	431a      	orrs	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	639a      	str	r2, [r3, #56]	; 0x38
 8006d8a:	e01a      	b.n	8006dc2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10a      	bne.n	8006da8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fb65 	bl	8007462 <SD_WideBus_Disable>
 8006d98:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	431a      	orrs	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	639a      	str	r2, [r3, #56]	; 0x38
 8006da6:	e00c      	b.n	8006dc2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	639a      	str	r2, [r3, #56]	; 0x38
 8006db4:	e005      	b.n	8006dc2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dba:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00b      	beq.n	8006de2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a26      	ldr	r2, [pc, #152]	; (8006e68 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006dd0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006de0:	e01f      	b.n	8006e22 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681d      	ldr	r5, [r3, #0]
 8006e08:	466c      	mov	r4, sp
 8006e0a:	f107 0314 	add.w	r3, r7, #20
 8006e0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006e12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006e16:	f107 0308 	add.w	r3, r7, #8
 8006e1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	f001 fb95 	bl	800854c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f001 fc6a 	bl	8008704 <SDMMC_CmdBlockLength>
 8006e30:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00c      	beq.n	8006e52 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a0a      	ldr	r2, [pc, #40]	; (8006e68 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006e3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	431a      	orrs	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006e5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3728      	adds	r7, #40	; 0x28
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bdb0      	pop	{r4, r5, r7, pc}
 8006e66:	bf00      	nop
 8006e68:	004005ff 	.word	0x004005ff

08006e6c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006e74:	2300      	movs	r3, #0
 8006e76:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006e78:	f107 030c 	add.w	r3, r7, #12
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fa7c 	bl	800737c <SD_SendStatus>
 8006e84:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d005      	beq.n	8006e98 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	431a      	orrs	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	0a5b      	lsrs	r3, r3, #9
 8006e9c:	f003 030f 	and.w	r3, r3, #15
 8006ea0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006ea2:	693b      	ldr	r3, [r7, #16]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3718      	adds	r7, #24
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ec8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006eca:	bf00      	nop
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b084      	sub	sp, #16
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee8:	2b82      	cmp	r3, #130	; 0x82
 8006eea:	d111      	bne.n	8006f10 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f001 fcb1 	bl	8008858 <SDMMC_CmdStopTransfer>
 8006ef6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d008      	beq.n	8006f10 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	431a      	orrs	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f7ff fd3a 	bl	8006984 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f022 0208 	bic.w	r2, r2, #8
 8006f1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f240 523a 	movw	r2, #1338	; 0x53a
 8006f28:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f003 fc9b 	bl	800a874 <HAL_SD_RxCpltCallback>
#endif
}
 8006f3e:	bf00      	nop
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
	...

08006f48 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f54:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7fc f900 	bl	800315c <HAL_DMA_GetError>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d03e      	beq.n	8006fe0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f68:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f70:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d002      	beq.n	8006f7e <SD_DMAError+0x36>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d12d      	bne.n	8006fda <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a19      	ldr	r2, [pc, #100]	; (8006fe8 <SD_DMAError+0xa0>)
 8006f84:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006f94:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006fa2:	6978      	ldr	r0, [r7, #20]
 8006fa4:	f7ff ff62 	bl	8006e6c <HAL_SD_GetCardState>
 8006fa8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	2b06      	cmp	r3, #6
 8006fae:	d002      	beq.n	8006fb6 <SD_DMAError+0x6e>
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2b05      	cmp	r3, #5
 8006fb4:	d10a      	bne.n	8006fcc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f001 fc4c 	bl	8008858 <SDMMC_CmdStopTransfer>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc6:	431a      	orrs	r2, r3
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006fda:	6978      	ldr	r0, [r7, #20]
 8006fdc:	f7ff fcd2 	bl	8006984 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006fe0:	bf00      	nop
 8006fe2:	3718      	adds	r7, #24
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	004005ff 	.word	0x004005ff

08006fec <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f240 523a 	movw	r2, #1338	; 0x53a
 8007002:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f7ff ff31 	bl	8006e6c <HAL_SD_GetCardState>
 800700a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2b06      	cmp	r3, #6
 800701e:	d002      	beq.n	8007026 <SD_DMATxAbort+0x3a>
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	2b05      	cmp	r3, #5
 8007024:	d10a      	bne.n	800703c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4618      	mov	r0, r3
 800702c:	f001 fc14 	bl	8008858 <SDMMC_CmdStopTransfer>
 8007030:	4602      	mov	r2, r0
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007036:	431a      	orrs	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007040:	2b00      	cmp	r3, #0
 8007042:	d103      	bne.n	800704c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f003 fc01 	bl	800a84c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800704a:	e002      	b.n	8007052 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f7ff fc99 	bl	8006984 <HAL_SD_ErrorCallback>
}
 8007052:	bf00      	nop
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b084      	sub	sp, #16
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007066:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007070:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f7ff fefa 	bl	8006e6c <HAL_SD_GetCardState>
 8007078:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	2b06      	cmp	r3, #6
 800708c:	d002      	beq.n	8007094 <SD_DMARxAbort+0x3a>
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2b05      	cmp	r3, #5
 8007092:	d10a      	bne.n	80070aa <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4618      	mov	r0, r3
 800709a:	f001 fbdd 	bl	8008858 <SDMMC_CmdStopTransfer>
 800709e:	4602      	mov	r2, r0
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a4:	431a      	orrs	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d103      	bne.n	80070ba <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f003 fbca 	bl	800a84c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80070b8:	e002      	b.n	80070c0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f7ff fc62 	bl	8006984 <HAL_SD_ErrorCallback>
}
 80070c0:	bf00      	nop
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80070c8:	b5b0      	push	{r4, r5, r7, lr}
 80070ca:	b094      	sub	sp, #80	; 0x50
 80070cc:	af04      	add	r7, sp, #16
 80070ce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80070d0:	2301      	movs	r3, #1
 80070d2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4618      	mov	r0, r3
 80070da:	f001 fa8f 	bl	80085fc <SDIO_GetPowerState>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d102      	bne.n	80070ea <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80070e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80070e8:	e0b6      	b.n	8007258 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ee:	2b03      	cmp	r3, #3
 80070f0:	d02f      	beq.n	8007152 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4618      	mov	r0, r3
 80070f8:	f001 fcb8 	bl	8008a6c <SDMMC_CmdSendCID>
 80070fc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80070fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007100:	2b00      	cmp	r3, #0
 8007102:	d001      	beq.n	8007108 <SD_InitCard+0x40>
    {
      return errorstate;
 8007104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007106:	e0a7      	b.n	8007258 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2100      	movs	r1, #0
 800710e:	4618      	mov	r0, r3
 8007110:	f001 fab9 	bl	8008686 <SDIO_GetResponse>
 8007114:	4602      	mov	r2, r0
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2104      	movs	r1, #4
 8007120:	4618      	mov	r0, r3
 8007122:	f001 fab0 	bl	8008686 <SDIO_GetResponse>
 8007126:	4602      	mov	r2, r0
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2108      	movs	r1, #8
 8007132:	4618      	mov	r0, r3
 8007134:	f001 faa7 	bl	8008686 <SDIO_GetResponse>
 8007138:	4602      	mov	r2, r0
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	210c      	movs	r1, #12
 8007144:	4618      	mov	r0, r3
 8007146:	f001 fa9e 	bl	8008686 <SDIO_GetResponse>
 800714a:	4602      	mov	r2, r0
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007156:	2b03      	cmp	r3, #3
 8007158:	d00d      	beq.n	8007176 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f107 020e 	add.w	r2, r7, #14
 8007162:	4611      	mov	r1, r2
 8007164:	4618      	mov	r0, r3
 8007166:	f001 fcbe 	bl	8008ae6 <SDMMC_CmdSetRelAdd>
 800716a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800716c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <SD_InitCard+0xae>
    {
      return errorstate;
 8007172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007174:	e070      	b.n	8007258 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800717a:	2b03      	cmp	r3, #3
 800717c:	d036      	beq.n	80071ec <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800717e:	89fb      	ldrh	r3, [r7, #14]
 8007180:	461a      	mov	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800718e:	041b      	lsls	r3, r3, #16
 8007190:	4619      	mov	r1, r3
 8007192:	4610      	mov	r0, r2
 8007194:	f001 fc88 	bl	8008aa8 <SDMMC_CmdSendCSD>
 8007198:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800719a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800719c:	2b00      	cmp	r3, #0
 800719e:	d001      	beq.n	80071a4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80071a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071a2:	e059      	b.n	8007258 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2100      	movs	r1, #0
 80071aa:	4618      	mov	r0, r3
 80071ac:	f001 fa6b 	bl	8008686 <SDIO_GetResponse>
 80071b0:	4602      	mov	r2, r0
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2104      	movs	r1, #4
 80071bc:	4618      	mov	r0, r3
 80071be:	f001 fa62 	bl	8008686 <SDIO_GetResponse>
 80071c2:	4602      	mov	r2, r0
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2108      	movs	r1, #8
 80071ce:	4618      	mov	r0, r3
 80071d0:	f001 fa59 	bl	8008686 <SDIO_GetResponse>
 80071d4:	4602      	mov	r2, r0
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	210c      	movs	r1, #12
 80071e0:	4618      	mov	r0, r3
 80071e2:	f001 fa50 	bl	8008686 <SDIO_GetResponse>
 80071e6:	4602      	mov	r2, r0
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2104      	movs	r1, #4
 80071f2:	4618      	mov	r0, r3
 80071f4:	f001 fa47 	bl	8008686 <SDIO_GetResponse>
 80071f8:	4603      	mov	r3, r0
 80071fa:	0d1a      	lsrs	r2, r3, #20
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007200:	f107 0310 	add.w	r3, r7, #16
 8007204:	4619      	mov	r1, r3
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7ff fbc6 	bl	8006998 <HAL_SD_GetCardCSD>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d002      	beq.n	8007218 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007212:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007216:	e01f      	b.n	8007258 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6819      	ldr	r1, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007220:	041b      	lsls	r3, r3, #16
 8007222:	461a      	mov	r2, r3
 8007224:	f04f 0300 	mov.w	r3, #0
 8007228:	4608      	mov	r0, r1
 800722a:	f001 fb37 	bl	800889c <SDMMC_CmdSelDesel>
 800722e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <SD_InitCard+0x172>
  {
    return errorstate;
 8007236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007238:	e00e      	b.n	8007258 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681d      	ldr	r5, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	466c      	mov	r4, sp
 8007242:	f103 0210 	add.w	r2, r3, #16
 8007246:	ca07      	ldmia	r2, {r0, r1, r2}
 8007248:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800724c:	3304      	adds	r3, #4
 800724e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007250:	4628      	mov	r0, r5
 8007252:	f001 f97b 	bl	800854c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3740      	adds	r7, #64	; 0x40
 800725c:	46bd      	mov	sp, r7
 800725e:	bdb0      	pop	{r4, r5, r7, pc}

08007260 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	617b      	str	r3, [r7, #20]
 8007270:	2300      	movs	r3, #0
 8007272:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4618      	mov	r0, r3
 800727a:	f001 fb32 	bl	80088e2 <SDMMC_CmdGoIdleState>
 800727e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <SD_PowerON+0x2a>
  {
    return errorstate;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	e072      	b.n	8007370 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4618      	mov	r0, r3
 8007290:	f001 fb45 	bl	800891e <SDMMC_CmdOperCond>
 8007294:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00d      	beq.n	80072b8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f001 fb1b 	bl	80088e2 <SDMMC_CmdGoIdleState>
 80072ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d004      	beq.n	80072be <SD_PowerON+0x5e>
    {
      return errorstate;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	e05b      	b.n	8007370 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d137      	bne.n	8007336 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2100      	movs	r1, #0
 80072cc:	4618      	mov	r0, r3
 80072ce:	f001 fb45 	bl	800895c <SDMMC_CmdAppCommand>
 80072d2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d02d      	beq.n	8007336 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80072da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80072de:	e047      	b.n	8007370 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2100      	movs	r1, #0
 80072e6:	4618      	mov	r0, r3
 80072e8:	f001 fb38 	bl	800895c <SDMMC_CmdAppCommand>
 80072ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <SD_PowerON+0x98>
    {
      return errorstate;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	e03b      	b.n	8007370 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	491e      	ldr	r1, [pc, #120]	; (8007378 <SD_PowerON+0x118>)
 80072fe:	4618      	mov	r0, r3
 8007300:	f001 fb4e 	bl	80089a0 <SDMMC_CmdAppOperCommand>
 8007304:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d002      	beq.n	8007312 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800730c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007310:	e02e      	b.n	8007370 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2100      	movs	r1, #0
 8007318:	4618      	mov	r0, r3
 800731a:	f001 f9b4 	bl	8008686 <SDIO_GetResponse>
 800731e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	0fdb      	lsrs	r3, r3, #31
 8007324:	2b01      	cmp	r3, #1
 8007326:	d101      	bne.n	800732c <SD_PowerON+0xcc>
 8007328:	2301      	movs	r3, #1
 800732a:	e000      	b.n	800732e <SD_PowerON+0xce>
 800732c:	2300      	movs	r3, #0
 800732e:	613b      	str	r3, [r7, #16]

    count++;
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	3301      	adds	r3, #1
 8007334:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800733c:	4293      	cmp	r3, r2
 800733e:	d802      	bhi.n	8007346 <SD_PowerON+0xe6>
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d0cc      	beq.n	80072e0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800734c:	4293      	cmp	r3, r2
 800734e:	d902      	bls.n	8007356 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007350:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007354:	e00c      	b.n	8007370 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d003      	beq.n	8007368 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	645a      	str	r2, [r3, #68]	; 0x44
 8007366:	e002      	b.n	800736e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3718      	adds	r7, #24
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	c1100000 	.word	0xc1100000

0800737c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d102      	bne.n	8007392 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800738c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007390:	e018      	b.n	80073c4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800739a:	041b      	lsls	r3, r3, #16
 800739c:	4619      	mov	r1, r3
 800739e:	4610      	mov	r0, r2
 80073a0:	f001 fbc2 	bl	8008b28 <SDMMC_CmdSendStatus>
 80073a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	e009      	b.n	80073c4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2100      	movs	r1, #0
 80073b6:	4618      	mov	r0, r3
 80073b8:	f001 f965 	bl	8008686 <SDIO_GetResponse>
 80073bc:	4602      	mov	r2, r0
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80073d4:	2300      	movs	r3, #0
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	2300      	movs	r3, #0
 80073da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2100      	movs	r1, #0
 80073e2:	4618      	mov	r0, r3
 80073e4:	f001 f94f 	bl	8008686 <SDIO_GetResponse>
 80073e8:	4603      	mov	r3, r0
 80073ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073f2:	d102      	bne.n	80073fa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80073f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073f8:	e02f      	b.n	800745a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80073fa:	f107 030c 	add.w	r3, r7, #12
 80073fe:	4619      	mov	r1, r3
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f879 	bl	80074f8 <SD_FindSCR>
 8007406:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	e023      	b.n	800745a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d01c      	beq.n	8007456 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007424:	041b      	lsls	r3, r3, #16
 8007426:	4619      	mov	r1, r3
 8007428:	4610      	mov	r0, r2
 800742a:	f001 fa97 	bl	800895c <SDMMC_CmdAppCommand>
 800742e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	e00f      	b.n	800745a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2102      	movs	r1, #2
 8007440:	4618      	mov	r0, r3
 8007442:	f001 fad0 	bl	80089e6 <SDMMC_CmdBusWidth>
 8007446:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d001      	beq.n	8007452 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	e003      	b.n	800745a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007452:	2300      	movs	r3, #0
 8007454:	e001      	b.n	800745a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007456:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800745a:	4618      	mov	r0, r3
 800745c:	3718      	adds	r7, #24
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b086      	sub	sp, #24
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800746a:	2300      	movs	r3, #0
 800746c:	60fb      	str	r3, [r7, #12]
 800746e:	2300      	movs	r3, #0
 8007470:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2100      	movs	r1, #0
 8007478:	4618      	mov	r0, r3
 800747a:	f001 f904 	bl	8008686 <SDIO_GetResponse>
 800747e:	4603      	mov	r3, r0
 8007480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007484:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007488:	d102      	bne.n	8007490 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800748a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800748e:	e02f      	b.n	80074f0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007490:	f107 030c 	add.w	r3, r7, #12
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f82e 	bl	80074f8 <SD_FindSCR>
 800749c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d001      	beq.n	80074a8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	e023      	b.n	80074f0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d01c      	beq.n	80074ec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ba:	041b      	lsls	r3, r3, #16
 80074bc:	4619      	mov	r1, r3
 80074be:	4610      	mov	r0, r2
 80074c0:	f001 fa4c 	bl	800895c <SDMMC_CmdAppCommand>
 80074c4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d001      	beq.n	80074d0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	e00f      	b.n	80074f0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2100      	movs	r1, #0
 80074d6:	4618      	mov	r0, r3
 80074d8:	f001 fa85 	bl	80089e6 <SDMMC_CmdBusWidth>
 80074dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d001      	beq.n	80074e8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	e003      	b.n	80074f0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80074e8:	2300      	movs	r3, #0
 80074ea:	e001      	b.n	80074f0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80074ec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3718      	adds	r7, #24
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80074f8:	b590      	push	{r4, r7, lr}
 80074fa:	b08f      	sub	sp, #60	; 0x3c
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007502:	f7fb fa37 	bl	8002974 <HAL_GetTick>
 8007506:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007508:	2300      	movs	r3, #0
 800750a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800750c:	2300      	movs	r3, #0
 800750e:	60bb      	str	r3, [r7, #8]
 8007510:	2300      	movs	r3, #0
 8007512:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2108      	movs	r1, #8
 800751e:	4618      	mov	r0, r3
 8007520:	f001 f8f0 	bl	8008704 <SDMMC_CmdBlockLength>
 8007524:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <SD_FindSCR+0x38>
  {
    return errorstate;
 800752c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752e:	e0b2      	b.n	8007696 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007538:	041b      	lsls	r3, r3, #16
 800753a:	4619      	mov	r1, r3
 800753c:	4610      	mov	r0, r2
 800753e:	f001 fa0d 	bl	800895c <SDMMC_CmdAppCommand>
 8007542:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007546:	2b00      	cmp	r3, #0
 8007548:	d001      	beq.n	800754e <SD_FindSCR+0x56>
  {
    return errorstate;
 800754a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754c:	e0a3      	b.n	8007696 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800754e:	f04f 33ff 	mov.w	r3, #4294967295
 8007552:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007554:	2308      	movs	r3, #8
 8007556:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007558:	2330      	movs	r3, #48	; 0x30
 800755a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800755c:	2302      	movs	r3, #2
 800755e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007560:	2300      	movs	r3, #0
 8007562:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007564:	2301      	movs	r3, #1
 8007566:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f107 0210 	add.w	r2, r7, #16
 8007570:	4611      	mov	r1, r2
 8007572:	4618      	mov	r0, r3
 8007574:	f001 f89a 	bl	80086ac <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4618      	mov	r0, r3
 800757e:	f001 fa54 	bl	8008a2a <SDMMC_CmdSendSCR>
 8007582:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007586:	2b00      	cmp	r3, #0
 8007588:	d02a      	beq.n	80075e0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800758a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758c:	e083      	b.n	8007696 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00f      	beq.n	80075bc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6819      	ldr	r1, [r3, #0]
 80075a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	f107 0208 	add.w	r2, r7, #8
 80075a8:	18d4      	adds	r4, r2, r3
 80075aa:	4608      	mov	r0, r1
 80075ac:	f000 fff9 	bl	80085a2 <SDIO_ReadFIFO>
 80075b0:	4603      	mov	r3, r0
 80075b2:	6023      	str	r3, [r4, #0]
      index++;
 80075b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b6:	3301      	adds	r3, #1
 80075b8:	637b      	str	r3, [r7, #52]	; 0x34
 80075ba:	e006      	b.n	80075ca <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d012      	beq.n	80075f0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80075ca:	f7fb f9d3 	bl	8002974 <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d8:	d102      	bne.n	80075e0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80075da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80075de:	e05a      	b.n	8007696 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d0cf      	beq.n	800758e <SD_FindSCR+0x96>
 80075ee:	e000      	b.n	80075f2 <SD_FindSCR+0xfa>
      break;
 80075f0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f8:	f003 0308 	and.w	r3, r3, #8
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d005      	beq.n	800760c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2208      	movs	r2, #8
 8007606:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007608:	2308      	movs	r3, #8
 800760a:	e044      	b.n	8007696 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007612:	f003 0302 	and.w	r3, r3, #2
 8007616:	2b00      	cmp	r3, #0
 8007618:	d005      	beq.n	8007626 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2202      	movs	r2, #2
 8007620:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007622:	2302      	movs	r3, #2
 8007624:	e037      	b.n	8007696 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800762c:	f003 0320 	and.w	r3, r3, #32
 8007630:	2b00      	cmp	r3, #0
 8007632:	d005      	beq.n	8007640 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2220      	movs	r2, #32
 800763a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800763c:	2320      	movs	r3, #32
 800763e:	e02a      	b.n	8007696 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f240 523a 	movw	r2, #1338	; 0x53a
 8007648:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	061a      	lsls	r2, r3, #24
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	021b      	lsls	r3, r3, #8
 8007652:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007656:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	0a1b      	lsrs	r3, r3, #8
 800765c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007660:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	0e1b      	lsrs	r3, r3, #24
 8007666:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766a:	601a      	str	r2, [r3, #0]
    scr++;
 800766c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766e:	3304      	adds	r3, #4
 8007670:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	061a      	lsls	r2, r3, #24
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	021b      	lsls	r3, r3, #8
 800767a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800767e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	0a1b      	lsrs	r3, r3, #8
 8007684:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007688:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	0e1b      	lsrs	r3, r3, #24
 800768e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007692:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	373c      	adds	r7, #60	; 0x3c
 800769a:	46bd      	mov	sp, r7
 800769c:	bd90      	pop	{r4, r7, pc}

0800769e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b086      	sub	sp, #24
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076aa:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d03f      	beq.n	8007738 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80076b8:	2300      	movs	r3, #0
 80076ba:	617b      	str	r3, [r7, #20]
 80076bc:	e033      	b.n	8007726 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f000 ff6d 	bl	80085a2 <SDIO_ReadFIFO>
 80076c8:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	3301      	adds	r3, #1
 80076d6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	3b01      	subs	r3, #1
 80076dc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	0a1b      	lsrs	r3, r3, #8
 80076e2:	b2da      	uxtb	r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	3301      	adds	r3, #1
 80076ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	3b01      	subs	r3, #1
 80076f2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	0c1b      	lsrs	r3, r3, #16
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	3301      	adds	r3, #1
 8007702:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	3b01      	subs	r3, #1
 8007708:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	0e1b      	lsrs	r3, r3, #24
 800770e:	b2da      	uxtb	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	3301      	adds	r3, #1
 8007718:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	3b01      	subs	r3, #1
 800771e:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	3301      	adds	r3, #1
 8007724:	617b      	str	r3, [r7, #20]
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	2b07      	cmp	r3, #7
 800772a:	d9c8      	bls.n	80076be <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007738:	bf00      	nop
 800773a:	3718      	adds	r7, #24
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a1b      	ldr	r3, [r3, #32]
 800774c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007752:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d043      	beq.n	80077e2 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800775a:	2300      	movs	r3, #0
 800775c:	617b      	str	r3, [r7, #20]
 800775e:	e037      	b.n	80077d0 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	3301      	adds	r3, #1
 800776a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	3b01      	subs	r3, #1
 8007770:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	021a      	lsls	r2, r3, #8
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	4313      	orrs	r3, r2
 800777c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	3301      	adds	r3, #1
 8007782:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	3b01      	subs	r3, #1
 8007788:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	041a      	lsls	r2, r3, #16
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	4313      	orrs	r3, r2
 8007794:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	3301      	adds	r3, #1
 800779a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	3b01      	subs	r3, #1
 80077a0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	061a      	lsls	r2, r3, #24
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	60bb      	str	r3, [r7, #8]
      tmp++;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3301      	adds	r3, #1
 80077b2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	3b01      	subs	r3, #1
 80077b8:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f107 0208 	add.w	r2, r7, #8
 80077c2:	4611      	mov	r1, r2
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 fef9 	bl	80085bc <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	3301      	adds	r3, #1
 80077ce:	617b      	str	r3, [r7, #20]
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2b07      	cmp	r3, #7
 80077d4:	d9c4      	bls.n	8007760 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80077e2:	bf00      	nop
 80077e4:	3718      	adds	r7, #24
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b082      	sub	sp, #8
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e07b      	b.n	80078f4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007800:	2b00      	cmp	r3, #0
 8007802:	d108      	bne.n	8007816 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800780c:	d009      	beq.n	8007822 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	61da      	str	r2, [r3, #28]
 8007814:	e005      	b.n	8007822 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b00      	cmp	r3, #0
 8007832:	d106      	bne.n	8007842 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f7fa fe3b 	bl	80024b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2202      	movs	r2, #2
 8007846:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007858:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800786a:	431a      	orrs	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007874:	431a      	orrs	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	431a      	orrs	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	f003 0301 	and.w	r3, r3, #1
 8007888:	431a      	orrs	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007892:	431a      	orrs	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	69db      	ldr	r3, [r3, #28]
 8007898:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800789c:	431a      	orrs	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a6:	ea42 0103 	orr.w	r1, r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	0c1b      	lsrs	r3, r3, #16
 80078c0:	f003 0104 	and.w	r1, r3, #4
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c8:	f003 0210 	and.w	r2, r3, #16
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	430a      	orrs	r2, r1
 80078d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	69da      	ldr	r2, [r3, #28]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b088      	sub	sp, #32
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	603b      	str	r3, [r7, #0]
 8007908:	4613      	mov	r3, r2
 800790a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800790c:	2300      	movs	r3, #0
 800790e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007916:	2b01      	cmp	r3, #1
 8007918:	d101      	bne.n	800791e <HAL_SPI_Transmit+0x22>
 800791a:	2302      	movs	r3, #2
 800791c:	e126      	b.n	8007b6c <HAL_SPI_Transmit+0x270>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007926:	f7fb f825 	bl	8002974 <HAL_GetTick>
 800792a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800792c:	88fb      	ldrh	r3, [r7, #6]
 800792e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007936:	b2db      	uxtb	r3, r3
 8007938:	2b01      	cmp	r3, #1
 800793a:	d002      	beq.n	8007942 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800793c:	2302      	movs	r3, #2
 800793e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007940:	e10b      	b.n	8007b5a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <HAL_SPI_Transmit+0x52>
 8007948:	88fb      	ldrh	r3, [r7, #6]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d102      	bne.n	8007954 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007952:	e102      	b.n	8007b5a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2203      	movs	r2, #3
 8007958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2200      	movs	r2, #0
 8007960:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	88fa      	ldrh	r2, [r7, #6]
 800796c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	88fa      	ldrh	r2, [r7, #6]
 8007972:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800799a:	d10f      	bne.n	80079bc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c6:	2b40      	cmp	r3, #64	; 0x40
 80079c8:	d007      	beq.n	80079da <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079e2:	d14b      	bne.n	8007a7c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <HAL_SPI_Transmit+0xf6>
 80079ec:	8afb      	ldrh	r3, [r7, #22]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d13e      	bne.n	8007a70 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f6:	881a      	ldrh	r2, [r3, #0]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a02:	1c9a      	adds	r2, r3, #2
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a16:	e02b      	b.n	8007a70 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f003 0302 	and.w	r3, r3, #2
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d112      	bne.n	8007a4c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2a:	881a      	ldrh	r2, [r3, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a36:	1c9a      	adds	r2, r3, #2
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	3b01      	subs	r3, #1
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a4a:	e011      	b.n	8007a70 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a4c:	f7fa ff92 	bl	8002974 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d803      	bhi.n	8007a64 <HAL_SPI_Transmit+0x168>
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a62:	d102      	bne.n	8007a6a <HAL_SPI_Transmit+0x16e>
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d102      	bne.n	8007a70 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a6e:	e074      	b.n	8007b5a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1ce      	bne.n	8007a18 <HAL_SPI_Transmit+0x11c>
 8007a7a:	e04c      	b.n	8007b16 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <HAL_SPI_Transmit+0x18e>
 8007a84:	8afb      	ldrh	r3, [r7, #22]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d140      	bne.n	8007b0c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	330c      	adds	r3, #12
 8007a94:	7812      	ldrb	r2, [r2, #0]
 8007a96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007ab0:	e02c      	b.n	8007b0c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	f003 0302 	and.w	r3, r3, #2
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d113      	bne.n	8007ae8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	330c      	adds	r3, #12
 8007aca:	7812      	ldrb	r2, [r2, #0]
 8007acc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad2:	1c5a      	adds	r2, r3, #1
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	86da      	strh	r2, [r3, #54]	; 0x36
 8007ae6:	e011      	b.n	8007b0c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ae8:	f7fa ff44 	bl	8002974 <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d803      	bhi.n	8007b00 <HAL_SPI_Transmit+0x204>
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afe:	d102      	bne.n	8007b06 <HAL_SPI_Transmit+0x20a>
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d102      	bne.n	8007b0c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007b0a:	e026      	b.n	8007b5a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1cd      	bne.n	8007ab2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b16:	69ba      	ldr	r2, [r7, #24]
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f000 fa54 	bl	8007fc8 <SPI_EndRxTxTransaction>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d002      	beq.n	8007b2c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2220      	movs	r2, #32
 8007b2a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10a      	bne.n	8007b4a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b34:	2300      	movs	r3, #0
 8007b36:	613b      	str	r3, [r7, #16]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	613b      	str	r3, [r7, #16]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	613b      	str	r3, [r7, #16]
 8007b48:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d002      	beq.n	8007b58 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	77fb      	strb	r3, [r7, #31]
 8007b56:	e000      	b.n	8007b5a <HAL_SPI_Transmit+0x25e>
  }

error:
 8007b58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3720      	adds	r7, #32
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b08c      	sub	sp, #48	; 0x30
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
 8007b80:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b82:	2301      	movs	r3, #1
 8007b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b86:	2300      	movs	r3, #0
 8007b88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d101      	bne.n	8007b9a <HAL_SPI_TransmitReceive+0x26>
 8007b96:	2302      	movs	r3, #2
 8007b98:	e18a      	b.n	8007eb0 <HAL_SPI_TransmitReceive+0x33c>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ba2:	f7fa fee7 	bl	8002974 <HAL_GetTick>
 8007ba6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007bb8:	887b      	ldrh	r3, [r7, #2]
 8007bba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d00f      	beq.n	8007be4 <HAL_SPI_TransmitReceive+0x70>
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bca:	d107      	bne.n	8007bdc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d103      	bne.n	8007bdc <HAL_SPI_TransmitReceive+0x68>
 8007bd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bd8:	2b04      	cmp	r3, #4
 8007bda:	d003      	beq.n	8007be4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007bdc:	2302      	movs	r3, #2
 8007bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007be2:	e15b      	b.n	8007e9c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d005      	beq.n	8007bf6 <HAL_SPI_TransmitReceive+0x82>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d002      	beq.n	8007bf6 <HAL_SPI_TransmitReceive+0x82>
 8007bf0:	887b      	ldrh	r3, [r7, #2]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d103      	bne.n	8007bfe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007bfc:	e14e      	b.n	8007e9c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b04      	cmp	r3, #4
 8007c08:	d003      	beq.n	8007c12 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2205      	movs	r2, #5
 8007c0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	887a      	ldrh	r2, [r7, #2]
 8007c22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	887a      	ldrh	r2, [r7, #2]
 8007c28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	887a      	ldrh	r2, [r7, #2]
 8007c34:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	887a      	ldrh	r2, [r7, #2]
 8007c3a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c52:	2b40      	cmp	r3, #64	; 0x40
 8007c54:	d007      	beq.n	8007c66 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c6e:	d178      	bne.n	8007d62 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d002      	beq.n	8007c7e <HAL_SPI_TransmitReceive+0x10a>
 8007c78:	8b7b      	ldrh	r3, [r7, #26]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d166      	bne.n	8007d4c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c82:	881a      	ldrh	r2, [r3, #0]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8e:	1c9a      	adds	r2, r3, #2
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ca2:	e053      	b.n	8007d4c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f003 0302 	and.w	r3, r3, #2
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d11b      	bne.n	8007cea <HAL_SPI_TransmitReceive+0x176>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d016      	beq.n	8007cea <HAL_SPI_TransmitReceive+0x176>
 8007cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d113      	bne.n	8007cea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc6:	881a      	ldrh	r2, [r3, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd2:	1c9a      	adds	r2, r3, #2
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d119      	bne.n	8007d2c <HAL_SPI_TransmitReceive+0x1b8>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d014      	beq.n	8007d2c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68da      	ldr	r2, [r3, #12]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0c:	b292      	uxth	r2, r2
 8007d0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d14:	1c9a      	adds	r2, r3, #2
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	3b01      	subs	r3, #1
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d2c:	f7fa fe22 	bl	8002974 <HAL_GetTick>
 8007d30:	4602      	mov	r2, r0
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d807      	bhi.n	8007d4c <HAL_SPI_TransmitReceive+0x1d8>
 8007d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d42:	d003      	beq.n	8007d4c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007d44:	2303      	movs	r3, #3
 8007d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007d4a:	e0a7      	b.n	8007e9c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1a6      	bne.n	8007ca4 <HAL_SPI_TransmitReceive+0x130>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1a1      	bne.n	8007ca4 <HAL_SPI_TransmitReceive+0x130>
 8007d60:	e07c      	b.n	8007e5c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d002      	beq.n	8007d70 <HAL_SPI_TransmitReceive+0x1fc>
 8007d6a:	8b7b      	ldrh	r3, [r7, #26]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d16b      	bne.n	8007e48 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	330c      	adds	r3, #12
 8007d7a:	7812      	ldrb	r2, [r2, #0]
 8007d7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d82:	1c5a      	adds	r2, r3, #1
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d96:	e057      	b.n	8007e48 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	f003 0302 	and.w	r3, r3, #2
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d11c      	bne.n	8007de0 <HAL_SPI_TransmitReceive+0x26c>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d017      	beq.n	8007de0 <HAL_SPI_TransmitReceive+0x26c>
 8007db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d114      	bne.n	8007de0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	330c      	adds	r3, #12
 8007dc0:	7812      	ldrb	r2, [r2, #0]
 8007dc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc8:	1c5a      	adds	r2, r3, #1
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f003 0301 	and.w	r3, r3, #1
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d119      	bne.n	8007e22 <HAL_SPI_TransmitReceive+0x2ae>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d014      	beq.n	8007e22 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68da      	ldr	r2, [r3, #12]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e02:	b2d2      	uxtb	r2, r2
 8007e04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0a:	1c5a      	adds	r2, r3, #1
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	3b01      	subs	r3, #1
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007e22:	f7fa fda7 	bl	8002974 <HAL_GetTick>
 8007e26:	4602      	mov	r2, r0
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d803      	bhi.n	8007e3a <HAL_SPI_TransmitReceive+0x2c6>
 8007e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e38:	d102      	bne.n	8007e40 <HAL_SPI_TransmitReceive+0x2cc>
 8007e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d103      	bne.n	8007e48 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007e40:	2303      	movs	r3, #3
 8007e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007e46:	e029      	b.n	8007e9c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1a2      	bne.n	8007d98 <HAL_SPI_TransmitReceive+0x224>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d19d      	bne.n	8007d98 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f000 f8b1 	bl	8007fc8 <SPI_EndRxTxTransaction>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d006      	beq.n	8007e7a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2220      	movs	r2, #32
 8007e76:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007e78:	e010      	b.n	8007e9c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10b      	bne.n	8007e9a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e82:	2300      	movs	r3, #0
 8007e84:	617b      	str	r3, [r7, #20]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	617b      	str	r3, [r7, #20]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	617b      	str	r3, [r7, #20]
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	e000      	b.n	8007e9c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007e9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007eac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3730      	adds	r7, #48	; 0x30
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b088      	sub	sp, #32
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	603b      	str	r3, [r7, #0]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ec8:	f7fa fd54 	bl	8002974 <HAL_GetTick>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed0:	1a9b      	subs	r3, r3, r2
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ed8:	f7fa fd4c 	bl	8002974 <HAL_GetTick>
 8007edc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007ede:	4b39      	ldr	r3, [pc, #228]	; (8007fc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	015b      	lsls	r3, r3, #5
 8007ee4:	0d1b      	lsrs	r3, r3, #20
 8007ee6:	69fa      	ldr	r2, [r7, #28]
 8007ee8:	fb02 f303 	mul.w	r3, r2, r3
 8007eec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007eee:	e054      	b.n	8007f9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef6:	d050      	beq.n	8007f9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ef8:	f7fa fd3c 	bl	8002974 <HAL_GetTick>
 8007efc:	4602      	mov	r2, r0
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	69fa      	ldr	r2, [r7, #28]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d902      	bls.n	8007f0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d13d      	bne.n	8007f8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	685a      	ldr	r2, [r3, #4]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f26:	d111      	bne.n	8007f4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f30:	d004      	beq.n	8007f3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f3a:	d107      	bne.n	8007f4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f54:	d10f      	bne.n	8007f76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f64:	601a      	str	r2, [r3, #0]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007f86:	2303      	movs	r3, #3
 8007f88:	e017      	b.n	8007fba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f90:	2300      	movs	r3, #0
 8007f92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	3b01      	subs	r3, #1
 8007f98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	689a      	ldr	r2, [r3, #8]
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	bf0c      	ite	eq
 8007faa:	2301      	moveq	r3, #1
 8007fac:	2300      	movne	r3, #0
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	79fb      	ldrb	r3, [r7, #7]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d19b      	bne.n	8007ef0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3720      	adds	r7, #32
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	20000000 	.word	0x20000000

08007fc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b088      	sub	sp, #32
 8007fcc:	af02      	add	r7, sp, #8
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007fd4:	4b1b      	ldr	r3, [pc, #108]	; (8008044 <SPI_EndRxTxTransaction+0x7c>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a1b      	ldr	r2, [pc, #108]	; (8008048 <SPI_EndRxTxTransaction+0x80>)
 8007fda:	fba2 2303 	umull	r2, r3, r2, r3
 8007fde:	0d5b      	lsrs	r3, r3, #21
 8007fe0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007fe4:	fb02 f303 	mul.w	r3, r2, r3
 8007fe8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ff2:	d112      	bne.n	800801a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	9300      	str	r3, [sp, #0]
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	2180      	movs	r1, #128	; 0x80
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f7ff ff5a 	bl	8007eb8 <SPI_WaitFlagStateUntilTimeout>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d016      	beq.n	8008038 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800800e:	f043 0220 	orr.w	r2, r3, #32
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e00f      	b.n	800803a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00a      	beq.n	8008036 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	3b01      	subs	r3, #1
 8008024:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008030:	2b80      	cmp	r3, #128	; 0x80
 8008032:	d0f2      	beq.n	800801a <SPI_EndRxTxTransaction+0x52>
 8008034:	e000      	b.n	8008038 <SPI_EndRxTxTransaction+0x70>
        break;
 8008036:	bf00      	nop
  }

  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3718      	adds	r7, #24
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	20000000 	.word	0x20000000
 8008048:	165e9f81 	.word	0x165e9f81

0800804c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d101      	bne.n	800805e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e041      	b.n	80080e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d106      	bne.n	8008078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7fa fa88 	bl	8002588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2202      	movs	r2, #2
 800807c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	3304      	adds	r3, #4
 8008088:	4619      	mov	r1, r3
 800808a:	4610      	mov	r0, r2
 800808c:	f000 f9ca 	bl	8008424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
	...

080080ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d001      	beq.n	8008104 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	e044      	b.n	800818e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2202      	movs	r2, #2
 8008108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68da      	ldr	r2, [r3, #12]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f042 0201 	orr.w	r2, r2, #1
 800811a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a1e      	ldr	r2, [pc, #120]	; (800819c <HAL_TIM_Base_Start_IT+0xb0>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d018      	beq.n	8008158 <HAL_TIM_Base_Start_IT+0x6c>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800812e:	d013      	beq.n	8008158 <HAL_TIM_Base_Start_IT+0x6c>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a1a      	ldr	r2, [pc, #104]	; (80081a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d00e      	beq.n	8008158 <HAL_TIM_Base_Start_IT+0x6c>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a19      	ldr	r2, [pc, #100]	; (80081a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d009      	beq.n	8008158 <HAL_TIM_Base_Start_IT+0x6c>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a17      	ldr	r2, [pc, #92]	; (80081a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d004      	beq.n	8008158 <HAL_TIM_Base_Start_IT+0x6c>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a16      	ldr	r2, [pc, #88]	; (80081ac <HAL_TIM_Base_Start_IT+0xc0>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d111      	bne.n	800817c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	f003 0307 	and.w	r3, r3, #7
 8008162:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2b06      	cmp	r3, #6
 8008168:	d010      	beq.n	800818c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f042 0201 	orr.w	r2, r2, #1
 8008178:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800817a:	e007      	b.n	800818c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f042 0201 	orr.w	r2, r2, #1
 800818a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	40010000 	.word	0x40010000
 80081a0:	40000400 	.word	0x40000400
 80081a4:	40000800 	.word	0x40000800
 80081a8:	40000c00 	.word	0x40000c00
 80081ac:	40014000 	.word	0x40014000

080081b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	f003 0302 	and.w	r3, r3, #2
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	d122      	bne.n	800820c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	f003 0302 	and.w	r3, r3, #2
 80081d0:	2b02      	cmp	r3, #2
 80081d2:	d11b      	bne.n	800820c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f06f 0202 	mvn.w	r2, #2
 80081dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2201      	movs	r2, #1
 80081e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	f003 0303 	and.w	r3, r3, #3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f8f8 	bl	80083e8 <HAL_TIM_IC_CaptureCallback>
 80081f8:	e005      	b.n	8008206 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f8ea 	bl	80083d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f8fb 	bl	80083fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	f003 0304 	and.w	r3, r3, #4
 8008216:	2b04      	cmp	r3, #4
 8008218:	d122      	bne.n	8008260 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	f003 0304 	and.w	r3, r3, #4
 8008224:	2b04      	cmp	r3, #4
 8008226:	d11b      	bne.n	8008260 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f06f 0204 	mvn.w	r2, #4
 8008230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2202      	movs	r2, #2
 8008236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	699b      	ldr	r3, [r3, #24]
 800823e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008242:	2b00      	cmp	r3, #0
 8008244:	d003      	beq.n	800824e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f8ce 	bl	80083e8 <HAL_TIM_IC_CaptureCallback>
 800824c:	e005      	b.n	800825a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 f8c0 	bl	80083d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f8d1 	bl	80083fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	f003 0308 	and.w	r3, r3, #8
 800826a:	2b08      	cmp	r3, #8
 800826c:	d122      	bne.n	80082b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	f003 0308 	and.w	r3, r3, #8
 8008278:	2b08      	cmp	r3, #8
 800827a:	d11b      	bne.n	80082b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f06f 0208 	mvn.w	r2, #8
 8008284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2204      	movs	r2, #4
 800828a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	69db      	ldr	r3, [r3, #28]
 8008292:	f003 0303 	and.w	r3, r3, #3
 8008296:	2b00      	cmp	r3, #0
 8008298:	d003      	beq.n	80082a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f8a4 	bl	80083e8 <HAL_TIM_IC_CaptureCallback>
 80082a0:	e005      	b.n	80082ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f896 	bl	80083d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f8a7 	bl	80083fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	f003 0310 	and.w	r3, r3, #16
 80082be:	2b10      	cmp	r3, #16
 80082c0:	d122      	bne.n	8008308 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	f003 0310 	and.w	r3, r3, #16
 80082cc:	2b10      	cmp	r3, #16
 80082ce:	d11b      	bne.n	8008308 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f06f 0210 	mvn.w	r2, #16
 80082d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2208      	movs	r2, #8
 80082de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f87a 	bl	80083e8 <HAL_TIM_IC_CaptureCallback>
 80082f4:	e005      	b.n	8008302 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f86c 	bl	80083d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f87d 	bl	80083fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	f003 0301 	and.w	r3, r3, #1
 8008312:	2b01      	cmp	r3, #1
 8008314:	d10e      	bne.n	8008334 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	f003 0301 	and.w	r3, r3, #1
 8008320:	2b01      	cmp	r3, #1
 8008322:	d107      	bne.n	8008334 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f06f 0201 	mvn.w	r2, #1
 800832c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f846 	bl	80083c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800833e:	2b80      	cmp	r3, #128	; 0x80
 8008340:	d10e      	bne.n	8008360 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800834c:	2b80      	cmp	r3, #128	; 0x80
 800834e:	d107      	bne.n	8008360 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f8ec 	bl	8008538 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800836a:	2b40      	cmp	r3, #64	; 0x40
 800836c:	d10e      	bne.n	800838c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008378:	2b40      	cmp	r3, #64	; 0x40
 800837a:	d107      	bne.n	800838c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f842 	bl	8008410 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	f003 0320 	and.w	r3, r3, #32
 8008396:	2b20      	cmp	r3, #32
 8008398:	d10e      	bne.n	80083b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	f003 0320 	and.w	r3, r3, #32
 80083a4:	2b20      	cmp	r3, #32
 80083a6:	d107      	bne.n	80083b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f06f 0220 	mvn.w	r2, #32
 80083b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f8b6 	bl	8008524 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083b8:	bf00      	nop
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80083c8:	bf00      	nop
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008404:	bf00      	nop
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008418:	bf00      	nop
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a34      	ldr	r2, [pc, #208]	; (8008508 <TIM_Base_SetConfig+0xe4>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d00f      	beq.n	800845c <TIM_Base_SetConfig+0x38>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008442:	d00b      	beq.n	800845c <TIM_Base_SetConfig+0x38>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4a31      	ldr	r2, [pc, #196]	; (800850c <TIM_Base_SetConfig+0xe8>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d007      	beq.n	800845c <TIM_Base_SetConfig+0x38>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a30      	ldr	r2, [pc, #192]	; (8008510 <TIM_Base_SetConfig+0xec>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d003      	beq.n	800845c <TIM_Base_SetConfig+0x38>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a2f      	ldr	r2, [pc, #188]	; (8008514 <TIM_Base_SetConfig+0xf0>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d108      	bne.n	800846e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	4313      	orrs	r3, r2
 800846c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a25      	ldr	r2, [pc, #148]	; (8008508 <TIM_Base_SetConfig+0xe4>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d01b      	beq.n	80084ae <TIM_Base_SetConfig+0x8a>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800847c:	d017      	beq.n	80084ae <TIM_Base_SetConfig+0x8a>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a22      	ldr	r2, [pc, #136]	; (800850c <TIM_Base_SetConfig+0xe8>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d013      	beq.n	80084ae <TIM_Base_SetConfig+0x8a>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a21      	ldr	r2, [pc, #132]	; (8008510 <TIM_Base_SetConfig+0xec>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d00f      	beq.n	80084ae <TIM_Base_SetConfig+0x8a>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a20      	ldr	r2, [pc, #128]	; (8008514 <TIM_Base_SetConfig+0xf0>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d00b      	beq.n	80084ae <TIM_Base_SetConfig+0x8a>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a1f      	ldr	r2, [pc, #124]	; (8008518 <TIM_Base_SetConfig+0xf4>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d007      	beq.n	80084ae <TIM_Base_SetConfig+0x8a>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a1e      	ldr	r2, [pc, #120]	; (800851c <TIM_Base_SetConfig+0xf8>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d003      	beq.n	80084ae <TIM_Base_SetConfig+0x8a>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a1d      	ldr	r2, [pc, #116]	; (8008520 <TIM_Base_SetConfig+0xfc>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d108      	bne.n	80084c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	4313      	orrs	r3, r2
 80084be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	689a      	ldr	r2, [r3, #8]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a08      	ldr	r2, [pc, #32]	; (8008508 <TIM_Base_SetConfig+0xe4>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d103      	bne.n	80084f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	691a      	ldr	r2, [r3, #16]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	615a      	str	r2, [r3, #20]
}
 80084fa:	bf00      	nop
 80084fc:	3714      	adds	r7, #20
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop
 8008508:	40010000 	.word	0x40010000
 800850c:	40000400 	.word	0x40000400
 8008510:	40000800 	.word	0x40000800
 8008514:	40000c00 	.word	0x40000c00
 8008518:	40014000 	.word	0x40014000
 800851c:	40014400 	.word	0x40014400
 8008520:	40014800 	.word	0x40014800

08008524 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800854c:	b084      	sub	sp, #16
 800854e:	b480      	push	{r7}
 8008550:	b085      	sub	sp, #20
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	f107 001c 	add.w	r0, r7, #28
 800855a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800855e:	2300      	movs	r3, #0
 8008560:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008562:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008564:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008566:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800856a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800856c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800856e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008572:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008576:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	4313      	orrs	r3, r2
 800857c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008586:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	431a      	orrs	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	b004      	add	sp, #16
 80085a0:	4770      	bx	lr

080085a2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b083      	sub	sp, #12
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	370c      	adds	r7, #12
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80085de:	b580      	push	{r7, lr}
 80085e0:	b082      	sub	sp, #8
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2203      	movs	r2, #3
 80085ea:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80085ec:	2002      	movs	r0, #2
 80085ee:	f7fa f9cd 	bl	800298c <HAL_Delay>
  
  return HAL_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0303 	and.w	r3, r3, #3
}
 800860c:	4618      	mov	r0, r3
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008622:	2300      	movs	r3, #0
 8008624:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008636:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800863c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008642:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	4313      	orrs	r3, r2
 8008648:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008652:	f023 030f 	bic.w	r3, r3, #15
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	431a      	orrs	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	3714      	adds	r7, #20
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	b2db      	uxtb	r3, r3
}
 800867a:	4618      	mov	r0, r3
 800867c:	370c      	adds	r7, #12
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr

08008686 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008686:	b480      	push	{r7}
 8008688:	b085      	sub	sp, #20
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	3314      	adds	r3, #20
 8008694:	461a      	mov	r2, r3
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	4413      	add	r3, r2
 800869a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
}  
 80086a0:	4618      	mov	r0, r3
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80086b6:	2300      	movs	r3, #0
 80086b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	685a      	ldr	r2, [r3, #4]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80086d2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80086d8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80086de:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ea:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	431a      	orrs	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80086f6:	2300      	movs	r3, #0

}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3714      	adds	r7, #20
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b088      	sub	sp, #32
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008712:	2310      	movs	r3, #16
 8008714:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008716:	2340      	movs	r3, #64	; 0x40
 8008718:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800871a:	2300      	movs	r3, #0
 800871c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800871e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008722:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008724:	f107 0308 	add.w	r3, r7, #8
 8008728:	4619      	mov	r1, r3
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f7ff ff74 	bl	8008618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008730:	f241 3288 	movw	r2, #5000	; 0x1388
 8008734:	2110      	movs	r1, #16
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fa44 	bl	8008bc4 <SDMMC_GetCmdResp1>
 800873c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800873e:	69fb      	ldr	r3, [r7, #28]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3720      	adds	r7, #32
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b088      	sub	sp, #32
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008756:	2311      	movs	r3, #17
 8008758:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800875a:	2340      	movs	r3, #64	; 0x40
 800875c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800875e:	2300      	movs	r3, #0
 8008760:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008766:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008768:	f107 0308 	add.w	r3, r7, #8
 800876c:	4619      	mov	r1, r3
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7ff ff52 	bl	8008618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008774:	f241 3288 	movw	r2, #5000	; 0x1388
 8008778:	2111      	movs	r1, #17
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fa22 	bl	8008bc4 <SDMMC_GetCmdResp1>
 8008780:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008782:	69fb      	ldr	r3, [r7, #28]
}
 8008784:	4618      	mov	r0, r3
 8008786:	3720      	adds	r7, #32
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b088      	sub	sp, #32
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800879a:	2312      	movs	r3, #18
 800879c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800879e:	2340      	movs	r3, #64	; 0x40
 80087a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087a2:	2300      	movs	r3, #0
 80087a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80087a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80087ac:	f107 0308 	add.w	r3, r7, #8
 80087b0:	4619      	mov	r1, r3
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f7ff ff30 	bl	8008618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80087b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80087bc:	2112      	movs	r1, #18
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fa00 	bl	8008bc4 <SDMMC_GetCmdResp1>
 80087c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087c6:	69fb      	ldr	r3, [r7, #28]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3720      	adds	r7, #32
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b088      	sub	sp, #32
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80087de:	2318      	movs	r3, #24
 80087e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80087e2:	2340      	movs	r3, #64	; 0x40
 80087e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087e6:	2300      	movs	r3, #0
 80087e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80087ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80087f0:	f107 0308 	add.w	r3, r7, #8
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7ff ff0e 	bl	8008618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80087fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008800:	2118      	movs	r1, #24
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f9de 	bl	8008bc4 <SDMMC_GetCmdResp1>
 8008808:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800880a:	69fb      	ldr	r3, [r7, #28]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3720      	adds	r7, #32
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b088      	sub	sp, #32
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008822:	2319      	movs	r3, #25
 8008824:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008826:	2340      	movs	r3, #64	; 0x40
 8008828:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800882a:	2300      	movs	r3, #0
 800882c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800882e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008832:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008834:	f107 0308 	add.w	r3, r7, #8
 8008838:	4619      	mov	r1, r3
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7ff feec 	bl	8008618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008840:	f241 3288 	movw	r2, #5000	; 0x1388
 8008844:	2119      	movs	r1, #25
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 f9bc 	bl	8008bc4 <SDMMC_GetCmdResp1>
 800884c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800884e:	69fb      	ldr	r3, [r7, #28]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3720      	adds	r7, #32
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b088      	sub	sp, #32
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008860:	2300      	movs	r3, #0
 8008862:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008864:	230c      	movs	r3, #12
 8008866:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008868:	2340      	movs	r3, #64	; 0x40
 800886a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800886c:	2300      	movs	r3, #0
 800886e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008874:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008876:	f107 0308 	add.w	r3, r7, #8
 800887a:	4619      	mov	r1, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7ff fecb 	bl	8008618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008882:	4a05      	ldr	r2, [pc, #20]	; (8008898 <SDMMC_CmdStopTransfer+0x40>)
 8008884:	210c      	movs	r1, #12
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 f99c 	bl	8008bc4 <SDMMC_GetCmdResp1>
 800888c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800888e:	69fb      	ldr	r3, [r7, #28]
}
 8008890:	4618      	mov	r0, r3
 8008892:	3720      	adds	r7, #32
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	05f5e100 	.word	0x05f5e100

0800889c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b08a      	sub	sp, #40	; 0x28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80088ac:	2307      	movs	r3, #7
 80088ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80088b0:	2340      	movs	r3, #64	; 0x40
 80088b2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80088b4:	2300      	movs	r3, #0
 80088b6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80088b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088bc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80088be:	f107 0310 	add.w	r3, r7, #16
 80088c2:	4619      	mov	r1, r3
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f7ff fea7 	bl	8008618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80088ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80088ce:	2107      	movs	r1, #7
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f000 f977 	bl	8008bc4 <SDMMC_GetCmdResp1>
 80088d6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80088d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3728      	adds	r7, #40	; 0x28
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b088      	sub	sp, #32
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80088ea:	2300      	movs	r3, #0
 80088ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80088ee:	2300      	movs	r3, #0
 80088f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80088f2:	2300      	movs	r3, #0
 80088f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80088f6:	2300      	movs	r3, #0
 80088f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80088fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008900:	f107 0308 	add.w	r3, r7, #8
 8008904:	4619      	mov	r1, r3
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f7ff fe86 	bl	8008618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f92d 	bl	8008b6c <SDMMC_GetCmdError>
 8008912:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008914:	69fb      	ldr	r3, [r7, #28]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3720      	adds	r7, #32
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b088      	sub	sp, #32
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008926:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800892a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800892c:	2308      	movs	r3, #8
 800892e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008930:	2340      	movs	r3, #64	; 0x40
 8008932:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008934:	2300      	movs	r3, #0
 8008936:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800893c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800893e:	f107 0308 	add.w	r3, r7, #8
 8008942:	4619      	mov	r1, r3
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f7ff fe67 	bl	8008618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fb24 	bl	8008f98 <SDMMC_GetCmdResp7>
 8008950:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008952:	69fb      	ldr	r3, [r7, #28]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3720      	adds	r7, #32
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b088      	sub	sp, #32
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800896a:	2337      	movs	r3, #55	; 0x37
 800896c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800896e:	2340      	movs	r3, #64	; 0x40
 8008970:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008972:	2300      	movs	r3, #0
 8008974:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800897a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800897c:	f107 0308 	add.w	r3, r7, #8
 8008980:	4619      	mov	r1, r3
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7ff fe48 	bl	8008618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008988:	f241 3288 	movw	r2, #5000	; 0x1388
 800898c:	2137      	movs	r1, #55	; 0x37
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f918 	bl	8008bc4 <SDMMC_GetCmdResp1>
 8008994:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008996:	69fb      	ldr	r3, [r7, #28]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3720      	adds	r7, #32
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b088      	sub	sp, #32
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80089b6:	2329      	movs	r3, #41	; 0x29
 80089b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80089ba:	2340      	movs	r3, #64	; 0x40
 80089bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80089be:	2300      	movs	r3, #0
 80089c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80089c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80089c8:	f107 0308 	add.w	r3, r7, #8
 80089cc:	4619      	mov	r1, r3
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f7ff fe22 	bl	8008618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fa2b 	bl	8008e30 <SDMMC_GetCmdResp3>
 80089da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089dc:	69fb      	ldr	r3, [r7, #28]
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3720      	adds	r7, #32
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b088      	sub	sp, #32
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80089f4:	2306      	movs	r3, #6
 80089f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80089f8:	2340      	movs	r3, #64	; 0x40
 80089fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80089fc:	2300      	movs	r3, #0
 80089fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008a00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008a06:	f107 0308 	add.w	r3, r7, #8
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f7ff fe03 	bl	8008618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a16:	2106      	movs	r1, #6
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 f8d3 	bl	8008bc4 <SDMMC_GetCmdResp1>
 8008a1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a20:	69fb      	ldr	r3, [r7, #28]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3720      	adds	r7, #32
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b088      	sub	sp, #32
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008a32:	2300      	movs	r3, #0
 8008a34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008a36:	2333      	movs	r3, #51	; 0x33
 8008a38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008a3a:	2340      	movs	r3, #64	; 0x40
 8008a3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008a42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008a48:	f107 0308 	add.w	r3, r7, #8
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f7ff fde2 	bl	8008618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a58:	2133      	movs	r1, #51	; 0x33
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f8b2 	bl	8008bc4 <SDMMC_GetCmdResp1>
 8008a60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a62:	69fb      	ldr	r3, [r7, #28]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3720      	adds	r7, #32
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b088      	sub	sp, #32
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008a74:	2300      	movs	r3, #0
 8008a76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008a78:	2302      	movs	r3, #2
 8008a7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008a7c:	23c0      	movs	r3, #192	; 0xc0
 8008a7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008a80:	2300      	movs	r3, #0
 8008a82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008a8a:	f107 0308 	add.w	r3, r7, #8
 8008a8e:	4619      	mov	r1, r3
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f7ff fdc1 	bl	8008618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f982 	bl	8008da0 <SDMMC_GetCmdResp2>
 8008a9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a9e:	69fb      	ldr	r3, [r7, #28]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3720      	adds	r7, #32
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b088      	sub	sp, #32
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008ab6:	2309      	movs	r3, #9
 8008ab8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008aba:	23c0      	movs	r3, #192	; 0xc0
 8008abc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ac6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ac8:	f107 0308 	add.w	r3, r7, #8
 8008acc:	4619      	mov	r1, r3
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f7ff fda2 	bl	8008618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f963 	bl	8008da0 <SDMMC_GetCmdResp2>
 8008ada:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008adc:	69fb      	ldr	r3, [r7, #28]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3720      	adds	r7, #32
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b088      	sub	sp, #32
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
 8008aee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008af0:	2300      	movs	r3, #0
 8008af2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008af4:	2303      	movs	r3, #3
 8008af6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008af8:	2340      	movs	r3, #64	; 0x40
 8008afa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008afc:	2300      	movs	r3, #0
 8008afe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b06:	f107 0308 	add.w	r3, r7, #8
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f7ff fd83 	bl	8008618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008b12:	683a      	ldr	r2, [r7, #0]
 8008b14:	2103      	movs	r1, #3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f9c8 	bl	8008eac <SDMMC_GetCmdResp6>
 8008b1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b1e:	69fb      	ldr	r3, [r7, #28]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3720      	adds	r7, #32
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b088      	sub	sp, #32
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008b36:	230d      	movs	r3, #13
 8008b38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008b3a:	2340      	movs	r3, #64	; 0x40
 8008b3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b48:	f107 0308 	add.w	r3, r7, #8
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7ff fd62 	bl	8008618 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b58:	210d      	movs	r1, #13
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 f832 	bl	8008bc4 <SDMMC_GetCmdResp1>
 8008b60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b62:	69fb      	ldr	r3, [r7, #28]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3720      	adds	r7, #32
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b74:	4b11      	ldr	r3, [pc, #68]	; (8008bbc <SDMMC_GetCmdError+0x50>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a11      	ldr	r2, [pc, #68]	; (8008bc0 <SDMMC_GetCmdError+0x54>)
 8008b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b7e:	0a5b      	lsrs	r3, r3, #9
 8008b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b84:	fb02 f303 	mul.w	r3, r2, r3
 8008b88:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	1e5a      	subs	r2, r3, #1
 8008b8e:	60fa      	str	r2, [r7, #12]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d102      	bne.n	8008b9a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b98:	e009      	b.n	8008bae <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d0f1      	beq.n	8008b8a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	22c5      	movs	r2, #197	; 0xc5
 8008baa:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3714      	adds	r7, #20
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	20000000 	.word	0x20000000
 8008bc0:	10624dd3 	.word	0x10624dd3

08008bc4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b088      	sub	sp, #32
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	607a      	str	r2, [r7, #4]
 8008bd0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008bd2:	4b70      	ldr	r3, [pc, #448]	; (8008d94 <SDMMC_GetCmdResp1+0x1d0>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a70      	ldr	r2, [pc, #448]	; (8008d98 <SDMMC_GetCmdResp1+0x1d4>)
 8008bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8008bdc:	0a5a      	lsrs	r2, r3, #9
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	fb02 f303 	mul.w	r3, r2, r3
 8008be4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	1e5a      	subs	r2, r3, #1
 8008bea:	61fa      	str	r2, [r7, #28]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d102      	bne.n	8008bf6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008bf0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008bf4:	e0c9      	b.n	8008d8a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bfa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d0ef      	beq.n	8008be6 <SDMMC_GetCmdResp1+0x22>
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1ea      	bne.n	8008be6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c14:	f003 0304 	and.w	r3, r3, #4
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d004      	beq.n	8008c26 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2204      	movs	r2, #4
 8008c20:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c22:	2304      	movs	r3, #4
 8008c24:	e0b1      	b.n	8008d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c2a:	f003 0301 	and.w	r3, r3, #1
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d004      	beq.n	8008c3c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2201      	movs	r2, #1
 8008c36:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e0a6      	b.n	8008d8a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	22c5      	movs	r2, #197	; 0xc5
 8008c40:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f7ff fd12 	bl	800866c <SDIO_GetCommandResponse>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	7afb      	ldrb	r3, [r7, #11]
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d001      	beq.n	8008c56 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e099      	b.n	8008d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008c56:	2100      	movs	r1, #0
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f7ff fd14 	bl	8008686 <SDIO_GetResponse>
 8008c5e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008c60:	697a      	ldr	r2, [r7, #20]
 8008c62:	4b4e      	ldr	r3, [pc, #312]	; (8008d9c <SDMMC_GetCmdResp1+0x1d8>)
 8008c64:	4013      	ands	r3, r2
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d101      	bne.n	8008c6e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	e08d      	b.n	8008d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	da02      	bge.n	8008c7a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008c74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c78:	e087      	b.n	8008d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d001      	beq.n	8008c88 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008c84:	2340      	movs	r3, #64	; 0x40
 8008c86:	e080      	b.n	8008d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008c92:	2380      	movs	r3, #128	; 0x80
 8008c94:	e079      	b.n	8008d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d002      	beq.n	8008ca6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008ca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ca4:	e071      	b.n	8008d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d002      	beq.n	8008cb6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cb4:	e069      	b.n	8008d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d002      	beq.n	8008cc6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cc4:	e061      	b.n	8008d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d002      	beq.n	8008cd6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008cd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008cd4:	e059      	b.n	8008d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d002      	beq.n	8008ce6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ce4:	e051      	b.n	8008d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d002      	beq.n	8008cf6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008cf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008cf4:	e049      	b.n	8008d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008d00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008d04:	e041      	b.n	8008d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d002      	beq.n	8008d16 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008d10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d14:	e039      	b.n	8008d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d002      	beq.n	8008d26 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008d20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d24:	e031      	b.n	8008d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d002      	beq.n	8008d36 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008d30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008d34:	e029      	b.n	8008d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d002      	beq.n	8008d46 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008d40:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008d44:	e021      	b.n	8008d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d002      	beq.n	8008d56 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008d50:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d54:	e019      	b.n	8008d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d002      	beq.n	8008d66 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008d60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008d64:	e011      	b.n	8008d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d002      	beq.n	8008d76 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008d70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008d74:	e009      	b.n	8008d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	f003 0308 	and.w	r3, r3, #8
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d002      	beq.n	8008d86 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008d80:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008d84:	e001      	b.n	8008d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008d86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3720      	adds	r7, #32
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	20000000 	.word	0x20000000
 8008d98:	10624dd3 	.word	0x10624dd3
 8008d9c:	fdffe008 	.word	0xfdffe008

08008da0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008da8:	4b1f      	ldr	r3, [pc, #124]	; (8008e28 <SDMMC_GetCmdResp2+0x88>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a1f      	ldr	r2, [pc, #124]	; (8008e2c <SDMMC_GetCmdResp2+0x8c>)
 8008dae:	fba2 2303 	umull	r2, r3, r2, r3
 8008db2:	0a5b      	lsrs	r3, r3, #9
 8008db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008db8:	fb02 f303 	mul.w	r3, r2, r3
 8008dbc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	1e5a      	subs	r2, r3, #1
 8008dc2:	60fa      	str	r2, [r7, #12]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d102      	bne.n	8008dce <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008dc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008dcc:	e026      	b.n	8008e1c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d0ef      	beq.n	8008dbe <SDMMC_GetCmdResp2+0x1e>
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1ea      	bne.n	8008dbe <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dec:	f003 0304 	and.w	r3, r3, #4
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d004      	beq.n	8008dfe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2204      	movs	r2, #4
 8008df8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008dfa:	2304      	movs	r3, #4
 8008dfc:	e00e      	b.n	8008e1c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e02:	f003 0301 	and.w	r3, r3, #1
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d004      	beq.n	8008e14 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e10:	2301      	movs	r3, #1
 8008e12:	e003      	b.n	8008e1c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	22c5      	movs	r2, #197	; 0xc5
 8008e18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3714      	adds	r7, #20
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr
 8008e28:	20000000 	.word	0x20000000
 8008e2c:	10624dd3 	.word	0x10624dd3

08008e30 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008e38:	4b1a      	ldr	r3, [pc, #104]	; (8008ea4 <SDMMC_GetCmdResp3+0x74>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a1a      	ldr	r2, [pc, #104]	; (8008ea8 <SDMMC_GetCmdResp3+0x78>)
 8008e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e42:	0a5b      	lsrs	r3, r3, #9
 8008e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e48:	fb02 f303 	mul.w	r3, r2, r3
 8008e4c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	1e5a      	subs	r2, r3, #1
 8008e52:	60fa      	str	r2, [r7, #12]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d102      	bne.n	8008e5e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e5c:	e01b      	b.n	8008e96 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e62:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d0ef      	beq.n	8008e4e <SDMMC_GetCmdResp3+0x1e>
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d1ea      	bne.n	8008e4e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e7c:	f003 0304 	and.w	r3, r3, #4
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d004      	beq.n	8008e8e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2204      	movs	r2, #4
 8008e88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008e8a:	2304      	movs	r3, #4
 8008e8c:	e003      	b.n	8008e96 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	22c5      	movs	r2, #197	; 0xc5
 8008e92:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3714      	adds	r7, #20
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	20000000 	.word	0x20000000
 8008ea8:	10624dd3 	.word	0x10624dd3

08008eac <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b088      	sub	sp, #32
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	607a      	str	r2, [r7, #4]
 8008eb8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008eba:	4b35      	ldr	r3, [pc, #212]	; (8008f90 <SDMMC_GetCmdResp6+0xe4>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a35      	ldr	r2, [pc, #212]	; (8008f94 <SDMMC_GetCmdResp6+0xe8>)
 8008ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ec4:	0a5b      	lsrs	r3, r3, #9
 8008ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eca:	fb02 f303 	mul.w	r3, r2, r3
 8008ece:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	1e5a      	subs	r2, r3, #1
 8008ed4:	61fa      	str	r2, [r7, #28]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d102      	bne.n	8008ee0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008eda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ede:	e052      	b.n	8008f86 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d0ef      	beq.n	8008ed0 <SDMMC_GetCmdResp6+0x24>
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1ea      	bne.n	8008ed0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008efe:	f003 0304 	and.w	r3, r3, #4
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d004      	beq.n	8008f10 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2204      	movs	r2, #4
 8008f0a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008f0c:	2304      	movs	r3, #4
 8008f0e:	e03a      	b.n	8008f86 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f14:	f003 0301 	and.w	r3, r3, #1
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d004      	beq.n	8008f26 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e02f      	b.n	8008f86 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f7ff fba0 	bl	800866c <SDIO_GetCommandResponse>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	461a      	mov	r2, r3
 8008f30:	7afb      	ldrb	r3, [r7, #11]
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d001      	beq.n	8008f3a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e025      	b.n	8008f86 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	22c5      	movs	r2, #197	; 0xc5
 8008f3e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008f40:	2100      	movs	r1, #0
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f7ff fb9f 	bl	8008686 <SDIO_GetResponse>
 8008f48:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d106      	bne.n	8008f62 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	0c1b      	lsrs	r3, r3, #16
 8008f58:	b29a      	uxth	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	e011      	b.n	8008f86 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d002      	beq.n	8008f72 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008f6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f70:	e009      	b.n	8008f86 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d002      	beq.n	8008f82 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f80:	e001      	b.n	8008f86 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008f82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3720      	adds	r7, #32
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	20000000 	.word	0x20000000
 8008f94:	10624dd3 	.word	0x10624dd3

08008f98 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008fa0:	4b22      	ldr	r3, [pc, #136]	; (800902c <SDMMC_GetCmdResp7+0x94>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a22      	ldr	r2, [pc, #136]	; (8009030 <SDMMC_GetCmdResp7+0x98>)
 8008fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8008faa:	0a5b      	lsrs	r3, r3, #9
 8008fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fb0:	fb02 f303 	mul.w	r3, r2, r3
 8008fb4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	1e5a      	subs	r2, r3, #1
 8008fba:	60fa      	str	r2, [r7, #12]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d102      	bne.n	8008fc6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008fc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008fc4:	e02c      	b.n	8009020 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d0ef      	beq.n	8008fb6 <SDMMC_GetCmdResp7+0x1e>
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1ea      	bne.n	8008fb6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe4:	f003 0304 	and.w	r3, r3, #4
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d004      	beq.n	8008ff6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2204      	movs	r2, #4
 8008ff0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ff2:	2304      	movs	r3, #4
 8008ff4:	e014      	b.n	8009020 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ffa:	f003 0301 	and.w	r3, r3, #1
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d004      	beq.n	800900c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2201      	movs	r2, #1
 8009006:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009008:	2301      	movs	r3, #1
 800900a:	e009      	b.n	8009020 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009014:	2b00      	cmp	r3, #0
 8009016:	d002      	beq.n	800901e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2240      	movs	r2, #64	; 0x40
 800901c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800901e:	2300      	movs	r3, #0
  
}
 8009020:	4618      	mov	r0, r3
 8009022:	3714      	adds	r7, #20
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	20000000 	.word	0x20000000
 8009030:	10624dd3 	.word	0x10624dd3

08009034 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009034:	b084      	sub	sp, #16
 8009036:	b580      	push	{r7, lr}
 8009038:	b084      	sub	sp, #16
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
 800903e:	f107 001c 	add.w	r0, r7, #28
 8009042:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009048:	2b01      	cmp	r3, #1
 800904a:	d122      	bne.n	8009092 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009050:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009076:	2b01      	cmp	r3, #1
 8009078:	d105      	bne.n	8009086 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f001 fb1c 	bl	800a6c4 <USB_CoreReset>
 800908c:	4603      	mov	r3, r0
 800908e:	73fb      	strb	r3, [r7, #15]
 8009090:	e01a      	b.n	80090c8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f001 fb10 	bl	800a6c4 <USB_CoreReset>
 80090a4:	4603      	mov	r3, r0
 80090a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80090a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d106      	bne.n	80090bc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	639a      	str	r2, [r3, #56]	; 0x38
 80090ba:	e005      	b.n	80090c8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80090c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d10b      	bne.n	80090e6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	f043 0206 	orr.w	r2, r3, #6
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	f043 0220 	orr.w	r2, r3, #32
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80090e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3710      	adds	r7, #16
 80090ec:	46bd      	mov	sp, r7
 80090ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090f2:	b004      	add	sp, #16
 80090f4:	4770      	bx	lr
	...

080090f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b087      	sub	sp, #28
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	4613      	mov	r3, r2
 8009104:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009106:	79fb      	ldrb	r3, [r7, #7]
 8009108:	2b02      	cmp	r3, #2
 800910a:	d165      	bne.n	80091d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	4a41      	ldr	r2, [pc, #260]	; (8009214 <USB_SetTurnaroundTime+0x11c>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d906      	bls.n	8009122 <USB_SetTurnaroundTime+0x2a>
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	4a40      	ldr	r2, [pc, #256]	; (8009218 <USB_SetTurnaroundTime+0x120>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d202      	bcs.n	8009122 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800911c:	230f      	movs	r3, #15
 800911e:	617b      	str	r3, [r7, #20]
 8009120:	e062      	b.n	80091e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	4a3c      	ldr	r2, [pc, #240]	; (8009218 <USB_SetTurnaroundTime+0x120>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d306      	bcc.n	8009138 <USB_SetTurnaroundTime+0x40>
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	4a3b      	ldr	r2, [pc, #236]	; (800921c <USB_SetTurnaroundTime+0x124>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d202      	bcs.n	8009138 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009132:	230e      	movs	r3, #14
 8009134:	617b      	str	r3, [r7, #20]
 8009136:	e057      	b.n	80091e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	4a38      	ldr	r2, [pc, #224]	; (800921c <USB_SetTurnaroundTime+0x124>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d306      	bcc.n	800914e <USB_SetTurnaroundTime+0x56>
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	4a37      	ldr	r2, [pc, #220]	; (8009220 <USB_SetTurnaroundTime+0x128>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d202      	bcs.n	800914e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009148:	230d      	movs	r3, #13
 800914a:	617b      	str	r3, [r7, #20]
 800914c:	e04c      	b.n	80091e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	4a33      	ldr	r2, [pc, #204]	; (8009220 <USB_SetTurnaroundTime+0x128>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d306      	bcc.n	8009164 <USB_SetTurnaroundTime+0x6c>
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	4a32      	ldr	r2, [pc, #200]	; (8009224 <USB_SetTurnaroundTime+0x12c>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d802      	bhi.n	8009164 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800915e:	230c      	movs	r3, #12
 8009160:	617b      	str	r3, [r7, #20]
 8009162:	e041      	b.n	80091e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	4a2f      	ldr	r2, [pc, #188]	; (8009224 <USB_SetTurnaroundTime+0x12c>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d906      	bls.n	800917a <USB_SetTurnaroundTime+0x82>
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	4a2e      	ldr	r2, [pc, #184]	; (8009228 <USB_SetTurnaroundTime+0x130>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d802      	bhi.n	800917a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009174:	230b      	movs	r3, #11
 8009176:	617b      	str	r3, [r7, #20]
 8009178:	e036      	b.n	80091e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	4a2a      	ldr	r2, [pc, #168]	; (8009228 <USB_SetTurnaroundTime+0x130>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d906      	bls.n	8009190 <USB_SetTurnaroundTime+0x98>
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	4a29      	ldr	r2, [pc, #164]	; (800922c <USB_SetTurnaroundTime+0x134>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d802      	bhi.n	8009190 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800918a:	230a      	movs	r3, #10
 800918c:	617b      	str	r3, [r7, #20]
 800918e:	e02b      	b.n	80091e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	4a26      	ldr	r2, [pc, #152]	; (800922c <USB_SetTurnaroundTime+0x134>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d906      	bls.n	80091a6 <USB_SetTurnaroundTime+0xae>
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	4a25      	ldr	r2, [pc, #148]	; (8009230 <USB_SetTurnaroundTime+0x138>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d202      	bcs.n	80091a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80091a0:	2309      	movs	r3, #9
 80091a2:	617b      	str	r3, [r7, #20]
 80091a4:	e020      	b.n	80091e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	4a21      	ldr	r2, [pc, #132]	; (8009230 <USB_SetTurnaroundTime+0x138>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d306      	bcc.n	80091bc <USB_SetTurnaroundTime+0xc4>
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	4a20      	ldr	r2, [pc, #128]	; (8009234 <USB_SetTurnaroundTime+0x13c>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d802      	bhi.n	80091bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80091b6:	2308      	movs	r3, #8
 80091b8:	617b      	str	r3, [r7, #20]
 80091ba:	e015      	b.n	80091e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	4a1d      	ldr	r2, [pc, #116]	; (8009234 <USB_SetTurnaroundTime+0x13c>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d906      	bls.n	80091d2 <USB_SetTurnaroundTime+0xda>
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	4a1c      	ldr	r2, [pc, #112]	; (8009238 <USB_SetTurnaroundTime+0x140>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d202      	bcs.n	80091d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80091cc:	2307      	movs	r3, #7
 80091ce:	617b      	str	r3, [r7, #20]
 80091d0:	e00a      	b.n	80091e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80091d2:	2306      	movs	r3, #6
 80091d4:	617b      	str	r3, [r7, #20]
 80091d6:	e007      	b.n	80091e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80091d8:	79fb      	ldrb	r3, [r7, #7]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d102      	bne.n	80091e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80091de:	2309      	movs	r3, #9
 80091e0:	617b      	str	r3, [r7, #20]
 80091e2:	e001      	b.n	80091e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80091e4:	2309      	movs	r3, #9
 80091e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	68da      	ldr	r2, [r3, #12]
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	029b      	lsls	r3, r3, #10
 80091fc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009200:	431a      	orrs	r2, r3
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	371c      	adds	r7, #28
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr
 8009214:	00d8acbf 	.word	0x00d8acbf
 8009218:	00e4e1c0 	.word	0x00e4e1c0
 800921c:	00f42400 	.word	0x00f42400
 8009220:	01067380 	.word	0x01067380
 8009224:	011a499f 	.word	0x011a499f
 8009228:	01312cff 	.word	0x01312cff
 800922c:	014ca43f 	.word	0x014ca43f
 8009230:	016e3600 	.word	0x016e3600
 8009234:	01a6ab1f 	.word	0x01a6ab1f
 8009238:	01e84800 	.word	0x01e84800

0800923c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	f043 0201 	orr.w	r2, r3, #1
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	370c      	adds	r7, #12
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr

0800925e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800925e:	b480      	push	{r7}
 8009260:	b083      	sub	sp, #12
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	f023 0201 	bic.w	r2, r3, #1
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	460b      	mov	r3, r1
 800928a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800928c:	2300      	movs	r3, #0
 800928e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800929c:	78fb      	ldrb	r3, [r7, #3]
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d115      	bne.n	80092ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80092ae:	2001      	movs	r0, #1
 80092b0:	f7f9 fb6c 	bl	800298c <HAL_Delay>
      ms++;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	3301      	adds	r3, #1
 80092b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f001 f972 	bl	800a5a4 <USB_GetMode>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d01e      	beq.n	8009304 <USB_SetCurrentMode+0x84>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2b31      	cmp	r3, #49	; 0x31
 80092ca:	d9f0      	bls.n	80092ae <USB_SetCurrentMode+0x2e>
 80092cc:	e01a      	b.n	8009304 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80092ce:	78fb      	ldrb	r3, [r7, #3]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d115      	bne.n	8009300 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80092e0:	2001      	movs	r0, #1
 80092e2:	f7f9 fb53 	bl	800298c <HAL_Delay>
      ms++;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	3301      	adds	r3, #1
 80092ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f001 f959 	bl	800a5a4 <USB_GetMode>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d005      	beq.n	8009304 <USB_SetCurrentMode+0x84>
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2b31      	cmp	r3, #49	; 0x31
 80092fc:	d9f0      	bls.n	80092e0 <USB_SetCurrentMode+0x60>
 80092fe:	e001      	b.n	8009304 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	e005      	b.n	8009310 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2b32      	cmp	r3, #50	; 0x32
 8009308:	d101      	bne.n	800930e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e000      	b.n	8009310 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009318:	b084      	sub	sp, #16
 800931a:	b580      	push	{r7, lr}
 800931c:	b086      	sub	sp, #24
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
 8009322:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009326:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800932a:	2300      	movs	r3, #0
 800932c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009332:	2300      	movs	r3, #0
 8009334:	613b      	str	r3, [r7, #16]
 8009336:	e009      	b.n	800934c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	3340      	adds	r3, #64	; 0x40
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	4413      	add	r3, r2
 8009342:	2200      	movs	r2, #0
 8009344:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	3301      	adds	r3, #1
 800934a:	613b      	str	r3, [r7, #16]
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	2b0e      	cmp	r3, #14
 8009350:	d9f2      	bls.n	8009338 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009354:	2b00      	cmp	r3, #0
 8009356:	d11c      	bne.n	8009392 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	68fa      	ldr	r2, [r7, #12]
 8009362:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009366:	f043 0302 	orr.w	r3, r3, #2
 800936a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009370:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800937c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009388:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	639a      	str	r2, [r3, #56]	; 0x38
 8009390:	e00b      	b.n	80093aa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009396:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093b0:	461a      	mov	r2, r3
 80093b2:	2300      	movs	r3, #0
 80093b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093bc:	4619      	mov	r1, r3
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093c4:	461a      	mov	r2, r3
 80093c6:	680b      	ldr	r3, [r1, #0]
 80093c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80093ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d10c      	bne.n	80093ea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80093d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d104      	bne.n	80093e0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80093d6:	2100      	movs	r1, #0
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f945 	bl	8009668 <USB_SetDevSpeed>
 80093de:	e008      	b.n	80093f2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80093e0:	2101      	movs	r1, #1
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f940 	bl	8009668 <USB_SetDevSpeed>
 80093e8:	e003      	b.n	80093f2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80093ea:	2103      	movs	r1, #3
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 f93b 	bl	8009668 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80093f2:	2110      	movs	r1, #16
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 f8f3 	bl	80095e0 <USB_FlushTxFifo>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d001      	beq.n	8009404 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 f90f 	bl	8009628 <USB_FlushRxFifo>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d001      	beq.n	8009414 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800941a:	461a      	mov	r2, r3
 800941c:	2300      	movs	r3, #0
 800941e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009426:	461a      	mov	r2, r3
 8009428:	2300      	movs	r3, #0
 800942a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009432:	461a      	mov	r2, r3
 8009434:	2300      	movs	r3, #0
 8009436:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009438:	2300      	movs	r3, #0
 800943a:	613b      	str	r3, [r7, #16]
 800943c:	e043      	b.n	80094c6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	015a      	lsls	r2, r3, #5
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	4413      	add	r3, r2
 8009446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009450:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009454:	d118      	bne.n	8009488 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d10a      	bne.n	8009472 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	015a      	lsls	r2, r3, #5
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	4413      	add	r3, r2
 8009464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009468:	461a      	mov	r2, r3
 800946a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800946e:	6013      	str	r3, [r2, #0]
 8009470:	e013      	b.n	800949a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	015a      	lsls	r2, r3, #5
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	4413      	add	r3, r2
 800947a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800947e:	461a      	mov	r2, r3
 8009480:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009484:	6013      	str	r3, [r2, #0]
 8009486:	e008      	b.n	800949a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	015a      	lsls	r2, r3, #5
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	4413      	add	r3, r2
 8009490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009494:	461a      	mov	r2, r3
 8009496:	2300      	movs	r3, #0
 8009498:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	015a      	lsls	r2, r3, #5
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	4413      	add	r3, r2
 80094a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094a6:	461a      	mov	r2, r3
 80094a8:	2300      	movs	r3, #0
 80094aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	015a      	lsls	r2, r3, #5
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	4413      	add	r3, r2
 80094b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094b8:	461a      	mov	r2, r3
 80094ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80094be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	3301      	adds	r3, #1
 80094c4:	613b      	str	r3, [r7, #16]
 80094c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c8:	693a      	ldr	r2, [r7, #16]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d3b7      	bcc.n	800943e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094ce:	2300      	movs	r3, #0
 80094d0:	613b      	str	r3, [r7, #16]
 80094d2:	e043      	b.n	800955c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	015a      	lsls	r2, r3, #5
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	4413      	add	r3, r2
 80094dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094ea:	d118      	bne.n	800951e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d10a      	bne.n	8009508 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	015a      	lsls	r2, r3, #5
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	4413      	add	r3, r2
 80094fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094fe:	461a      	mov	r2, r3
 8009500:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009504:	6013      	str	r3, [r2, #0]
 8009506:	e013      	b.n	8009530 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	015a      	lsls	r2, r3, #5
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	4413      	add	r3, r2
 8009510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009514:	461a      	mov	r2, r3
 8009516:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800951a:	6013      	str	r3, [r2, #0]
 800951c:	e008      	b.n	8009530 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	015a      	lsls	r2, r3, #5
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	4413      	add	r3, r2
 8009526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800952a:	461a      	mov	r2, r3
 800952c:	2300      	movs	r3, #0
 800952e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	015a      	lsls	r2, r3, #5
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	4413      	add	r3, r2
 8009538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800953c:	461a      	mov	r2, r3
 800953e:	2300      	movs	r3, #0
 8009540:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	015a      	lsls	r2, r3, #5
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	4413      	add	r3, r2
 800954a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800954e:	461a      	mov	r2, r3
 8009550:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009554:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	3301      	adds	r3, #1
 800955a:	613b      	str	r3, [r7, #16]
 800955c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955e:	693a      	ldr	r2, [r7, #16]
 8009560:	429a      	cmp	r2, r3
 8009562:	d3b7      	bcc.n	80094d4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009572:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009576:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009584:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009588:	2b00      	cmp	r3, #0
 800958a:	d105      	bne.n	8009598 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	f043 0210 	orr.w	r2, r3, #16
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	699a      	ldr	r2, [r3, #24]
 800959c:	4b0f      	ldr	r3, [pc, #60]	; (80095dc <USB_DevInit+0x2c4>)
 800959e:	4313      	orrs	r3, r2
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80095a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d005      	beq.n	80095b6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	699b      	ldr	r3, [r3, #24]
 80095ae:	f043 0208 	orr.w	r2, r3, #8
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80095b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d107      	bne.n	80095cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	699b      	ldr	r3, [r3, #24]
 80095c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095c4:	f043 0304 	orr.w	r3, r3, #4
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80095cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3718      	adds	r7, #24
 80095d2:	46bd      	mov	sp, r7
 80095d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80095d8:	b004      	add	sp, #16
 80095da:	4770      	bx	lr
 80095dc:	803c3800 	.word	0x803c3800

080095e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b085      	sub	sp, #20
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80095ea:	2300      	movs	r3, #0
 80095ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	019b      	lsls	r3, r3, #6
 80095f2:	f043 0220 	orr.w	r2, r3, #32
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	3301      	adds	r3, #1
 80095fe:	60fb      	str	r3, [r7, #12]
 8009600:	4a08      	ldr	r2, [pc, #32]	; (8009624 <USB_FlushTxFifo+0x44>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d901      	bls.n	800960a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8009606:	2303      	movs	r3, #3
 8009608:	e006      	b.n	8009618 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	f003 0320 	and.w	r3, r3, #32
 8009612:	2b20      	cmp	r3, #32
 8009614:	d0f1      	beq.n	80095fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3714      	adds	r7, #20
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr
 8009624:	00030d40 	.word	0x00030d40

08009628 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009630:	2300      	movs	r3, #0
 8009632:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2210      	movs	r2, #16
 8009638:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	3301      	adds	r3, #1
 800963e:	60fb      	str	r3, [r7, #12]
 8009640:	4a08      	ldr	r2, [pc, #32]	; (8009664 <USB_FlushRxFifo+0x3c>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d901      	bls.n	800964a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8009646:	2303      	movs	r3, #3
 8009648:	e006      	b.n	8009658 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	f003 0310 	and.w	r3, r3, #16
 8009652:	2b10      	cmp	r3, #16
 8009654:	d0f1      	beq.n	800963a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3714      	adds	r7, #20
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr
 8009664:	00030d40 	.word	0x00030d40

08009668 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009668:	b480      	push	{r7}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	460b      	mov	r3, r1
 8009672:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	78fb      	ldrb	r3, [r7, #3]
 8009682:	68f9      	ldr	r1, [r7, #12]
 8009684:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009688:	4313      	orrs	r3, r2
 800968a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3714      	adds	r7, #20
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr

0800969a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800969a:	b480      	push	{r7}
 800969c:	b087      	sub	sp, #28
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	f003 0306 	and.w	r3, r3, #6
 80096b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d102      	bne.n	80096c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80096ba:	2300      	movs	r3, #0
 80096bc:	75fb      	strb	r3, [r7, #23]
 80096be:	e00a      	b.n	80096d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	d002      	beq.n	80096cc <USB_GetDevSpeed+0x32>
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2b06      	cmp	r3, #6
 80096ca:	d102      	bne.n	80096d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80096cc:	2302      	movs	r3, #2
 80096ce:	75fb      	strb	r3, [r7, #23]
 80096d0:	e001      	b.n	80096d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80096d2:	230f      	movs	r3, #15
 80096d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80096d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	371c      	adds	r7, #28
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	785b      	ldrb	r3, [r3, #1]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d13a      	bne.n	8009776 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009706:	69da      	ldr	r2, [r3, #28]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	f003 030f 	and.w	r3, r3, #15
 8009710:	2101      	movs	r1, #1
 8009712:	fa01 f303 	lsl.w	r3, r1, r3
 8009716:	b29b      	uxth	r3, r3
 8009718:	68f9      	ldr	r1, [r7, #12]
 800971a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800971e:	4313      	orrs	r3, r2
 8009720:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	015a      	lsls	r2, r3, #5
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	4413      	add	r3, r2
 800972a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009734:	2b00      	cmp	r3, #0
 8009736:	d155      	bne.n	80097e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	015a      	lsls	r2, r3, #5
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	4413      	add	r3, r2
 8009740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	78db      	ldrb	r3, [r3, #3]
 8009752:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009754:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	059b      	lsls	r3, r3, #22
 800975a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800975c:	4313      	orrs	r3, r2
 800975e:	68ba      	ldr	r2, [r7, #8]
 8009760:	0151      	lsls	r1, r2, #5
 8009762:	68fa      	ldr	r2, [r7, #12]
 8009764:	440a      	add	r2, r1
 8009766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800976a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800976e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009772:	6013      	str	r3, [r2, #0]
 8009774:	e036      	b.n	80097e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800977c:	69da      	ldr	r2, [r3, #28]
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	f003 030f 	and.w	r3, r3, #15
 8009786:	2101      	movs	r1, #1
 8009788:	fa01 f303 	lsl.w	r3, r1, r3
 800978c:	041b      	lsls	r3, r3, #16
 800978e:	68f9      	ldr	r1, [r7, #12]
 8009790:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009794:	4313      	orrs	r3, r2
 8009796:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	015a      	lsls	r2, r3, #5
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	4413      	add	r3, r2
 80097a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d11a      	bne.n	80097e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	015a      	lsls	r2, r3, #5
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	4413      	add	r3, r2
 80097b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	78db      	ldrb	r3, [r3, #3]
 80097c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80097ca:	430b      	orrs	r3, r1
 80097cc:	4313      	orrs	r3, r2
 80097ce:	68ba      	ldr	r2, [r7, #8]
 80097d0:	0151      	lsls	r1, r2, #5
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	440a      	add	r2, r1
 80097d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3714      	adds	r7, #20
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr
	...

080097f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	785b      	ldrb	r3, [r3, #1]
 800980c:	2b01      	cmp	r3, #1
 800980e:	d161      	bne.n	80098d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009826:	d11f      	bne.n	8009868 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	015a      	lsls	r2, r3, #5
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	4413      	add	r3, r2
 8009830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	68ba      	ldr	r2, [r7, #8]
 8009838:	0151      	lsls	r1, r2, #5
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	440a      	add	r2, r1
 800983e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009842:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009846:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	015a      	lsls	r2, r3, #5
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	4413      	add	r3, r2
 8009850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	68ba      	ldr	r2, [r7, #8]
 8009858:	0151      	lsls	r1, r2, #5
 800985a:	68fa      	ldr	r2, [r7, #12]
 800985c:	440a      	add	r2, r1
 800985e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009862:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009866:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800986e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	f003 030f 	and.w	r3, r3, #15
 8009878:	2101      	movs	r1, #1
 800987a:	fa01 f303 	lsl.w	r3, r1, r3
 800987e:	b29b      	uxth	r3, r3
 8009880:	43db      	mvns	r3, r3
 8009882:	68f9      	ldr	r1, [r7, #12]
 8009884:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009888:	4013      	ands	r3, r2
 800988a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009892:	69da      	ldr	r2, [r3, #28]
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	f003 030f 	and.w	r3, r3, #15
 800989c:	2101      	movs	r1, #1
 800989e:	fa01 f303 	lsl.w	r3, r1, r3
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	43db      	mvns	r3, r3
 80098a6:	68f9      	ldr	r1, [r7, #12]
 80098a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098ac:	4013      	ands	r3, r2
 80098ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	015a      	lsls	r2, r3, #5
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	4413      	add	r3, r2
 80098b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	0159      	lsls	r1, r3, #5
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	440b      	add	r3, r1
 80098c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ca:	4619      	mov	r1, r3
 80098cc:	4b35      	ldr	r3, [pc, #212]	; (80099a4 <USB_DeactivateEndpoint+0x1b0>)
 80098ce:	4013      	ands	r3, r2
 80098d0:	600b      	str	r3, [r1, #0]
 80098d2:	e060      	b.n	8009996 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098ea:	d11f      	bne.n	800992c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	015a      	lsls	r2, r3, #5
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	4413      	add	r3, r2
 80098f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	0151      	lsls	r1, r2, #5
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	440a      	add	r2, r1
 8009902:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009906:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800990a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	015a      	lsls	r2, r3, #5
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	4413      	add	r3, r2
 8009914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	68ba      	ldr	r2, [r7, #8]
 800991c:	0151      	lsls	r1, r2, #5
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	440a      	add	r2, r1
 8009922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009926:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800992a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009932:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	f003 030f 	and.w	r3, r3, #15
 800993c:	2101      	movs	r1, #1
 800993e:	fa01 f303 	lsl.w	r3, r1, r3
 8009942:	041b      	lsls	r3, r3, #16
 8009944:	43db      	mvns	r3, r3
 8009946:	68f9      	ldr	r1, [r7, #12]
 8009948:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800994c:	4013      	ands	r3, r2
 800994e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009956:	69da      	ldr	r2, [r3, #28]
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	f003 030f 	and.w	r3, r3, #15
 8009960:	2101      	movs	r1, #1
 8009962:	fa01 f303 	lsl.w	r3, r1, r3
 8009966:	041b      	lsls	r3, r3, #16
 8009968:	43db      	mvns	r3, r3
 800996a:	68f9      	ldr	r1, [r7, #12]
 800996c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009970:	4013      	ands	r3, r2
 8009972:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	015a      	lsls	r2, r3, #5
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	4413      	add	r3, r2
 800997c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	0159      	lsls	r1, r3, #5
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	440b      	add	r3, r1
 800998a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800998e:	4619      	mov	r1, r3
 8009990:	4b05      	ldr	r3, [pc, #20]	; (80099a8 <USB_DeactivateEndpoint+0x1b4>)
 8009992:	4013      	ands	r3, r2
 8009994:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3714      	adds	r7, #20
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr
 80099a4:	ec337800 	.word	0xec337800
 80099a8:	eff37800 	.word	0xeff37800

080099ac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b08a      	sub	sp, #40	; 0x28
 80099b0:	af02      	add	r7, sp, #8
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	4613      	mov	r3, r2
 80099b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	785b      	ldrb	r3, [r3, #1]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	f040 815c 	bne.w	8009c86 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	695b      	ldr	r3, [r3, #20]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d132      	bne.n	8009a3c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	015a      	lsls	r2, r3, #5
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	4413      	add	r3, r2
 80099de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	69ba      	ldr	r2, [r7, #24]
 80099e6:	0151      	lsls	r1, r2, #5
 80099e8:	69fa      	ldr	r2, [r7, #28]
 80099ea:	440a      	add	r2, r1
 80099ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80099f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80099f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80099fa:	69bb      	ldr	r3, [r7, #24]
 80099fc:	015a      	lsls	r2, r3, #5
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	4413      	add	r3, r2
 8009a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a06:	691b      	ldr	r3, [r3, #16]
 8009a08:	69ba      	ldr	r2, [r7, #24]
 8009a0a:	0151      	lsls	r1, r2, #5
 8009a0c:	69fa      	ldr	r2, [r7, #28]
 8009a0e:	440a      	add	r2, r1
 8009a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	015a      	lsls	r2, r3, #5
 8009a1e:	69fb      	ldr	r3, [r7, #28]
 8009a20:	4413      	add	r3, r2
 8009a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	69ba      	ldr	r2, [r7, #24]
 8009a2a:	0151      	lsls	r1, r2, #5
 8009a2c:	69fa      	ldr	r2, [r7, #28]
 8009a2e:	440a      	add	r2, r1
 8009a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a34:	0cdb      	lsrs	r3, r3, #19
 8009a36:	04db      	lsls	r3, r3, #19
 8009a38:	6113      	str	r3, [r2, #16]
 8009a3a:	e074      	b.n	8009b26 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	015a      	lsls	r2, r3, #5
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	4413      	add	r3, r2
 8009a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	69ba      	ldr	r2, [r7, #24]
 8009a4c:	0151      	lsls	r1, r2, #5
 8009a4e:	69fa      	ldr	r2, [r7, #28]
 8009a50:	440a      	add	r2, r1
 8009a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a56:	0cdb      	lsrs	r3, r3, #19
 8009a58:	04db      	lsls	r3, r3, #19
 8009a5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	015a      	lsls	r2, r3, #5
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	4413      	add	r3, r2
 8009a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	69ba      	ldr	r2, [r7, #24]
 8009a6c:	0151      	lsls	r1, r2, #5
 8009a6e:	69fa      	ldr	r2, [r7, #28]
 8009a70:	440a      	add	r2, r1
 8009a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	015a      	lsls	r2, r3, #5
 8009a84:	69fb      	ldr	r3, [r7, #28]
 8009a86:	4413      	add	r3, r2
 8009a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a8c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	6959      	ldr	r1, [r3, #20]
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	440b      	add	r3, r1
 8009a98:	1e59      	subs	r1, r3, #1
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009aa2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009aa4:	4b9d      	ldr	r3, [pc, #628]	; (8009d1c <USB_EPStartXfer+0x370>)
 8009aa6:	400b      	ands	r3, r1
 8009aa8:	69b9      	ldr	r1, [r7, #24]
 8009aaa:	0148      	lsls	r0, r1, #5
 8009aac:	69f9      	ldr	r1, [r7, #28]
 8009aae:	4401      	add	r1, r0
 8009ab0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	015a      	lsls	r2, r3, #5
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	4413      	add	r3, r2
 8009ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ac4:	691a      	ldr	r2, [r3, #16]
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	695b      	ldr	r3, [r3, #20]
 8009aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ace:	69b9      	ldr	r1, [r7, #24]
 8009ad0:	0148      	lsls	r0, r1, #5
 8009ad2:	69f9      	ldr	r1, [r7, #28]
 8009ad4:	4401      	add	r1, r0
 8009ad6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009ada:	4313      	orrs	r3, r2
 8009adc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	78db      	ldrb	r3, [r3, #3]
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d11f      	bne.n	8009b26 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	015a      	lsls	r2, r3, #5
 8009aea:	69fb      	ldr	r3, [r7, #28]
 8009aec:	4413      	add	r3, r2
 8009aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	69ba      	ldr	r2, [r7, #24]
 8009af6:	0151      	lsls	r1, r2, #5
 8009af8:	69fa      	ldr	r2, [r7, #28]
 8009afa:	440a      	add	r2, r1
 8009afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b00:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009b04:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	015a      	lsls	r2, r3, #5
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	69ba      	ldr	r2, [r7, #24]
 8009b16:	0151      	lsls	r1, r2, #5
 8009b18:	69fa      	ldr	r2, [r7, #28]
 8009b1a:	440a      	add	r2, r1
 8009b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b24:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009b26:	79fb      	ldrb	r3, [r7, #7]
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d14b      	bne.n	8009bc4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d009      	beq.n	8009b48 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	015a      	lsls	r2, r3, #5
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b40:	461a      	mov	r2, r3
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	691b      	ldr	r3, [r3, #16]
 8009b46:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	78db      	ldrb	r3, [r3, #3]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d128      	bne.n	8009ba2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d110      	bne.n	8009b82 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	015a      	lsls	r2, r3, #5
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	4413      	add	r3, r2
 8009b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	69ba      	ldr	r2, [r7, #24]
 8009b70:	0151      	lsls	r1, r2, #5
 8009b72:	69fa      	ldr	r2, [r7, #28]
 8009b74:	440a      	add	r2, r1
 8009b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b7e:	6013      	str	r3, [r2, #0]
 8009b80:	e00f      	b.n	8009ba2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	015a      	lsls	r2, r3, #5
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	4413      	add	r3, r2
 8009b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	69ba      	ldr	r2, [r7, #24]
 8009b92:	0151      	lsls	r1, r2, #5
 8009b94:	69fa      	ldr	r2, [r7, #28]
 8009b96:	440a      	add	r2, r1
 8009b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ba0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	015a      	lsls	r2, r3, #5
 8009ba6:	69fb      	ldr	r3, [r7, #28]
 8009ba8:	4413      	add	r3, r2
 8009baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	69ba      	ldr	r2, [r7, #24]
 8009bb2:	0151      	lsls	r1, r2, #5
 8009bb4:	69fa      	ldr	r2, [r7, #28]
 8009bb6:	440a      	add	r2, r1
 8009bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009bc0:	6013      	str	r3, [r2, #0]
 8009bc2:	e12f      	b.n	8009e24 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	015a      	lsls	r2, r3, #5
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	4413      	add	r3, r2
 8009bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	69ba      	ldr	r2, [r7, #24]
 8009bd4:	0151      	lsls	r1, r2, #5
 8009bd6:	69fa      	ldr	r2, [r7, #28]
 8009bd8:	440a      	add	r2, r1
 8009bda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009be2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	78db      	ldrb	r3, [r3, #3]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d015      	beq.n	8009c18 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	695b      	ldr	r3, [r3, #20]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f000 8117 	beq.w	8009e24 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	f003 030f 	and.w	r3, r3, #15
 8009c06:	2101      	movs	r1, #1
 8009c08:	fa01 f303 	lsl.w	r3, r1, r3
 8009c0c:	69f9      	ldr	r1, [r7, #28]
 8009c0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c12:	4313      	orrs	r3, r2
 8009c14:	634b      	str	r3, [r1, #52]	; 0x34
 8009c16:	e105      	b.n	8009e24 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d110      	bne.n	8009c4a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	015a      	lsls	r2, r3, #5
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	4413      	add	r3, r2
 8009c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	69ba      	ldr	r2, [r7, #24]
 8009c38:	0151      	lsls	r1, r2, #5
 8009c3a:	69fa      	ldr	r2, [r7, #28]
 8009c3c:	440a      	add	r2, r1
 8009c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c46:	6013      	str	r3, [r2, #0]
 8009c48:	e00f      	b.n	8009c6a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009c4a:	69bb      	ldr	r3, [r7, #24]
 8009c4c:	015a      	lsls	r2, r3, #5
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	4413      	add	r3, r2
 8009c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	69ba      	ldr	r2, [r7, #24]
 8009c5a:	0151      	lsls	r1, r2, #5
 8009c5c:	69fa      	ldr	r2, [r7, #28]
 8009c5e:	440a      	add	r2, r1
 8009c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c68:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	68d9      	ldr	r1, [r3, #12]
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	781a      	ldrb	r2, [r3, #0]
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	695b      	ldr	r3, [r3, #20]
 8009c76:	b298      	uxth	r0, r3
 8009c78:	79fb      	ldrb	r3, [r7, #7]
 8009c7a:	9300      	str	r3, [sp, #0]
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f000 fa2b 	bl	800a0da <USB_WritePacket>
 8009c84:	e0ce      	b.n	8009e24 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	015a      	lsls	r2, r3, #5
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c92:	691b      	ldr	r3, [r3, #16]
 8009c94:	69ba      	ldr	r2, [r7, #24]
 8009c96:	0151      	lsls	r1, r2, #5
 8009c98:	69fa      	ldr	r2, [r7, #28]
 8009c9a:	440a      	add	r2, r1
 8009c9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ca0:	0cdb      	lsrs	r3, r3, #19
 8009ca2:	04db      	lsls	r3, r3, #19
 8009ca4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	015a      	lsls	r2, r3, #5
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	4413      	add	r3, r2
 8009cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cb2:	691b      	ldr	r3, [r3, #16]
 8009cb4:	69ba      	ldr	r2, [r7, #24]
 8009cb6:	0151      	lsls	r1, r2, #5
 8009cb8:	69fa      	ldr	r2, [r7, #28]
 8009cba:	440a      	add	r2, r1
 8009cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009cc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009cc8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	695b      	ldr	r3, [r3, #20]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d126      	bne.n	8009d20 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	015a      	lsls	r2, r3, #5
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	4413      	add	r3, r2
 8009cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cde:	691a      	ldr	r2, [r3, #16]
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ce8:	69b9      	ldr	r1, [r7, #24]
 8009cea:	0148      	lsls	r0, r1, #5
 8009cec:	69f9      	ldr	r1, [r7, #28]
 8009cee:	4401      	add	r1, r0
 8009cf0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009cf8:	69bb      	ldr	r3, [r7, #24]
 8009cfa:	015a      	lsls	r2, r3, #5
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	4413      	add	r3, r2
 8009d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	69ba      	ldr	r2, [r7, #24]
 8009d08:	0151      	lsls	r1, r2, #5
 8009d0a:	69fa      	ldr	r2, [r7, #28]
 8009d0c:	440a      	add	r2, r1
 8009d0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d16:	6113      	str	r3, [r2, #16]
 8009d18:	e036      	b.n	8009d88 <USB_EPStartXfer+0x3dc>
 8009d1a:	bf00      	nop
 8009d1c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	695a      	ldr	r2, [r3, #20]
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	4413      	add	r3, r2
 8009d2a:	1e5a      	subs	r2, r3, #1
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d34:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	015a      	lsls	r2, r3, #5
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d42:	691a      	ldr	r2, [r3, #16]
 8009d44:	8afb      	ldrh	r3, [r7, #22]
 8009d46:	04d9      	lsls	r1, r3, #19
 8009d48:	4b39      	ldr	r3, [pc, #228]	; (8009e30 <USB_EPStartXfer+0x484>)
 8009d4a:	400b      	ands	r3, r1
 8009d4c:	69b9      	ldr	r1, [r7, #24]
 8009d4e:	0148      	lsls	r0, r1, #5
 8009d50:	69f9      	ldr	r1, [r7, #28]
 8009d52:	4401      	add	r1, r0
 8009d54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	015a      	lsls	r2, r3, #5
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	4413      	add	r3, r2
 8009d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d68:	691a      	ldr	r2, [r3, #16]
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	8af9      	ldrh	r1, [r7, #22]
 8009d70:	fb01 f303 	mul.w	r3, r1, r3
 8009d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d78:	69b9      	ldr	r1, [r7, #24]
 8009d7a:	0148      	lsls	r0, r1, #5
 8009d7c:	69f9      	ldr	r1, [r7, #28]
 8009d7e:	4401      	add	r1, r0
 8009d80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009d84:	4313      	orrs	r3, r2
 8009d86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009d88:	79fb      	ldrb	r3, [r7, #7]
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d10d      	bne.n	8009daa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d009      	beq.n	8009daa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	68d9      	ldr	r1, [r3, #12]
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	015a      	lsls	r2, r3, #5
 8009d9e:	69fb      	ldr	r3, [r7, #28]
 8009da0:	4413      	add	r3, r2
 8009da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da6:	460a      	mov	r2, r1
 8009da8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	78db      	ldrb	r3, [r3, #3]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d128      	bne.n	8009e04 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d110      	bne.n	8009de4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	015a      	lsls	r2, r3, #5
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	4413      	add	r3, r2
 8009dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	69ba      	ldr	r2, [r7, #24]
 8009dd2:	0151      	lsls	r1, r2, #5
 8009dd4:	69fa      	ldr	r2, [r7, #28]
 8009dd6:	440a      	add	r2, r1
 8009dd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ddc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009de0:	6013      	str	r3, [r2, #0]
 8009de2:	e00f      	b.n	8009e04 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009de4:	69bb      	ldr	r3, [r7, #24]
 8009de6:	015a      	lsls	r2, r3, #5
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	4413      	add	r3, r2
 8009dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	69ba      	ldr	r2, [r7, #24]
 8009df4:	0151      	lsls	r1, r2, #5
 8009df6:	69fa      	ldr	r2, [r7, #28]
 8009df8:	440a      	add	r2, r1
 8009dfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	015a      	lsls	r2, r3, #5
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	4413      	add	r3, r2
 8009e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	69ba      	ldr	r2, [r7, #24]
 8009e14:	0151      	lsls	r1, r2, #5
 8009e16:	69fa      	ldr	r2, [r7, #28]
 8009e18:	440a      	add	r2, r1
 8009e1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009e22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e24:	2300      	movs	r3, #0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3720      	adds	r7, #32
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	1ff80000 	.word	0x1ff80000

08009e34 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b087      	sub	sp, #28
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	4613      	mov	r3, r2
 8009e40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	785b      	ldrb	r3, [r3, #1]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	f040 80cd 	bne.w	8009ff0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	695b      	ldr	r3, [r3, #20]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d132      	bne.n	8009ec4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	015a      	lsls	r2, r3, #5
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	4413      	add	r3, r2
 8009e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	693a      	ldr	r2, [r7, #16]
 8009e6e:	0151      	lsls	r1, r2, #5
 8009e70:	697a      	ldr	r2, [r7, #20]
 8009e72:	440a      	add	r2, r1
 8009e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	015a      	lsls	r2, r3, #5
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	4413      	add	r3, r2
 8009e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e8e:	691b      	ldr	r3, [r3, #16]
 8009e90:	693a      	ldr	r2, [r7, #16]
 8009e92:	0151      	lsls	r1, r2, #5
 8009e94:	697a      	ldr	r2, [r7, #20]
 8009e96:	440a      	add	r2, r1
 8009e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ea0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	015a      	lsls	r2, r3, #5
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eae:	691b      	ldr	r3, [r3, #16]
 8009eb0:	693a      	ldr	r2, [r7, #16]
 8009eb2:	0151      	lsls	r1, r2, #5
 8009eb4:	697a      	ldr	r2, [r7, #20]
 8009eb6:	440a      	add	r2, r1
 8009eb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ebc:	0cdb      	lsrs	r3, r3, #19
 8009ebe:	04db      	lsls	r3, r3, #19
 8009ec0:	6113      	str	r3, [r2, #16]
 8009ec2:	e04e      	b.n	8009f62 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	015a      	lsls	r2, r3, #5
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	4413      	add	r3, r2
 8009ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	693a      	ldr	r2, [r7, #16]
 8009ed4:	0151      	lsls	r1, r2, #5
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	440a      	add	r2, r1
 8009eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ede:	0cdb      	lsrs	r3, r3, #19
 8009ee0:	04db      	lsls	r3, r3, #19
 8009ee2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	015a      	lsls	r2, r3, #5
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	4413      	add	r3, r2
 8009eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	693a      	ldr	r2, [r7, #16]
 8009ef4:	0151      	lsls	r1, r2, #5
 8009ef6:	697a      	ldr	r2, [r7, #20]
 8009ef8:	440a      	add	r2, r1
 8009efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009efe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009f02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009f06:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	695a      	ldr	r2, [r3, #20]
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d903      	bls.n	8009f1c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	689a      	ldr	r2, [r3, #8]
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	015a      	lsls	r2, r3, #5
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	4413      	add	r3, r2
 8009f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	693a      	ldr	r2, [r7, #16]
 8009f2c:	0151      	lsls	r1, r2, #5
 8009f2e:	697a      	ldr	r2, [r7, #20]
 8009f30:	440a      	add	r2, r1
 8009f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	015a      	lsls	r2, r3, #5
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	4413      	add	r3, r2
 8009f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f48:	691a      	ldr	r2, [r3, #16]
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	695b      	ldr	r3, [r3, #20]
 8009f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f52:	6939      	ldr	r1, [r7, #16]
 8009f54:	0148      	lsls	r0, r1, #5
 8009f56:	6979      	ldr	r1, [r7, #20]
 8009f58:	4401      	add	r1, r0
 8009f5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009f62:	79fb      	ldrb	r3, [r7, #7]
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d11e      	bne.n	8009fa6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	691b      	ldr	r3, [r3, #16]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d009      	beq.n	8009f84 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	015a      	lsls	r2, r3, #5
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	4413      	add	r3, r2
 8009f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	015a      	lsls	r2, r3, #5
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	4413      	add	r3, r2
 8009f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	693a      	ldr	r2, [r7, #16]
 8009f94:	0151      	lsls	r1, r2, #5
 8009f96:	697a      	ldr	r2, [r7, #20]
 8009f98:	440a      	add	r2, r1
 8009f9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009fa2:	6013      	str	r3, [r2, #0]
 8009fa4:	e092      	b.n	800a0cc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	015a      	lsls	r2, r3, #5
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	4413      	add	r3, r2
 8009fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	693a      	ldr	r2, [r7, #16]
 8009fb6:	0151      	lsls	r1, r2, #5
 8009fb8:	697a      	ldr	r2, [r7, #20]
 8009fba:	440a      	add	r2, r1
 8009fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009fc4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	695b      	ldr	r3, [r3, #20]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d07e      	beq.n	800a0cc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	f003 030f 	and.w	r3, r3, #15
 8009fde:	2101      	movs	r1, #1
 8009fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8009fe4:	6979      	ldr	r1, [r7, #20]
 8009fe6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fea:	4313      	orrs	r3, r2
 8009fec:	634b      	str	r3, [r1, #52]	; 0x34
 8009fee:	e06d      	b.n	800a0cc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	015a      	lsls	r2, r3, #5
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	4413      	add	r3, r2
 8009ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ffc:	691b      	ldr	r3, [r3, #16]
 8009ffe:	693a      	ldr	r2, [r7, #16]
 800a000:	0151      	lsls	r1, r2, #5
 800a002:	697a      	ldr	r2, [r7, #20]
 800a004:	440a      	add	r2, r1
 800a006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a00a:	0cdb      	lsrs	r3, r3, #19
 800a00c:	04db      	lsls	r3, r3, #19
 800a00e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	015a      	lsls	r2, r3, #5
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	4413      	add	r3, r2
 800a018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	693a      	ldr	r2, [r7, #16]
 800a020:	0151      	lsls	r1, r2, #5
 800a022:	697a      	ldr	r2, [r7, #20]
 800a024:	440a      	add	r2, r1
 800a026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a02a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a02e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a032:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	695b      	ldr	r3, [r3, #20]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d003      	beq.n	800a044 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	689a      	ldr	r2, [r3, #8]
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	015a      	lsls	r2, r3, #5
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	4413      	add	r3, r2
 800a04c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	693a      	ldr	r2, [r7, #16]
 800a054:	0151      	lsls	r1, r2, #5
 800a056:	697a      	ldr	r2, [r7, #20]
 800a058:	440a      	add	r2, r1
 800a05a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a05e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a062:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	015a      	lsls	r2, r3, #5
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	4413      	add	r3, r2
 800a06c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a070:	691a      	ldr	r2, [r3, #16]
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	689b      	ldr	r3, [r3, #8]
 800a076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a07a:	6939      	ldr	r1, [r7, #16]
 800a07c:	0148      	lsls	r0, r1, #5
 800a07e:	6979      	ldr	r1, [r7, #20]
 800a080:	4401      	add	r1, r0
 800a082:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a086:	4313      	orrs	r3, r2
 800a088:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a08a:	79fb      	ldrb	r3, [r7, #7]
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d10d      	bne.n	800a0ac <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d009      	beq.n	800a0ac <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	68d9      	ldr	r1, [r3, #12]
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	015a      	lsls	r2, r3, #5
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0a8:	460a      	mov	r2, r1
 800a0aa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	015a      	lsls	r2, r3, #5
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	693a      	ldr	r2, [r7, #16]
 800a0bc:	0151      	lsls	r1, r2, #5
 800a0be:	697a      	ldr	r2, [r7, #20]
 800a0c0:	440a      	add	r2, r1
 800a0c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a0ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	371c      	adds	r7, #28
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr

0800a0da <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a0da:	b480      	push	{r7}
 800a0dc:	b089      	sub	sp, #36	; 0x24
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	60f8      	str	r0, [r7, #12]
 800a0e2:	60b9      	str	r1, [r7, #8]
 800a0e4:	4611      	mov	r1, r2
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	71fb      	strb	r3, [r7, #7]
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a0f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d123      	bne.n	800a148 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a100:	88bb      	ldrh	r3, [r7, #4]
 800a102:	3303      	adds	r3, #3
 800a104:	089b      	lsrs	r3, r3, #2
 800a106:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a108:	2300      	movs	r3, #0
 800a10a:	61bb      	str	r3, [r7, #24]
 800a10c:	e018      	b.n	800a140 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a10e:	79fb      	ldrb	r3, [r7, #7]
 800a110:	031a      	lsls	r2, r3, #12
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	4413      	add	r3, r2
 800a116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a11a:	461a      	mov	r2, r3
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	3301      	adds	r3, #1
 800a126:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	3301      	adds	r3, #1
 800a12c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	3301      	adds	r3, #1
 800a132:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	3301      	adds	r3, #1
 800a138:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	3301      	adds	r3, #1
 800a13e:	61bb      	str	r3, [r7, #24]
 800a140:	69ba      	ldr	r2, [r7, #24]
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	429a      	cmp	r2, r3
 800a146:	d3e2      	bcc.n	800a10e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3724      	adds	r7, #36	; 0x24
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr

0800a156 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a156:	b480      	push	{r7}
 800a158:	b08b      	sub	sp, #44	; 0x2c
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	60f8      	str	r0, [r7, #12]
 800a15e:	60b9      	str	r1, [r7, #8]
 800a160:	4613      	mov	r3, r2
 800a162:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a16c:	88fb      	ldrh	r3, [r7, #6]
 800a16e:	089b      	lsrs	r3, r3, #2
 800a170:	b29b      	uxth	r3, r3
 800a172:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a174:	88fb      	ldrh	r3, [r7, #6]
 800a176:	f003 0303 	and.w	r3, r3, #3
 800a17a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a17c:	2300      	movs	r3, #0
 800a17e:	623b      	str	r3, [r7, #32]
 800a180:	e014      	b.n	800a1ac <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18c:	601a      	str	r2, [r3, #0]
    pDest++;
 800a18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a190:	3301      	adds	r3, #1
 800a192:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a196:	3301      	adds	r3, #1
 800a198:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19c:	3301      	adds	r3, #1
 800a19e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a1a6:	6a3b      	ldr	r3, [r7, #32]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	623b      	str	r3, [r7, #32]
 800a1ac:	6a3a      	ldr	r2, [r7, #32]
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d3e6      	bcc.n	800a182 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a1b4:	8bfb      	ldrh	r3, [r7, #30]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d01e      	beq.n	800a1f8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a1be:	69bb      	ldr	r3, [r7, #24]
 800a1c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	f107 0310 	add.w	r3, r7, #16
 800a1ca:	6812      	ldr	r2, [r2, #0]
 800a1cc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a1ce:	693a      	ldr	r2, [r7, #16]
 800a1d0:	6a3b      	ldr	r3, [r7, #32]
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	00db      	lsls	r3, r3, #3
 800a1d6:	fa22 f303 	lsr.w	r3, r2, r3
 800a1da:	b2da      	uxtb	r2, r3
 800a1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1de:	701a      	strb	r2, [r3, #0]
      i++;
 800a1e0:	6a3b      	ldr	r3, [r7, #32]
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	623b      	str	r3, [r7, #32]
      pDest++;
 800a1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a1ec:	8bfb      	ldrh	r3, [r7, #30]
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a1f2:	8bfb      	ldrh	r3, [r7, #30]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d1ea      	bne.n	800a1ce <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	372c      	adds	r7, #44	; 0x2c
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr

0800a206 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a206:	b480      	push	{r7}
 800a208:	b085      	sub	sp, #20
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
 800a20e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	785b      	ldrb	r3, [r3, #1]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d12c      	bne.n	800a27c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	015a      	lsls	r2, r3, #5
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	4413      	add	r3, r2
 800a22a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	db12      	blt.n	800a25a <USB_EPSetStall+0x54>
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00f      	beq.n	800a25a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	015a      	lsls	r2, r3, #5
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	4413      	add	r3, r2
 800a242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	68ba      	ldr	r2, [r7, #8]
 800a24a:	0151      	lsls	r1, r2, #5
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	440a      	add	r2, r1
 800a250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a254:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a258:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	015a      	lsls	r2, r3, #5
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	4413      	add	r3, r2
 800a262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	0151      	lsls	r1, r2, #5
 800a26c:	68fa      	ldr	r2, [r7, #12]
 800a26e:	440a      	add	r2, r1
 800a270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a274:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a278:	6013      	str	r3, [r2, #0]
 800a27a:	e02b      	b.n	800a2d4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	015a      	lsls	r2, r3, #5
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	4413      	add	r3, r2
 800a284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	db12      	blt.n	800a2b4 <USB_EPSetStall+0xae>
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d00f      	beq.n	800a2b4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	015a      	lsls	r2, r3, #5
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	4413      	add	r3, r2
 800a29c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	68ba      	ldr	r2, [r7, #8]
 800a2a4:	0151      	lsls	r1, r2, #5
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	440a      	add	r2, r1
 800a2aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a2b2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	015a      	lsls	r2, r3, #5
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	68ba      	ldr	r2, [r7, #8]
 800a2c4:	0151      	lsls	r1, r2, #5
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	440a      	add	r2, r1
 800a2ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a2d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a2d4:	2300      	movs	r3, #0
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3714      	adds	r7, #20
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr

0800a2e2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2e2:	b480      	push	{r7}
 800a2e4:	b085      	sub	sp, #20
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
 800a2ea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	785b      	ldrb	r3, [r3, #1]
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d128      	bne.n	800a350 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	015a      	lsls	r2, r3, #5
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	4413      	add	r3, r2
 800a306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	68ba      	ldr	r2, [r7, #8]
 800a30e:	0151      	lsls	r1, r2, #5
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	440a      	add	r2, r1
 800a314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a318:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a31c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	78db      	ldrb	r3, [r3, #3]
 800a322:	2b03      	cmp	r3, #3
 800a324:	d003      	beq.n	800a32e <USB_EPClearStall+0x4c>
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	78db      	ldrb	r3, [r3, #3]
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	d138      	bne.n	800a3a0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	015a      	lsls	r2, r3, #5
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	4413      	add	r3, r2
 800a336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	68ba      	ldr	r2, [r7, #8]
 800a33e:	0151      	lsls	r1, r2, #5
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	440a      	add	r2, r1
 800a344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a34c:	6013      	str	r3, [r2, #0]
 800a34e:	e027      	b.n	800a3a0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	015a      	lsls	r2, r3, #5
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	4413      	add	r3, r2
 800a358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	68ba      	ldr	r2, [r7, #8]
 800a360:	0151      	lsls	r1, r2, #5
 800a362:	68fa      	ldr	r2, [r7, #12]
 800a364:	440a      	add	r2, r1
 800a366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a36a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a36e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	78db      	ldrb	r3, [r3, #3]
 800a374:	2b03      	cmp	r3, #3
 800a376:	d003      	beq.n	800a380 <USB_EPClearStall+0x9e>
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	78db      	ldrb	r3, [r3, #3]
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	d10f      	bne.n	800a3a0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	015a      	lsls	r2, r3, #5
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	4413      	add	r3, r2
 800a388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	68ba      	ldr	r2, [r7, #8]
 800a390:	0151      	lsls	r1, r2, #5
 800a392:	68fa      	ldr	r2, [r7, #12]
 800a394:	440a      	add	r2, r1
 800a396:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a39a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a39e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3714      	adds	r7, #20
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr

0800a3ae <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a3ae:	b480      	push	{r7}
 800a3b0:	b085      	sub	sp, #20
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3cc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a3d0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	78fb      	ldrb	r3, [r7, #3]
 800a3dc:	011b      	lsls	r3, r3, #4
 800a3de:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a3e2:	68f9      	ldr	r1, [r7, #12]
 800a3e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3714      	adds	r7, #20
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	b085      	sub	sp, #20
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	68fa      	ldr	r2, [r7, #12]
 800a410:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a414:	f023 0303 	bic.w	r3, r3, #3
 800a418:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	68fa      	ldr	r2, [r7, #12]
 800a424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a428:	f023 0302 	bic.w	r3, r3, #2
 800a42c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3714      	adds	r7, #20
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b085      	sub	sp, #20
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a456:	f023 0303 	bic.w	r3, r3, #3
 800a45a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a46a:	f043 0302 	orr.w	r3, r3, #2
 800a46e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3714      	adds	r7, #20
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a47e:	b480      	push	{r7}
 800a480:	b085      	sub	sp, #20
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	695b      	ldr	r3, [r3, #20]
 800a48a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	699b      	ldr	r3, [r3, #24]
 800a490:	68fa      	ldr	r2, [r7, #12]
 800a492:	4013      	ands	r3, r2
 800a494:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a496:	68fb      	ldr	r3, [r7, #12]
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3714      	adds	r7, #20
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4b6:	699b      	ldr	r3, [r3, #24]
 800a4b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4c0:	69db      	ldr	r3, [r3, #28]
 800a4c2:	68ba      	ldr	r2, [r7, #8]
 800a4c4:	4013      	ands	r3, r2
 800a4c6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	0c1b      	lsrs	r3, r3, #16
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3714      	adds	r7, #20
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4ea:	699b      	ldr	r3, [r3, #24]
 800a4ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4f4:	69db      	ldr	r3, [r3, #28]
 800a4f6:	68ba      	ldr	r2, [r7, #8]
 800a4f8:	4013      	ands	r3, r2
 800a4fa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	b29b      	uxth	r3, r3
}
 800a500:	4618      	mov	r0, r3
 800a502:	3714      	adds	r7, #20
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b085      	sub	sp, #20
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	460b      	mov	r3, r1
 800a516:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a51c:	78fb      	ldrb	r3, [r7, #3]
 800a51e:	015a      	lsls	r2, r3, #5
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	4413      	add	r3, r2
 800a524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a532:	695b      	ldr	r3, [r3, #20]
 800a534:	68ba      	ldr	r2, [r7, #8]
 800a536:	4013      	ands	r3, r2
 800a538:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a53a:	68bb      	ldr	r3, [r7, #8]
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3714      	adds	r7, #20
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a548:	b480      	push	{r7}
 800a54a:	b087      	sub	sp, #28
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	460b      	mov	r3, r1
 800a552:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a55e:	691b      	ldr	r3, [r3, #16]
 800a560:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a56a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a56c:	78fb      	ldrb	r3, [r7, #3]
 800a56e:	f003 030f 	and.w	r3, r3, #15
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	fa22 f303 	lsr.w	r3, r2, r3
 800a578:	01db      	lsls	r3, r3, #7
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	693a      	ldr	r2, [r7, #16]
 800a57e:	4313      	orrs	r3, r2
 800a580:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a582:	78fb      	ldrb	r3, [r7, #3]
 800a584:	015a      	lsls	r2, r3, #5
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	4413      	add	r3, r2
 800a58a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	693a      	ldr	r2, [r7, #16]
 800a592:	4013      	ands	r3, r2
 800a594:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a596:	68bb      	ldr	r3, [r7, #8]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	371c      	adds	r7, #28
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	695b      	ldr	r3, [r3, #20]
 800a5b0:	f003 0301 	and.w	r3, r3, #1
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	370c      	adds	r7, #12
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b085      	sub	sp, #20
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68fa      	ldr	r2, [r7, #12]
 800a5d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a5de:	f023 0307 	bic.w	r3, r3, #7
 800a5e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a5f8:	2300      	movs	r3, #0
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3714      	adds	r7, #20
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr
	...

0800a608 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a608:	b480      	push	{r7}
 800a60a:	b087      	sub	sp, #28
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	460b      	mov	r3, r1
 800a612:	607a      	str	r2, [r7, #4]
 800a614:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	333c      	adds	r3, #60	; 0x3c
 800a61e:	3304      	adds	r3, #4
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	4a26      	ldr	r2, [pc, #152]	; (800a6c0 <USB_EP0_OutStart+0xb8>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d90a      	bls.n	800a642 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a63c:	d101      	bne.n	800a642 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a63e:	2300      	movs	r3, #0
 800a640:	e037      	b.n	800a6b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a648:	461a      	mov	r2, r3
 800a64a:	2300      	movs	r3, #0
 800a64c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a654:	691b      	ldr	r3, [r3, #16]
 800a656:	697a      	ldr	r2, [r7, #20]
 800a658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a65c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a660:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	697a      	ldr	r2, [r7, #20]
 800a66c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a670:	f043 0318 	orr.w	r3, r3, #24
 800a674:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a67c:	691b      	ldr	r3, [r3, #16]
 800a67e:	697a      	ldr	r2, [r7, #20]
 800a680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a684:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a688:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a68a:	7afb      	ldrb	r3, [r7, #11]
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d10f      	bne.n	800a6b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a696:	461a      	mov	r2, r3
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	697a      	ldr	r2, [r7, #20]
 800a6a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a6ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a6b0:	2300      	movs	r3, #0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	371c      	adds	r7, #28
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop
 800a6c0:	4f54300a 	.word	0x4f54300a

0800a6c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b085      	sub	sp, #20
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	60fb      	str	r3, [r7, #12]
 800a6d6:	4a13      	ldr	r2, [pc, #76]	; (800a724 <USB_CoreReset+0x60>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d901      	bls.n	800a6e0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	e01a      	b.n	800a716 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	691b      	ldr	r3, [r3, #16]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	daf3      	bge.n	800a6d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	691b      	ldr	r3, [r3, #16]
 800a6f0:	f043 0201 	orr.w	r2, r3, #1
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	60fb      	str	r3, [r7, #12]
 800a6fe:	4a09      	ldr	r2, [pc, #36]	; (800a724 <USB_CoreReset+0x60>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d901      	bls.n	800a708 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800a704:	2303      	movs	r3, #3
 800a706:	e006      	b.n	800a716 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	f003 0301 	and.w	r3, r3, #1
 800a710:	2b01      	cmp	r3, #1
 800a712:	d0f1      	beq.n	800a6f8 <USB_CoreReset+0x34>

  return HAL_OK;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3714      	adds	r7, #20
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	00030d40 	.word	0x00030d40

0800a728 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a72c:	4904      	ldr	r1, [pc, #16]	; (800a740 <MX_FATFS_Init+0x18>)
 800a72e:	4805      	ldr	r0, [pc, #20]	; (800a744 <MX_FATFS_Init+0x1c>)
 800a730:	f004 f898 	bl	800e864 <FATFS_LinkDriver>
 800a734:	4603      	mov	r3, r0
 800a736:	461a      	mov	r2, r3
 800a738:	4b03      	ldr	r3, [pc, #12]	; (800a748 <MX_FATFS_Init+0x20>)
 800a73a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a73c:	bf00      	nop
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	200014ec 	.word	0x200014ec
 800a744:	08012b98 	.word	0x08012b98
 800a748:	200014e8 	.word	0x200014e8

0800a74c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a74c:	b480      	push	{r7}
 800a74e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a750:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a752:	4618      	mov	r0, r3
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a762:	2300      	movs	r3, #0
 800a764:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a766:	f000 f896 	bl	800a896 <BSP_SD_IsDetected>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d001      	beq.n	800a774 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	e012      	b.n	800a79a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a774:	480b      	ldr	r0, [pc, #44]	; (800a7a4 <BSP_SD_Init+0x48>)
 800a776:	f7fb fd09 	bl	800618c <HAL_SD_Init>
 800a77a:	4603      	mov	r3, r0
 800a77c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a77e:	79fb      	ldrb	r3, [r7, #7]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d109      	bne.n	800a798 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a784:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a788:	4806      	ldr	r0, [pc, #24]	; (800a7a4 <BSP_SD_Init+0x48>)
 800a78a:	f7fc fad5 	bl	8006d38 <HAL_SD_ConfigWideBusOperation>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d001      	beq.n	800a798 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a798:	79fb      	ldrb	r3, [r7, #7]
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3708      	adds	r7, #8
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	20000f90 	.word	0x20000f90

0800a7a8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b086      	sub	sp, #24
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	68ba      	ldr	r2, [r7, #8]
 800a7bc:	68f9      	ldr	r1, [r7, #12]
 800a7be:	4806      	ldr	r0, [pc, #24]	; (800a7d8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a7c0:	f7fb fd92 	bl	80062e8 <HAL_SD_ReadBlocks_DMA>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d001      	beq.n	800a7ce <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a7ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3718      	adds	r7, #24
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	20000f90 	.word	0x20000f90

0800a7dc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b086      	sub	sp, #24
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	68f9      	ldr	r1, [r7, #12]
 800a7f2:	4806      	ldr	r0, [pc, #24]	; (800a80c <BSP_SD_WriteBlocks_DMA+0x30>)
 800a7f4:	f7fb fe5a 	bl	80064ac <HAL_SD_WriteBlocks_DMA>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d001      	beq.n	800a802 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a802:	7dfb      	ldrb	r3, [r7, #23]
}
 800a804:	4618      	mov	r0, r3
 800a806:	3718      	adds	r7, #24
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	20000f90 	.word	0x20000f90

0800a810 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a814:	4805      	ldr	r0, [pc, #20]	; (800a82c <BSP_SD_GetCardState+0x1c>)
 800a816:	f7fc fb29 	bl	8006e6c <HAL_SD_GetCardState>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b04      	cmp	r3, #4
 800a81e:	bf14      	ite	ne
 800a820:	2301      	movne	r3, #1
 800a822:	2300      	moveq	r3, #0
 800a824:	b2db      	uxtb	r3, r3
}
 800a826:	4618      	mov	r0, r3
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	20000f90 	.word	0x20000f90

0800a830 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a838:	6879      	ldr	r1, [r7, #4]
 800a83a:	4803      	ldr	r0, [pc, #12]	; (800a848 <BSP_SD_GetCardInfo+0x18>)
 800a83c:	f7fc fa50 	bl	8006ce0 <HAL_SD_GetCardInfo>
}
 800a840:	bf00      	nop
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	20000f90 	.word	0x20000f90

0800a84c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a854:	f000 f818 	bl	800a888 <BSP_SD_AbortCallback>
}
 800a858:	bf00      	nop
 800a85a:	3708      	adds	r7, #8
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a868:	f000 f9a8 	bl	800abbc <BSP_SD_WriteCpltCallback>
}
 800a86c:	bf00      	nop
 800a86e:	3708      	adds	r7, #8
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a87c:	f000 f9aa 	bl	800abd4 <BSP_SD_ReadCpltCallback>
}
 800a880:	bf00      	nop
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a888:	b480      	push	{r7}
 800a88a:	af00      	add	r7, sp, #0

}
 800a88c:	bf00      	nop
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b082      	sub	sp, #8
 800a89a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a89c:	2301      	movs	r3, #1
 800a89e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a8a0:	f000 f80c 	bl	800a8bc <BSP_PlatformIsDetected>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d101      	bne.n	800a8ae <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a8ae:	79fb      	ldrb	r3, [r7, #7]
 800a8b0:	b2db      	uxtb	r3, r3
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3708      	adds	r7, #8
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
	...

0800a8bc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b082      	sub	sp, #8
 800a8c0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a8c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a8ca:	4806      	ldr	r0, [pc, #24]	; (800a8e4 <BSP_PlatformIsDetected+0x28>)
 800a8cc:	f7f8 feb6 	bl	800363c <HAL_GPIO_ReadPin>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d001      	beq.n	800a8da <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a8da:	79fb      	ldrb	r3, [r7, #7]
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3708      	adds	r7, #8
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	40020000 	.word	0x40020000

0800a8e8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800a8f0:	f7f8 f840 	bl	8002974 <HAL_GetTick>
 800a8f4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800a8f6:	e006      	b.n	800a906 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a8f8:	f7ff ff8a 	bl	800a810 <BSP_SD_GetCardState>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d101      	bne.n	800a906 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a902:	2300      	movs	r3, #0
 800a904:	e009      	b.n	800a91a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800a906:	f7f8 f835 	bl	8002974 <HAL_GetTick>
 800a90a:	4602      	mov	r2, r0
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	1ad3      	subs	r3, r2, r3
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	429a      	cmp	r2, r3
 800a914:	d8f0      	bhi.n	800a8f8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a916:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3710      	adds	r7, #16
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
	...

0800a924 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	4603      	mov	r3, r0
 800a92c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a92e:	4b0b      	ldr	r3, [pc, #44]	; (800a95c <SD_CheckStatus+0x38>)
 800a930:	2201      	movs	r2, #1
 800a932:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a934:	f7ff ff6c 	bl	800a810 <BSP_SD_GetCardState>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d107      	bne.n	800a94e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a93e:	4b07      	ldr	r3, [pc, #28]	; (800a95c <SD_CheckStatus+0x38>)
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	b2db      	uxtb	r3, r3
 800a944:	f023 0301 	bic.w	r3, r3, #1
 800a948:	b2da      	uxtb	r2, r3
 800a94a:	4b04      	ldr	r3, [pc, #16]	; (800a95c <SD_CheckStatus+0x38>)
 800a94c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a94e:	4b03      	ldr	r3, [pc, #12]	; (800a95c <SD_CheckStatus+0x38>)
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	b2db      	uxtb	r3, r3
}
 800a954:	4618      	mov	r0, r3
 800a956:	3708      	adds	r7, #8
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	20000009 	.word	0x20000009

0800a960 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	4603      	mov	r3, r0
 800a968:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a96a:	f7ff fef7 	bl	800a75c <BSP_SD_Init>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d107      	bne.n	800a984 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800a974:	79fb      	ldrb	r3, [r7, #7]
 800a976:	4618      	mov	r0, r3
 800a978:	f7ff ffd4 	bl	800a924 <SD_CheckStatus>
 800a97c:	4603      	mov	r3, r0
 800a97e:	461a      	mov	r2, r3
 800a980:	4b04      	ldr	r3, [pc, #16]	; (800a994 <SD_initialize+0x34>)
 800a982:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a984:	4b03      	ldr	r3, [pc, #12]	; (800a994 <SD_initialize+0x34>)
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	b2db      	uxtb	r3, r3
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3708      	adds	r7, #8
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	20000009 	.word	0x20000009

0800a998 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	4603      	mov	r3, r0
 800a9a0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a9a2:	79fb      	ldrb	r3, [r7, #7]
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7ff ffbd 	bl	800a924 <SD_CheckStatus>
 800a9aa:	4603      	mov	r3, r0
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3708      	adds	r7, #8
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b086      	sub	sp, #24
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	60b9      	str	r1, [r7, #8]
 800a9bc:	607a      	str	r2, [r7, #4]
 800a9be:	603b      	str	r3, [r7, #0]
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a9c8:	f247 5030 	movw	r0, #30000	; 0x7530
 800a9cc:	f7ff ff8c 	bl	800a8e8 <SD_CheckStatusWithTimeout>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	da01      	bge.n	800a9da <SD_read+0x26>
  {
    return res;
 800a9d6:	7dfb      	ldrb	r3, [r7, #23]
 800a9d8:	e03b      	b.n	800aa52 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800a9da:	683a      	ldr	r2, [r7, #0]
 800a9dc:	6879      	ldr	r1, [r7, #4]
 800a9de:	68b8      	ldr	r0, [r7, #8]
 800a9e0:	f7ff fee2 	bl	800a7a8 <BSP_SD_ReadBlocks_DMA>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d132      	bne.n	800aa50 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800a9ea:	4b1c      	ldr	r3, [pc, #112]	; (800aa5c <SD_read+0xa8>)
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800a9f0:	f7f7 ffc0 	bl	8002974 <HAL_GetTick>
 800a9f4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a9f6:	bf00      	nop
 800a9f8:	4b18      	ldr	r3, [pc, #96]	; (800aa5c <SD_read+0xa8>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d108      	bne.n	800aa12 <SD_read+0x5e>
 800aa00:	f7f7 ffb8 	bl	8002974 <HAL_GetTick>
 800aa04:	4602      	mov	r2, r0
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	1ad3      	subs	r3, r2, r3
 800aa0a:	f247 522f 	movw	r2, #29999	; 0x752f
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d9f2      	bls.n	800a9f8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800aa12:	4b12      	ldr	r3, [pc, #72]	; (800aa5c <SD_read+0xa8>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d102      	bne.n	800aa20 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	75fb      	strb	r3, [r7, #23]
 800aa1e:	e017      	b.n	800aa50 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800aa20:	4b0e      	ldr	r3, [pc, #56]	; (800aa5c <SD_read+0xa8>)
 800aa22:	2200      	movs	r2, #0
 800aa24:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800aa26:	f7f7 ffa5 	bl	8002974 <HAL_GetTick>
 800aa2a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aa2c:	e007      	b.n	800aa3e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aa2e:	f7ff feef 	bl	800a810 <BSP_SD_GetCardState>
 800aa32:	4603      	mov	r3, r0
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d102      	bne.n	800aa3e <SD_read+0x8a>
          {
            res = RES_OK;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800aa3c:	e008      	b.n	800aa50 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aa3e:	f7f7 ff99 	bl	8002974 <HAL_GetTick>
 800aa42:	4602      	mov	r2, r0
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	1ad3      	subs	r3, r2, r3
 800aa48:	f247 522f 	movw	r2, #29999	; 0x752f
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d9ee      	bls.n	800aa2e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800aa50:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3718      	adds	r7, #24
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	20000b7c 	.word	0x20000b7c

0800aa60 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b086      	sub	sp, #24
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60b9      	str	r1, [r7, #8]
 800aa68:	607a      	str	r2, [r7, #4]
 800aa6a:	603b      	str	r3, [r7, #0]
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800aa70:	2301      	movs	r3, #1
 800aa72:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800aa74:	4b24      	ldr	r3, [pc, #144]	; (800ab08 <SD_write+0xa8>)
 800aa76:	2200      	movs	r2, #0
 800aa78:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800aa7a:	f247 5030 	movw	r0, #30000	; 0x7530
 800aa7e:	f7ff ff33 	bl	800a8e8 <SD_CheckStatusWithTimeout>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	da01      	bge.n	800aa8c <SD_write+0x2c>
  {
    return res;
 800aa88:	7dfb      	ldrb	r3, [r7, #23]
 800aa8a:	e038      	b.n	800aafe <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800aa8c:	683a      	ldr	r2, [r7, #0]
 800aa8e:	6879      	ldr	r1, [r7, #4]
 800aa90:	68b8      	ldr	r0, [r7, #8]
 800aa92:	f7ff fea3 	bl	800a7dc <BSP_SD_WriteBlocks_DMA>
 800aa96:	4603      	mov	r3, r0
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d12f      	bne.n	800aafc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800aa9c:	f7f7 ff6a 	bl	8002974 <HAL_GetTick>
 800aaa0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800aaa2:	bf00      	nop
 800aaa4:	4b18      	ldr	r3, [pc, #96]	; (800ab08 <SD_write+0xa8>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d108      	bne.n	800aabe <SD_write+0x5e>
 800aaac:	f7f7 ff62 	bl	8002974 <HAL_GetTick>
 800aab0:	4602      	mov	r2, r0
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	1ad3      	subs	r3, r2, r3
 800aab6:	f247 522f 	movw	r2, #29999	; 0x752f
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d9f2      	bls.n	800aaa4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800aabe:	4b12      	ldr	r3, [pc, #72]	; (800ab08 <SD_write+0xa8>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d102      	bne.n	800aacc <SD_write+0x6c>
      {
        res = RES_ERROR;
 800aac6:	2301      	movs	r3, #1
 800aac8:	75fb      	strb	r3, [r7, #23]
 800aaca:	e017      	b.n	800aafc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800aacc:	4b0e      	ldr	r3, [pc, #56]	; (800ab08 <SD_write+0xa8>)
 800aace:	2200      	movs	r2, #0
 800aad0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800aad2:	f7f7 ff4f 	bl	8002974 <HAL_GetTick>
 800aad6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aad8:	e007      	b.n	800aaea <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aada:	f7ff fe99 	bl	800a810 <BSP_SD_GetCardState>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d102      	bne.n	800aaea <SD_write+0x8a>
          {
            res = RES_OK;
 800aae4:	2300      	movs	r3, #0
 800aae6:	75fb      	strb	r3, [r7, #23]
            break;
 800aae8:	e008      	b.n	800aafc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aaea:	f7f7 ff43 	bl	8002974 <HAL_GetTick>
 800aaee:	4602      	mov	r2, r0
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	1ad3      	subs	r3, r2, r3
 800aaf4:	f247 522f 	movw	r2, #29999	; 0x752f
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d9ee      	bls.n	800aada <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800aafc:	7dfb      	ldrb	r3, [r7, #23]
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3718      	adds	r7, #24
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	20000b78 	.word	0x20000b78

0800ab0c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b08c      	sub	sp, #48	; 0x30
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	4603      	mov	r3, r0
 800ab14:	603a      	str	r2, [r7, #0]
 800ab16:	71fb      	strb	r3, [r7, #7]
 800ab18:	460b      	mov	r3, r1
 800ab1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ab22:	4b25      	ldr	r3, [pc, #148]	; (800abb8 <SD_ioctl+0xac>)
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	f003 0301 	and.w	r3, r3, #1
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d001      	beq.n	800ab34 <SD_ioctl+0x28>
 800ab30:	2303      	movs	r3, #3
 800ab32:	e03c      	b.n	800abae <SD_ioctl+0xa2>

  switch (cmd)
 800ab34:	79bb      	ldrb	r3, [r7, #6]
 800ab36:	2b03      	cmp	r3, #3
 800ab38:	d834      	bhi.n	800aba4 <SD_ioctl+0x98>
 800ab3a:	a201      	add	r2, pc, #4	; (adr r2, 800ab40 <SD_ioctl+0x34>)
 800ab3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab40:	0800ab51 	.word	0x0800ab51
 800ab44:	0800ab59 	.word	0x0800ab59
 800ab48:	0800ab71 	.word	0x0800ab71
 800ab4c:	0800ab8b 	.word	0x0800ab8b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ab50:	2300      	movs	r3, #0
 800ab52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ab56:	e028      	b.n	800abaa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ab58:	f107 030c 	add.w	r3, r7, #12
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7ff fe67 	bl	800a830 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ab62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ab6e:	e01c      	b.n	800abaa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ab70:	f107 030c 	add.w	r3, r7, #12
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7ff fe5b 	bl	800a830 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ab7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7c:	b29a      	uxth	r2, r3
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ab82:	2300      	movs	r3, #0
 800ab84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ab88:	e00f      	b.n	800abaa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ab8a:	f107 030c 	add.w	r3, r7, #12
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7ff fe4e 	bl	800a830 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ab94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab96:	0a5a      	lsrs	r2, r3, #9
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800aba2:	e002      	b.n	800abaa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800aba4:	2304      	movs	r3, #4
 800aba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800abaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3730      	adds	r7, #48	; 0x30
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	20000009 	.word	0x20000009

0800abbc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800abbc:	b480      	push	{r7}
 800abbe:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800abc0:	4b03      	ldr	r3, [pc, #12]	; (800abd0 <BSP_SD_WriteCpltCallback+0x14>)
 800abc2:	2201      	movs	r2, #1
 800abc4:	601a      	str	r2, [r3, #0]
}
 800abc6:	bf00      	nop
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr
 800abd0:	20000b78 	.word	0x20000b78

0800abd4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800abd4:	b480      	push	{r7}
 800abd6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800abd8:	4b03      	ldr	r3, [pc, #12]	; (800abe8 <BSP_SD_ReadCpltCallback+0x14>)
 800abda:	2201      	movs	r2, #1
 800abdc:	601a      	str	r2, [r3, #0]
}
 800abde:	bf00      	nop
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr
 800abe8:	20000b7c 	.word	0x20000b7c

0800abec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	460b      	mov	r3, r1
 800abf6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800abf8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800abfc:	f004 fb80 	bl	800f300 <USBD_static_malloc>
 800ac00:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d105      	bne.n	800ac14 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ac10:	2302      	movs	r3, #2
 800ac12:	e066      	b.n	800ace2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	7c1b      	ldrb	r3, [r3, #16]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d119      	bne.n	800ac58 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ac24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac28:	2202      	movs	r2, #2
 800ac2a:	2181      	movs	r1, #129	; 0x81
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f004 fa44 	bl	800f0ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2201      	movs	r2, #1
 800ac36:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ac38:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac3c:	2202      	movs	r2, #2
 800ac3e:	2101      	movs	r1, #1
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f004 fa3a 	bl	800f0ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2201      	movs	r2, #1
 800ac4a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2210      	movs	r2, #16
 800ac52:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ac56:	e016      	b.n	800ac86 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ac58:	2340      	movs	r3, #64	; 0x40
 800ac5a:	2202      	movs	r2, #2
 800ac5c:	2181      	movs	r1, #129	; 0x81
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f004 fa2b 	bl	800f0ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2201      	movs	r2, #1
 800ac68:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ac6a:	2340      	movs	r3, #64	; 0x40
 800ac6c:	2202      	movs	r2, #2
 800ac6e:	2101      	movs	r1, #1
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f004 fa22 	bl	800f0ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2201      	movs	r2, #1
 800ac7a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2210      	movs	r2, #16
 800ac82:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ac86:	2308      	movs	r3, #8
 800ac88:	2203      	movs	r2, #3
 800ac8a:	2182      	movs	r1, #130	; 0x82
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f004 fa14 	bl	800f0ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2201      	movs	r2, #1
 800ac96:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2200      	movs	r2, #0
 800aca8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2200      	movs	r2, #0
 800acb0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	7c1b      	ldrb	r3, [r3, #16]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d109      	bne.n	800acd0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800acc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acc6:	2101      	movs	r1, #1
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f004 fae5 	bl	800f298 <USBD_LL_PrepareReceive>
 800acce:	e007      	b.n	800ace0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800acd6:	2340      	movs	r3, #64	; 0x40
 800acd8:	2101      	movs	r1, #1
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f004 fadc 	bl	800f298 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ace0:	2300      	movs	r3, #0
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b082      	sub	sp, #8
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
 800acf2:	460b      	mov	r3, r1
 800acf4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800acf6:	2181      	movs	r1, #129	; 0x81
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f004 fa04 	bl	800f106 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ad04:	2101      	movs	r1, #1
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f004 f9fd 	bl	800f106 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ad14:	2182      	movs	r1, #130	; 0x82
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f004 f9f5 	bl	800f106 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00e      	beq.n	800ad54 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad46:	4618      	mov	r0, r3
 800ad48:	f004 fae8 	bl	800f31c <USBD_static_free>
    pdev->pClassData = NULL;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ad54:	2300      	movs	r3, #0
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3708      	adds	r7, #8
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
	...

0800ad60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b086      	sub	sp, #24
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad70:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ad72:	2300      	movs	r3, #0
 800ad74:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ad76:	2300      	movs	r3, #0
 800ad78:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d101      	bne.n	800ad88 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ad84:	2303      	movs	r3, #3
 800ad86:	e0af      	b.n	800aee8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d03f      	beq.n	800ae14 <USBD_CDC_Setup+0xb4>
 800ad94:	2b20      	cmp	r3, #32
 800ad96:	f040 809f 	bne.w	800aed8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	88db      	ldrh	r3, [r3, #6]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d02e      	beq.n	800ae00 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	b25b      	sxtb	r3, r3
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	da16      	bge.n	800adda <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	683a      	ldr	r2, [r7, #0]
 800adb6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800adb8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800adba:	683a      	ldr	r2, [r7, #0]
 800adbc:	88d2      	ldrh	r2, [r2, #6]
 800adbe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	88db      	ldrh	r3, [r3, #6]
 800adc4:	2b07      	cmp	r3, #7
 800adc6:	bf28      	it	cs
 800adc8:	2307      	movcs	r3, #7
 800adca:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	89fa      	ldrh	r2, [r7, #14]
 800add0:	4619      	mov	r1, r3
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f001 fae9 	bl	800c3aa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800add8:	e085      	b.n	800aee6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	785a      	ldrb	r2, [r3, #1]
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	88db      	ldrh	r3, [r3, #6]
 800ade8:	b2da      	uxtb	r2, r3
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800adf0:	6939      	ldr	r1, [r7, #16]
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	88db      	ldrh	r3, [r3, #6]
 800adf6:	461a      	mov	r2, r3
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f001 fb02 	bl	800c402 <USBD_CtlPrepareRx>
      break;
 800adfe:	e072      	b.n	800aee6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	683a      	ldr	r2, [r7, #0]
 800ae0a:	7850      	ldrb	r0, [r2, #1]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	6839      	ldr	r1, [r7, #0]
 800ae10:	4798      	blx	r3
      break;
 800ae12:	e068      	b.n	800aee6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	785b      	ldrb	r3, [r3, #1]
 800ae18:	2b0b      	cmp	r3, #11
 800ae1a:	d852      	bhi.n	800aec2 <USBD_CDC_Setup+0x162>
 800ae1c:	a201      	add	r2, pc, #4	; (adr r2, 800ae24 <USBD_CDC_Setup+0xc4>)
 800ae1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae22:	bf00      	nop
 800ae24:	0800ae55 	.word	0x0800ae55
 800ae28:	0800aed1 	.word	0x0800aed1
 800ae2c:	0800aec3 	.word	0x0800aec3
 800ae30:	0800aec3 	.word	0x0800aec3
 800ae34:	0800aec3 	.word	0x0800aec3
 800ae38:	0800aec3 	.word	0x0800aec3
 800ae3c:	0800aec3 	.word	0x0800aec3
 800ae40:	0800aec3 	.word	0x0800aec3
 800ae44:	0800aec3 	.word	0x0800aec3
 800ae48:	0800aec3 	.word	0x0800aec3
 800ae4c:	0800ae7f 	.word	0x0800ae7f
 800ae50:	0800aea9 	.word	0x0800aea9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae5a:	b2db      	uxtb	r3, r3
 800ae5c:	2b03      	cmp	r3, #3
 800ae5e:	d107      	bne.n	800ae70 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ae60:	f107 030a 	add.w	r3, r7, #10
 800ae64:	2202      	movs	r2, #2
 800ae66:	4619      	mov	r1, r3
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f001 fa9e 	bl	800c3aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae6e:	e032      	b.n	800aed6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ae70:	6839      	ldr	r1, [r7, #0]
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f001 fa28 	bl	800c2c8 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae78:	2303      	movs	r3, #3
 800ae7a:	75fb      	strb	r3, [r7, #23]
          break;
 800ae7c:	e02b      	b.n	800aed6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	2b03      	cmp	r3, #3
 800ae88:	d107      	bne.n	800ae9a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ae8a:	f107 030d 	add.w	r3, r7, #13
 800ae8e:	2201      	movs	r2, #1
 800ae90:	4619      	mov	r1, r3
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f001 fa89 	bl	800c3aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae98:	e01d      	b.n	800aed6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ae9a:	6839      	ldr	r1, [r7, #0]
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f001 fa13 	bl	800c2c8 <USBD_CtlError>
            ret = USBD_FAIL;
 800aea2:	2303      	movs	r3, #3
 800aea4:	75fb      	strb	r3, [r7, #23]
          break;
 800aea6:	e016      	b.n	800aed6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	2b03      	cmp	r3, #3
 800aeb2:	d00f      	beq.n	800aed4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800aeb4:	6839      	ldr	r1, [r7, #0]
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f001 fa06 	bl	800c2c8 <USBD_CtlError>
            ret = USBD_FAIL;
 800aebc:	2303      	movs	r3, #3
 800aebe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aec0:	e008      	b.n	800aed4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aec2:	6839      	ldr	r1, [r7, #0]
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f001 f9ff 	bl	800c2c8 <USBD_CtlError>
          ret = USBD_FAIL;
 800aeca:	2303      	movs	r3, #3
 800aecc:	75fb      	strb	r3, [r7, #23]
          break;
 800aece:	e002      	b.n	800aed6 <USBD_CDC_Setup+0x176>
          break;
 800aed0:	bf00      	nop
 800aed2:	e008      	b.n	800aee6 <USBD_CDC_Setup+0x186>
          break;
 800aed4:	bf00      	nop
      }
      break;
 800aed6:	e006      	b.n	800aee6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800aed8:	6839      	ldr	r1, [r7, #0]
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f001 f9f4 	bl	800c2c8 <USBD_CtlError>
      ret = USBD_FAIL;
 800aee0:	2303      	movs	r3, #3
 800aee2:	75fb      	strb	r3, [r7, #23]
      break;
 800aee4:	bf00      	nop
  }

  return (uint8_t)ret;
 800aee6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3718      	adds	r7, #24
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	460b      	mov	r3, r1
 800aefa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800af02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d101      	bne.n	800af12 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800af0e:	2303      	movs	r3, #3
 800af10:	e04f      	b.n	800afb2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af18:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800af1a:	78fa      	ldrb	r2, [r7, #3]
 800af1c:	6879      	ldr	r1, [r7, #4]
 800af1e:	4613      	mov	r3, r2
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	4413      	add	r3, r2
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	440b      	add	r3, r1
 800af28:	3318      	adds	r3, #24
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d029      	beq.n	800af84 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800af30:	78fa      	ldrb	r2, [r7, #3]
 800af32:	6879      	ldr	r1, [r7, #4]
 800af34:	4613      	mov	r3, r2
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	4413      	add	r3, r2
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	440b      	add	r3, r1
 800af3e:	3318      	adds	r3, #24
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	78f9      	ldrb	r1, [r7, #3]
 800af44:	68f8      	ldr	r0, [r7, #12]
 800af46:	460b      	mov	r3, r1
 800af48:	00db      	lsls	r3, r3, #3
 800af4a:	1a5b      	subs	r3, r3, r1
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	4403      	add	r3, r0
 800af50:	3344      	adds	r3, #68	; 0x44
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	fbb2 f1f3 	udiv	r1, r2, r3
 800af58:	fb03 f301 	mul.w	r3, r3, r1
 800af5c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d110      	bne.n	800af84 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800af62:	78fa      	ldrb	r2, [r7, #3]
 800af64:	6879      	ldr	r1, [r7, #4]
 800af66:	4613      	mov	r3, r2
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	4413      	add	r3, r2
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	440b      	add	r3, r1
 800af70:	3318      	adds	r3, #24
 800af72:	2200      	movs	r2, #0
 800af74:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800af76:	78f9      	ldrb	r1, [r7, #3]
 800af78:	2300      	movs	r3, #0
 800af7a:	2200      	movs	r2, #0
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f004 f96a 	bl	800f256 <USBD_LL_Transmit>
 800af82:	e015      	b.n	800afb0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	2200      	movs	r2, #0
 800af88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00b      	beq.n	800afb0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	68ba      	ldr	r2, [r7, #8]
 800afa2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800afa6:	68ba      	ldr	r2, [r7, #8]
 800afa8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800afac:	78fa      	ldrb	r2, [r7, #3]
 800afae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800afb0:	2300      	movs	r3, #0
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3710      	adds	r7, #16
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b084      	sub	sp, #16
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
 800afc2:	460b      	mov	r3, r1
 800afc4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afcc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d101      	bne.n	800afdc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800afd8:	2303      	movs	r3, #3
 800afda:	e015      	b.n	800b008 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800afdc:	78fb      	ldrb	r3, [r7, #3]
 800afde:	4619      	mov	r1, r3
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f004 f97a 	bl	800f2da <USBD_LL_GetRxDataSize>
 800afe6:	4602      	mov	r2, r0
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	68fa      	ldr	r2, [r7, #12]
 800aff8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b002:	4611      	mov	r1, r2
 800b004:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3710      	adds	r7, #16
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b01e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d101      	bne.n	800b02a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b026:	2303      	movs	r3, #3
 800b028:	e01b      	b.n	800b062 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d015      	beq.n	800b060 <USBD_CDC_EP0_RxReady+0x50>
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b03a:	2bff      	cmp	r3, #255	; 0xff
 800b03c:	d010      	beq.n	800b060 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	68fa      	ldr	r2, [r7, #12]
 800b048:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b04c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b04e:	68fa      	ldr	r2, [r7, #12]
 800b050:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b054:	b292      	uxth	r2, r2
 800b056:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	22ff      	movs	r2, #255	; 0xff
 800b05c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b060:	2300      	movs	r3, #0
}
 800b062:	4618      	mov	r0, r3
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
	...

0800b06c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2243      	movs	r2, #67	; 0x43
 800b078:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b07a:	4b03      	ldr	r3, [pc, #12]	; (800b088 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	370c      	adds	r7, #12
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr
 800b088:	20000094 	.word	0x20000094

0800b08c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2243      	movs	r2, #67	; 0x43
 800b098:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b09a:	4b03      	ldr	r3, [pc, #12]	; (800b0a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr
 800b0a8:	20000050 	.word	0x20000050

0800b0ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2243      	movs	r2, #67	; 0x43
 800b0b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b0ba:	4b03      	ldr	r3, [pc, #12]	; (800b0c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	370c      	adds	r7, #12
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr
 800b0c8:	200000d8 	.word	0x200000d8

0800b0cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	220a      	movs	r2, #10
 800b0d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b0da:	4b03      	ldr	r3, [pc, #12]	; (800b0e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	370c      	adds	r7, #12
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr
 800b0e8:	2000000c 	.word	0x2000000c

0800b0ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b083      	sub	sp, #12
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d101      	bne.n	800b100 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b0fc:	2303      	movs	r3, #3
 800b0fe:	e004      	b.n	800b10a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	683a      	ldr	r2, [r7, #0]
 800b104:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b108:	2300      	movs	r3, #0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	370c      	adds	r7, #12
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr

0800b116 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b116:	b480      	push	{r7}
 800b118:	b087      	sub	sp, #28
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	60f8      	str	r0, [r7, #12]
 800b11e:	60b9      	str	r1, [r7, #8]
 800b120:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b128:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d101      	bne.n	800b134 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b130:	2303      	movs	r3, #3
 800b132:	e008      	b.n	800b146 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	68ba      	ldr	r2, [r7, #8]
 800b138:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b144:	2300      	movs	r3, #0
}
 800b146:	4618      	mov	r0, r3
 800b148:	371c      	adds	r7, #28
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr

0800b152 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b152:	b480      	push	{r7}
 800b154:	b085      	sub	sp, #20
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
 800b15a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b162:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d101      	bne.n	800b16e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b16a:	2303      	movs	r3, #3
 800b16c:	e004      	b.n	800b178 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	683a      	ldr	r2, [r7, #0]
 800b172:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b176:	2300      	movs	r3, #0
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3714      	adds	r7, #20
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b192:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d101      	bne.n	800b1a2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b19e:	2303      	movs	r3, #3
 800b1a0:	e016      	b.n	800b1d0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	7c1b      	ldrb	r3, [r3, #16]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d109      	bne.n	800b1be <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b1b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1b4:	2101      	movs	r1, #1
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f004 f86e 	bl	800f298 <USBD_LL_PrepareReceive>
 800b1bc:	e007      	b.n	800b1ce <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b1c4:	2340      	movs	r3, #64	; 0x40
 800b1c6:	2101      	movs	r1, #1
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f004 f865 	bl	800f298 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b1ce:	2300      	movs	r3, #0
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b086      	sub	sp, #24
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	4613      	mov	r3, r2
 800b1e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d101      	bne.n	800b1f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b1ec:	2303      	movs	r3, #3
 800b1ee:	e01f      	b.n	800b230 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2200      	movs	r2, #0
 800b204:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d003      	beq.n	800b216 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	68ba      	ldr	r2, [r7, #8]
 800b212:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2201      	movs	r2, #1
 800b21a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	79fa      	ldrb	r2, [r7, #7]
 800b222:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f003 fee1 	bl	800efec <USBD_LL_Init>
 800b22a:	4603      	mov	r3, r0
 800b22c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b22e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3718      	adds	r7, #24
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b242:	2300      	movs	r3, #0
 800b244:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d101      	bne.n	800b250 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b24c:	2303      	movs	r3, #3
 800b24e:	e016      	b.n	800b27e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	683a      	ldr	r2, [r7, #0]
 800b254:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b260:	2b00      	cmp	r3, #0
 800b262:	d00b      	beq.n	800b27c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26c:	f107 020e 	add.w	r2, r7, #14
 800b270:	4610      	mov	r0, r2
 800b272:	4798      	blx	r3
 800b274:	4602      	mov	r2, r0
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b27c:	2300      	movs	r3, #0
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3710      	adds	r7, #16
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}

0800b286 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b286:	b580      	push	{r7, lr}
 800b288:	b082      	sub	sp, #8
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f003 fef8 	bl	800f084 <USBD_LL_Start>
 800b294:	4603      	mov	r3, r0
}
 800b296:	4618      	mov	r0, r3
 800b298:	3708      	adds	r7, #8
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b29e:	b480      	push	{r7}
 800b2a0:	b083      	sub	sp, #12
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b2a6:	2300      	movs	r3, #0
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	370c      	adds	r7, #12
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	460b      	mov	r3, r1
 800b2be:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b2c0:	2303      	movs	r3, #3
 800b2c2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d009      	beq.n	800b2e2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	78fa      	ldrb	r2, [r7, #3]
 800b2d8:	4611      	mov	r1, r2
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	4798      	blx	r3
 800b2de:	4603      	mov	r3, r0
 800b2e0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b2e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3710      	adds	r7, #16
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d007      	beq.n	800b312 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	78fa      	ldrb	r2, [r7, #3]
 800b30c:	4611      	mov	r1, r2
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	4798      	blx	r3
  }

  return USBD_OK;
 800b312:	2300      	movs	r3, #0
}
 800b314:	4618      	mov	r0, r3
 800b316:	3708      	adds	r7, #8
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b32c:	6839      	ldr	r1, [r7, #0]
 800b32e:	4618      	mov	r0, r3
 800b330:	f000 ff90 	bl	800c254 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2201      	movs	r2, #1
 800b338:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b342:	461a      	mov	r2, r3
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b350:	f003 031f 	and.w	r3, r3, #31
 800b354:	2b02      	cmp	r3, #2
 800b356:	d01a      	beq.n	800b38e <USBD_LL_SetupStage+0x72>
 800b358:	2b02      	cmp	r3, #2
 800b35a:	d822      	bhi.n	800b3a2 <USBD_LL_SetupStage+0x86>
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d002      	beq.n	800b366 <USBD_LL_SetupStage+0x4a>
 800b360:	2b01      	cmp	r3, #1
 800b362:	d00a      	beq.n	800b37a <USBD_LL_SetupStage+0x5e>
 800b364:	e01d      	b.n	800b3a2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b36c:	4619      	mov	r1, r3
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 fa62 	bl	800b838 <USBD_StdDevReq>
 800b374:	4603      	mov	r3, r0
 800b376:	73fb      	strb	r3, [r7, #15]
      break;
 800b378:	e020      	b.n	800b3bc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b380:	4619      	mov	r1, r3
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 fac6 	bl	800b914 <USBD_StdItfReq>
 800b388:	4603      	mov	r3, r0
 800b38a:	73fb      	strb	r3, [r7, #15]
      break;
 800b38c:	e016      	b.n	800b3bc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b394:	4619      	mov	r1, r3
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 fb05 	bl	800b9a6 <USBD_StdEPReq>
 800b39c:	4603      	mov	r3, r0
 800b39e:	73fb      	strb	r3, [r7, #15]
      break;
 800b3a0:	e00c      	b.n	800b3bc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b3a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b3ac:	b2db      	uxtb	r3, r3
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f003 fec7 	bl	800f144 <USBD_LL_StallEP>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	73fb      	strb	r3, [r7, #15]
      break;
 800b3ba:	bf00      	nop
  }

  return ret;
 800b3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3710      	adds	r7, #16
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b086      	sub	sp, #24
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	60f8      	str	r0, [r7, #12]
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	607a      	str	r2, [r7, #4]
 800b3d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b3d4:	7afb      	ldrb	r3, [r7, #11]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d138      	bne.n	800b44c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b3e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b3e8:	2b03      	cmp	r3, #3
 800b3ea:	d14a      	bne.n	800b482 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	689a      	ldr	r2, [r3, #8]
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d913      	bls.n	800b420 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	689a      	ldr	r2, [r3, #8]
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	68db      	ldr	r3, [r3, #12]
 800b400:	1ad2      	subs	r2, r2, r3
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	68da      	ldr	r2, [r3, #12]
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	4293      	cmp	r3, r2
 800b410:	bf28      	it	cs
 800b412:	4613      	movcs	r3, r2
 800b414:	461a      	mov	r2, r3
 800b416:	6879      	ldr	r1, [r7, #4]
 800b418:	68f8      	ldr	r0, [r7, #12]
 800b41a:	f001 f80f 	bl	800c43c <USBD_CtlContinueRx>
 800b41e:	e030      	b.n	800b482 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b426:	b2db      	uxtb	r3, r3
 800b428:	2b03      	cmp	r3, #3
 800b42a:	d10b      	bne.n	800b444 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b432:	691b      	ldr	r3, [r3, #16]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d005      	beq.n	800b444 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b43e:	691b      	ldr	r3, [r3, #16]
 800b440:	68f8      	ldr	r0, [r7, #12]
 800b442:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	f001 f80a 	bl	800c45e <USBD_CtlSendStatus>
 800b44a:	e01a      	b.n	800b482 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b452:	b2db      	uxtb	r3, r3
 800b454:	2b03      	cmp	r3, #3
 800b456:	d114      	bne.n	800b482 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b45e:	699b      	ldr	r3, [r3, #24]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00e      	beq.n	800b482 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b46a:	699b      	ldr	r3, [r3, #24]
 800b46c:	7afa      	ldrb	r2, [r7, #11]
 800b46e:	4611      	mov	r1, r2
 800b470:	68f8      	ldr	r0, [r7, #12]
 800b472:	4798      	blx	r3
 800b474:	4603      	mov	r3, r0
 800b476:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b478:	7dfb      	ldrb	r3, [r7, #23]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d001      	beq.n	800b482 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b47e:	7dfb      	ldrb	r3, [r7, #23]
 800b480:	e000      	b.n	800b484 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b482:	2300      	movs	r3, #0
}
 800b484:	4618      	mov	r0, r3
 800b486:	3718      	adds	r7, #24
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b086      	sub	sp, #24
 800b490:	af00      	add	r7, sp, #0
 800b492:	60f8      	str	r0, [r7, #12]
 800b494:	460b      	mov	r3, r1
 800b496:	607a      	str	r2, [r7, #4]
 800b498:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b49a:	7afb      	ldrb	r3, [r7, #11]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d16b      	bne.n	800b578 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	3314      	adds	r3, #20
 800b4a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b4ac:	2b02      	cmp	r3, #2
 800b4ae:	d156      	bne.n	800b55e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	689a      	ldr	r2, [r3, #8]
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d914      	bls.n	800b4e6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	689a      	ldr	r2, [r3, #8]
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	68db      	ldr	r3, [r3, #12]
 800b4c4:	1ad2      	subs	r2, r2, r3
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	689b      	ldr	r3, [r3, #8]
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	6879      	ldr	r1, [r7, #4]
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f000 ff84 	bl	800c3e0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4d8:	2300      	movs	r3, #0
 800b4da:	2200      	movs	r2, #0
 800b4dc:	2100      	movs	r1, #0
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	f003 feda 	bl	800f298 <USBD_LL_PrepareReceive>
 800b4e4:	e03b      	b.n	800b55e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	68da      	ldr	r2, [r3, #12]
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	689b      	ldr	r3, [r3, #8]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d11c      	bne.n	800b52c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	685a      	ldr	r2, [r3, #4]
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d316      	bcc.n	800b52c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	685a      	ldr	r2, [r3, #4]
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b508:	429a      	cmp	r2, r3
 800b50a:	d20f      	bcs.n	800b52c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b50c:	2200      	movs	r2, #0
 800b50e:	2100      	movs	r1, #0
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	f000 ff65 	bl	800c3e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2200      	movs	r2, #0
 800b51a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b51e:	2300      	movs	r3, #0
 800b520:	2200      	movs	r2, #0
 800b522:	2100      	movs	r1, #0
 800b524:	68f8      	ldr	r0, [r7, #12]
 800b526:	f003 feb7 	bl	800f298 <USBD_LL_PrepareReceive>
 800b52a:	e018      	b.n	800b55e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b532:	b2db      	uxtb	r3, r3
 800b534:	2b03      	cmp	r3, #3
 800b536:	d10b      	bne.n	800b550 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d005      	beq.n	800b550 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b54a:	68db      	ldr	r3, [r3, #12]
 800b54c:	68f8      	ldr	r0, [r7, #12]
 800b54e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b550:	2180      	movs	r1, #128	; 0x80
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	f003 fdf6 	bl	800f144 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b558:	68f8      	ldr	r0, [r7, #12]
 800b55a:	f000 ff93 	bl	800c484 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b564:	2b01      	cmp	r3, #1
 800b566:	d122      	bne.n	800b5ae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	f7ff fe98 	bl	800b29e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2200      	movs	r2, #0
 800b572:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b576:	e01a      	b.n	800b5ae <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b57e:	b2db      	uxtb	r3, r3
 800b580:	2b03      	cmp	r3, #3
 800b582:	d114      	bne.n	800b5ae <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b58a:	695b      	ldr	r3, [r3, #20]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d00e      	beq.n	800b5ae <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b596:	695b      	ldr	r3, [r3, #20]
 800b598:	7afa      	ldrb	r2, [r7, #11]
 800b59a:	4611      	mov	r1, r2
 800b59c:	68f8      	ldr	r0, [r7, #12]
 800b59e:	4798      	blx	r3
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b5a4:	7dfb      	ldrb	r3, [r7, #23]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d001      	beq.n	800b5ae <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b5aa:	7dfb      	ldrb	r3, [r7, #23]
 800b5ac:	e000      	b.n	800b5b0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b5ae:	2300      	movs	r3, #0
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3718      	adds	r7, #24
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d101      	bne.n	800b5ec <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b5e8:	2303      	movs	r3, #3
 800b5ea:	e02f      	b.n	800b64c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d00f      	beq.n	800b616 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d009      	beq.n	800b616 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	687a      	ldr	r2, [r7, #4]
 800b60c:	6852      	ldr	r2, [r2, #4]
 800b60e:	b2d2      	uxtb	r2, r2
 800b610:	4611      	mov	r1, r2
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b616:	2340      	movs	r3, #64	; 0x40
 800b618:	2200      	movs	r2, #0
 800b61a:	2100      	movs	r1, #0
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f003 fd4c 	bl	800f0ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2201      	movs	r2, #1
 800b626:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2240      	movs	r2, #64	; 0x40
 800b62e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b632:	2340      	movs	r3, #64	; 0x40
 800b634:	2200      	movs	r2, #0
 800b636:	2180      	movs	r1, #128	; 0x80
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f003 fd3e 	bl	800f0ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2201      	movs	r2, #1
 800b642:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2240      	movs	r2, #64	; 0x40
 800b648:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b654:	b480      	push	{r7}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	460b      	mov	r3, r1
 800b65e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	78fa      	ldrb	r2, [r7, #3]
 800b664:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b666:	2300      	movs	r3, #0
}
 800b668:	4618      	mov	r0, r3
 800b66a:	370c      	adds	r7, #12
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr

0800b674 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b674:	b480      	push	{r7}
 800b676:	b083      	sub	sp, #12
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b682:	b2da      	uxtb	r2, r3
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2204      	movs	r2, #4
 800b68e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b692:	2300      	movs	r3, #0
}
 800b694:	4618      	mov	r0, r3
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr

0800b6a0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6ae:	b2db      	uxtb	r3, r3
 800b6b0:	2b04      	cmp	r3, #4
 800b6b2:	d106      	bne.n	800b6c2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b6ba:	b2da      	uxtb	r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b6c2:	2300      	movs	r3, #0
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	370c      	adds	r7, #12
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr

0800b6d0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d101      	bne.n	800b6e6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b6e2:	2303      	movs	r3, #3
 800b6e4:	e012      	b.n	800b70c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6ec:	b2db      	uxtb	r3, r3
 800b6ee:	2b03      	cmp	r3, #3
 800b6f0:	d10b      	bne.n	800b70a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6f8:	69db      	ldr	r3, [r3, #28]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d005      	beq.n	800b70a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b704:	69db      	ldr	r3, [r3, #28]
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b70a:	2300      	movs	r3, #0
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3708      	adds	r7, #8
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	460b      	mov	r3, r1
 800b71e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b726:	2b00      	cmp	r3, #0
 800b728:	d101      	bne.n	800b72e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b72a:	2303      	movs	r3, #3
 800b72c:	e014      	b.n	800b758 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b734:	b2db      	uxtb	r3, r3
 800b736:	2b03      	cmp	r3, #3
 800b738:	d10d      	bne.n	800b756 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b740:	6a1b      	ldr	r3, [r3, #32]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d007      	beq.n	800b756 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b74c:	6a1b      	ldr	r3, [r3, #32]
 800b74e:	78fa      	ldrb	r2, [r7, #3]
 800b750:	4611      	mov	r1, r2
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b756:	2300      	movs	r3, #0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3708      	adds	r7, #8
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	460b      	mov	r3, r1
 800b76a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b772:	2b00      	cmp	r3, #0
 800b774:	d101      	bne.n	800b77a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b776:	2303      	movs	r3, #3
 800b778:	e014      	b.n	800b7a4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b780:	b2db      	uxtb	r3, r3
 800b782:	2b03      	cmp	r3, #3
 800b784:	d10d      	bne.n	800b7a2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d007      	beq.n	800b7a2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b79a:	78fa      	ldrb	r2, [r7, #3]
 800b79c:	4611      	mov	r1, r2
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b7a2:	2300      	movs	r3, #0
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b083      	sub	sp, #12
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b7b4:	2300      	movs	r3, #0
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	370c      	adds	r7, #12
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr

0800b7c2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b082      	sub	sp, #8
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d009      	beq.n	800b7f0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	6852      	ldr	r2, [r2, #4]
 800b7e8:	b2d2      	uxtb	r2, r2
 800b7ea:	4611      	mov	r1, r2
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	4798      	blx	r3
  }

  return USBD_OK;
 800b7f0:	2300      	movs	r3, #0
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3708      	adds	r7, #8
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b7fa:	b480      	push	{r7}
 800b7fc:	b087      	sub	sp, #28
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	3301      	adds	r3, #1
 800b810:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b818:	8a3b      	ldrh	r3, [r7, #16]
 800b81a:	021b      	lsls	r3, r3, #8
 800b81c:	b21a      	sxth	r2, r3
 800b81e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b822:	4313      	orrs	r3, r2
 800b824:	b21b      	sxth	r3, r3
 800b826:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b828:	89fb      	ldrh	r3, [r7, #14]
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	371c      	adds	r7, #28
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr
	...

0800b838 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b842:	2300      	movs	r3, #0
 800b844:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b84e:	2b40      	cmp	r3, #64	; 0x40
 800b850:	d005      	beq.n	800b85e <USBD_StdDevReq+0x26>
 800b852:	2b40      	cmp	r3, #64	; 0x40
 800b854:	d853      	bhi.n	800b8fe <USBD_StdDevReq+0xc6>
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00b      	beq.n	800b872 <USBD_StdDevReq+0x3a>
 800b85a:	2b20      	cmp	r3, #32
 800b85c:	d14f      	bne.n	800b8fe <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b864:	689b      	ldr	r3, [r3, #8]
 800b866:	6839      	ldr	r1, [r7, #0]
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	4798      	blx	r3
 800b86c:	4603      	mov	r3, r0
 800b86e:	73fb      	strb	r3, [r7, #15]
      break;
 800b870:	e04a      	b.n	800b908 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	785b      	ldrb	r3, [r3, #1]
 800b876:	2b09      	cmp	r3, #9
 800b878:	d83b      	bhi.n	800b8f2 <USBD_StdDevReq+0xba>
 800b87a:	a201      	add	r2, pc, #4	; (adr r2, 800b880 <USBD_StdDevReq+0x48>)
 800b87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b880:	0800b8d5 	.word	0x0800b8d5
 800b884:	0800b8e9 	.word	0x0800b8e9
 800b888:	0800b8f3 	.word	0x0800b8f3
 800b88c:	0800b8df 	.word	0x0800b8df
 800b890:	0800b8f3 	.word	0x0800b8f3
 800b894:	0800b8b3 	.word	0x0800b8b3
 800b898:	0800b8a9 	.word	0x0800b8a9
 800b89c:	0800b8f3 	.word	0x0800b8f3
 800b8a0:	0800b8cb 	.word	0x0800b8cb
 800b8a4:	0800b8bd 	.word	0x0800b8bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b8a8:	6839      	ldr	r1, [r7, #0]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 f9de 	bl	800bc6c <USBD_GetDescriptor>
          break;
 800b8b0:	e024      	b.n	800b8fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b8b2:	6839      	ldr	r1, [r7, #0]
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 fb43 	bl	800bf40 <USBD_SetAddress>
          break;
 800b8ba:	e01f      	b.n	800b8fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b8bc:	6839      	ldr	r1, [r7, #0]
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 fb82 	bl	800bfc8 <USBD_SetConfig>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	73fb      	strb	r3, [r7, #15]
          break;
 800b8c8:	e018      	b.n	800b8fc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b8ca:	6839      	ldr	r1, [r7, #0]
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 fc21 	bl	800c114 <USBD_GetConfig>
          break;
 800b8d2:	e013      	b.n	800b8fc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b8d4:	6839      	ldr	r1, [r7, #0]
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f000 fc52 	bl	800c180 <USBD_GetStatus>
          break;
 800b8dc:	e00e      	b.n	800b8fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b8de:	6839      	ldr	r1, [r7, #0]
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 fc81 	bl	800c1e8 <USBD_SetFeature>
          break;
 800b8e6:	e009      	b.n	800b8fc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b8e8:	6839      	ldr	r1, [r7, #0]
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 fc90 	bl	800c210 <USBD_ClrFeature>
          break;
 800b8f0:	e004      	b.n	800b8fc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b8f2:	6839      	ldr	r1, [r7, #0]
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f000 fce7 	bl	800c2c8 <USBD_CtlError>
          break;
 800b8fa:	bf00      	nop
      }
      break;
 800b8fc:	e004      	b.n	800b908 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b8fe:	6839      	ldr	r1, [r7, #0]
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 fce1 	bl	800c2c8 <USBD_CtlError>
      break;
 800b906:	bf00      	nop
  }

  return ret;
 800b908:	7bfb      	ldrb	r3, [r7, #15]
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3710      	adds	r7, #16
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop

0800b914 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b91e:	2300      	movs	r3, #0
 800b920:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b92a:	2b40      	cmp	r3, #64	; 0x40
 800b92c:	d005      	beq.n	800b93a <USBD_StdItfReq+0x26>
 800b92e:	2b40      	cmp	r3, #64	; 0x40
 800b930:	d82f      	bhi.n	800b992 <USBD_StdItfReq+0x7e>
 800b932:	2b00      	cmp	r3, #0
 800b934:	d001      	beq.n	800b93a <USBD_StdItfReq+0x26>
 800b936:	2b20      	cmp	r3, #32
 800b938:	d12b      	bne.n	800b992 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b940:	b2db      	uxtb	r3, r3
 800b942:	3b01      	subs	r3, #1
 800b944:	2b02      	cmp	r3, #2
 800b946:	d81d      	bhi.n	800b984 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	889b      	ldrh	r3, [r3, #4]
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d813      	bhi.n	800b97a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b958:	689b      	ldr	r3, [r3, #8]
 800b95a:	6839      	ldr	r1, [r7, #0]
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	4798      	blx	r3
 800b960:	4603      	mov	r3, r0
 800b962:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	88db      	ldrh	r3, [r3, #6]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d110      	bne.n	800b98e <USBD_StdItfReq+0x7a>
 800b96c:	7bfb      	ldrb	r3, [r7, #15]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d10d      	bne.n	800b98e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f000 fd73 	bl	800c45e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b978:	e009      	b.n	800b98e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b97a:	6839      	ldr	r1, [r7, #0]
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 fca3 	bl	800c2c8 <USBD_CtlError>
          break;
 800b982:	e004      	b.n	800b98e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b984:	6839      	ldr	r1, [r7, #0]
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 fc9e 	bl	800c2c8 <USBD_CtlError>
          break;
 800b98c:	e000      	b.n	800b990 <USBD_StdItfReq+0x7c>
          break;
 800b98e:	bf00      	nop
      }
      break;
 800b990:	e004      	b.n	800b99c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b992:	6839      	ldr	r1, [r7, #0]
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f000 fc97 	bl	800c2c8 <USBD_CtlError>
      break;
 800b99a:	bf00      	nop
  }

  return ret;
 800b99c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9a6:	b580      	push	{r7, lr}
 800b9a8:	b084      	sub	sp, #16
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
 800b9ae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	889b      	ldrh	r3, [r3, #4]
 800b9b8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b9c2:	2b40      	cmp	r3, #64	; 0x40
 800b9c4:	d007      	beq.n	800b9d6 <USBD_StdEPReq+0x30>
 800b9c6:	2b40      	cmp	r3, #64	; 0x40
 800b9c8:	f200 8145 	bhi.w	800bc56 <USBD_StdEPReq+0x2b0>
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d00c      	beq.n	800b9ea <USBD_StdEPReq+0x44>
 800b9d0:	2b20      	cmp	r3, #32
 800b9d2:	f040 8140 	bne.w	800bc56 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9dc:	689b      	ldr	r3, [r3, #8]
 800b9de:	6839      	ldr	r1, [r7, #0]
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	4798      	blx	r3
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	73fb      	strb	r3, [r7, #15]
      break;
 800b9e8:	e13a      	b.n	800bc60 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	785b      	ldrb	r3, [r3, #1]
 800b9ee:	2b03      	cmp	r3, #3
 800b9f0:	d007      	beq.n	800ba02 <USBD_StdEPReq+0x5c>
 800b9f2:	2b03      	cmp	r3, #3
 800b9f4:	f300 8129 	bgt.w	800bc4a <USBD_StdEPReq+0x2a4>
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d07f      	beq.n	800bafc <USBD_StdEPReq+0x156>
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d03c      	beq.n	800ba7a <USBD_StdEPReq+0xd4>
 800ba00:	e123      	b.n	800bc4a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	d002      	beq.n	800ba14 <USBD_StdEPReq+0x6e>
 800ba0e:	2b03      	cmp	r3, #3
 800ba10:	d016      	beq.n	800ba40 <USBD_StdEPReq+0x9a>
 800ba12:	e02c      	b.n	800ba6e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba14:	7bbb      	ldrb	r3, [r7, #14]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d00d      	beq.n	800ba36 <USBD_StdEPReq+0x90>
 800ba1a:	7bbb      	ldrb	r3, [r7, #14]
 800ba1c:	2b80      	cmp	r3, #128	; 0x80
 800ba1e:	d00a      	beq.n	800ba36 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba20:	7bbb      	ldrb	r3, [r7, #14]
 800ba22:	4619      	mov	r1, r3
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f003 fb8d 	bl	800f144 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba2a:	2180      	movs	r1, #128	; 0x80
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f003 fb89 	bl	800f144 <USBD_LL_StallEP>
 800ba32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba34:	e020      	b.n	800ba78 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ba36:	6839      	ldr	r1, [r7, #0]
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 fc45 	bl	800c2c8 <USBD_CtlError>
              break;
 800ba3e:	e01b      	b.n	800ba78 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	885b      	ldrh	r3, [r3, #2]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d10e      	bne.n	800ba66 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ba48:	7bbb      	ldrb	r3, [r7, #14]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d00b      	beq.n	800ba66 <USBD_StdEPReq+0xc0>
 800ba4e:	7bbb      	ldrb	r3, [r7, #14]
 800ba50:	2b80      	cmp	r3, #128	; 0x80
 800ba52:	d008      	beq.n	800ba66 <USBD_StdEPReq+0xc0>
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	88db      	ldrh	r3, [r3, #6]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d104      	bne.n	800ba66 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba5c:	7bbb      	ldrb	r3, [r7, #14]
 800ba5e:	4619      	mov	r1, r3
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f003 fb6f 	bl	800f144 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 fcf9 	bl	800c45e <USBD_CtlSendStatus>

              break;
 800ba6c:	e004      	b.n	800ba78 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ba6e:	6839      	ldr	r1, [r7, #0]
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 fc29 	bl	800c2c8 <USBD_CtlError>
              break;
 800ba76:	bf00      	nop
          }
          break;
 800ba78:	e0ec      	b.n	800bc54 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	d002      	beq.n	800ba8c <USBD_StdEPReq+0xe6>
 800ba86:	2b03      	cmp	r3, #3
 800ba88:	d016      	beq.n	800bab8 <USBD_StdEPReq+0x112>
 800ba8a:	e030      	b.n	800baee <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba8c:	7bbb      	ldrb	r3, [r7, #14]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d00d      	beq.n	800baae <USBD_StdEPReq+0x108>
 800ba92:	7bbb      	ldrb	r3, [r7, #14]
 800ba94:	2b80      	cmp	r3, #128	; 0x80
 800ba96:	d00a      	beq.n	800baae <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba98:	7bbb      	ldrb	r3, [r7, #14]
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f003 fb51 	bl	800f144 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800baa2:	2180      	movs	r1, #128	; 0x80
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f003 fb4d 	bl	800f144 <USBD_LL_StallEP>
 800baaa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800baac:	e025      	b.n	800bafa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800baae:	6839      	ldr	r1, [r7, #0]
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 fc09 	bl	800c2c8 <USBD_CtlError>
              break;
 800bab6:	e020      	b.n	800bafa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	885b      	ldrh	r3, [r3, #2]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d11b      	bne.n	800baf8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bac0:	7bbb      	ldrb	r3, [r7, #14]
 800bac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d004      	beq.n	800bad4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800baca:	7bbb      	ldrb	r3, [r7, #14]
 800bacc:	4619      	mov	r1, r3
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f003 fb57 	bl	800f182 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 fcc2 	bl	800c45e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	6839      	ldr	r1, [r7, #0]
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	4798      	blx	r3
 800bae8:	4603      	mov	r3, r0
 800baea:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800baec:	e004      	b.n	800baf8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800baee:	6839      	ldr	r1, [r7, #0]
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 fbe9 	bl	800c2c8 <USBD_CtlError>
              break;
 800baf6:	e000      	b.n	800bafa <USBD_StdEPReq+0x154>
              break;
 800baf8:	bf00      	nop
          }
          break;
 800bafa:	e0ab      	b.n	800bc54 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	2b02      	cmp	r3, #2
 800bb06:	d002      	beq.n	800bb0e <USBD_StdEPReq+0x168>
 800bb08:	2b03      	cmp	r3, #3
 800bb0a:	d032      	beq.n	800bb72 <USBD_StdEPReq+0x1cc>
 800bb0c:	e097      	b.n	800bc3e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb0e:	7bbb      	ldrb	r3, [r7, #14]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d007      	beq.n	800bb24 <USBD_StdEPReq+0x17e>
 800bb14:	7bbb      	ldrb	r3, [r7, #14]
 800bb16:	2b80      	cmp	r3, #128	; 0x80
 800bb18:	d004      	beq.n	800bb24 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800bb1a:	6839      	ldr	r1, [r7, #0]
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 fbd3 	bl	800c2c8 <USBD_CtlError>
                break;
 800bb22:	e091      	b.n	800bc48 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	da0b      	bge.n	800bb44 <USBD_StdEPReq+0x19e>
 800bb2c:	7bbb      	ldrb	r3, [r7, #14]
 800bb2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb32:	4613      	mov	r3, r2
 800bb34:	009b      	lsls	r3, r3, #2
 800bb36:	4413      	add	r3, r2
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	3310      	adds	r3, #16
 800bb3c:	687a      	ldr	r2, [r7, #4]
 800bb3e:	4413      	add	r3, r2
 800bb40:	3304      	adds	r3, #4
 800bb42:	e00b      	b.n	800bb5c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb44:	7bbb      	ldrb	r3, [r7, #14]
 800bb46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb4a:	4613      	mov	r3, r2
 800bb4c:	009b      	lsls	r3, r3, #2
 800bb4e:	4413      	add	r3, r2
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bb56:	687a      	ldr	r2, [r7, #4]
 800bb58:	4413      	add	r3, r2
 800bb5a:	3304      	adds	r3, #4
 800bb5c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	2200      	movs	r2, #0
 800bb62:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	2202      	movs	r2, #2
 800bb68:	4619      	mov	r1, r3
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 fc1d 	bl	800c3aa <USBD_CtlSendData>
              break;
 800bb70:	e06a      	b.n	800bc48 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bb72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	da11      	bge.n	800bb9e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bb7a:	7bbb      	ldrb	r3, [r7, #14]
 800bb7c:	f003 020f 	and.w	r2, r3, #15
 800bb80:	6879      	ldr	r1, [r7, #4]
 800bb82:	4613      	mov	r3, r2
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	4413      	add	r3, r2
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	440b      	add	r3, r1
 800bb8c:	3324      	adds	r3, #36	; 0x24
 800bb8e:	881b      	ldrh	r3, [r3, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d117      	bne.n	800bbc4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bb94:	6839      	ldr	r1, [r7, #0]
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 fb96 	bl	800c2c8 <USBD_CtlError>
                  break;
 800bb9c:	e054      	b.n	800bc48 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bb9e:	7bbb      	ldrb	r3, [r7, #14]
 800bba0:	f003 020f 	and.w	r2, r3, #15
 800bba4:	6879      	ldr	r1, [r7, #4]
 800bba6:	4613      	mov	r3, r2
 800bba8:	009b      	lsls	r3, r3, #2
 800bbaa:	4413      	add	r3, r2
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	440b      	add	r3, r1
 800bbb0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bbb4:	881b      	ldrh	r3, [r3, #0]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d104      	bne.n	800bbc4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bbba:	6839      	ldr	r1, [r7, #0]
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f000 fb83 	bl	800c2c8 <USBD_CtlError>
                  break;
 800bbc2:	e041      	b.n	800bc48 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	da0b      	bge.n	800bbe4 <USBD_StdEPReq+0x23e>
 800bbcc:	7bbb      	ldrb	r3, [r7, #14]
 800bbce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bbd2:	4613      	mov	r3, r2
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	4413      	add	r3, r2
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	3310      	adds	r3, #16
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	4413      	add	r3, r2
 800bbe0:	3304      	adds	r3, #4
 800bbe2:	e00b      	b.n	800bbfc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bbe4:	7bbb      	ldrb	r3, [r7, #14]
 800bbe6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbea:	4613      	mov	r3, r2
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	4413      	add	r3, r2
 800bbf0:	009b      	lsls	r3, r3, #2
 800bbf2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	3304      	adds	r3, #4
 800bbfc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bbfe:	7bbb      	ldrb	r3, [r7, #14]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d002      	beq.n	800bc0a <USBD_StdEPReq+0x264>
 800bc04:	7bbb      	ldrb	r3, [r7, #14]
 800bc06:	2b80      	cmp	r3, #128	; 0x80
 800bc08:	d103      	bne.n	800bc12 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	601a      	str	r2, [r3, #0]
 800bc10:	e00e      	b.n	800bc30 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bc12:	7bbb      	ldrb	r3, [r7, #14]
 800bc14:	4619      	mov	r1, r3
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f003 fad2 	bl	800f1c0 <USBD_LL_IsStallEP>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d003      	beq.n	800bc2a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	2201      	movs	r2, #1
 800bc26:	601a      	str	r2, [r3, #0]
 800bc28:	e002      	b.n	800bc30 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	2202      	movs	r2, #2
 800bc34:	4619      	mov	r1, r3
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 fbb7 	bl	800c3aa <USBD_CtlSendData>
              break;
 800bc3c:	e004      	b.n	800bc48 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800bc3e:	6839      	ldr	r1, [r7, #0]
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f000 fb41 	bl	800c2c8 <USBD_CtlError>
              break;
 800bc46:	bf00      	nop
          }
          break;
 800bc48:	e004      	b.n	800bc54 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800bc4a:	6839      	ldr	r1, [r7, #0]
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 fb3b 	bl	800c2c8 <USBD_CtlError>
          break;
 800bc52:	bf00      	nop
      }
      break;
 800bc54:	e004      	b.n	800bc60 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800bc56:	6839      	ldr	r1, [r7, #0]
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 fb35 	bl	800c2c8 <USBD_CtlError>
      break;
 800bc5e:	bf00      	nop
  }

  return ret;
 800bc60:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
	...

0800bc6c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc76:	2300      	movs	r3, #0
 800bc78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	885b      	ldrh	r3, [r3, #2]
 800bc86:	0a1b      	lsrs	r3, r3, #8
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	2b06      	cmp	r3, #6
 800bc8e:	f200 8128 	bhi.w	800bee2 <USBD_GetDescriptor+0x276>
 800bc92:	a201      	add	r2, pc, #4	; (adr r2, 800bc98 <USBD_GetDescriptor+0x2c>)
 800bc94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc98:	0800bcb5 	.word	0x0800bcb5
 800bc9c:	0800bccd 	.word	0x0800bccd
 800bca0:	0800bd0d 	.word	0x0800bd0d
 800bca4:	0800bee3 	.word	0x0800bee3
 800bca8:	0800bee3 	.word	0x0800bee3
 800bcac:	0800be83 	.word	0x0800be83
 800bcb0:	0800beaf 	.word	0x0800beaf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	7c12      	ldrb	r2, [r2, #16]
 800bcc0:	f107 0108 	add.w	r1, r7, #8
 800bcc4:	4610      	mov	r0, r2
 800bcc6:	4798      	blx	r3
 800bcc8:	60f8      	str	r0, [r7, #12]
      break;
 800bcca:	e112      	b.n	800bef2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	7c1b      	ldrb	r3, [r3, #16]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d10d      	bne.n	800bcf0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcdc:	f107 0208 	add.w	r2, r7, #8
 800bce0:	4610      	mov	r0, r2
 800bce2:	4798      	blx	r3
 800bce4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	3301      	adds	r3, #1
 800bcea:	2202      	movs	r2, #2
 800bcec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bcee:	e100      	b.n	800bef2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcf8:	f107 0208 	add.w	r2, r7, #8
 800bcfc:	4610      	mov	r0, r2
 800bcfe:	4798      	blx	r3
 800bd00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	3301      	adds	r3, #1
 800bd06:	2202      	movs	r2, #2
 800bd08:	701a      	strb	r2, [r3, #0]
      break;
 800bd0a:	e0f2      	b.n	800bef2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	885b      	ldrh	r3, [r3, #2]
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	2b05      	cmp	r3, #5
 800bd14:	f200 80ac 	bhi.w	800be70 <USBD_GetDescriptor+0x204>
 800bd18:	a201      	add	r2, pc, #4	; (adr r2, 800bd20 <USBD_GetDescriptor+0xb4>)
 800bd1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd1e:	bf00      	nop
 800bd20:	0800bd39 	.word	0x0800bd39
 800bd24:	0800bd6d 	.word	0x0800bd6d
 800bd28:	0800bda1 	.word	0x0800bda1
 800bd2c:	0800bdd5 	.word	0x0800bdd5
 800bd30:	0800be09 	.word	0x0800be09
 800bd34:	0800be3d 	.word	0x0800be3d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d00b      	beq.n	800bd5c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	687a      	ldr	r2, [r7, #4]
 800bd4e:	7c12      	ldrb	r2, [r2, #16]
 800bd50:	f107 0108 	add.w	r1, r7, #8
 800bd54:	4610      	mov	r0, r2
 800bd56:	4798      	blx	r3
 800bd58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd5a:	e091      	b.n	800be80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd5c:	6839      	ldr	r1, [r7, #0]
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 fab2 	bl	800c2c8 <USBD_CtlError>
            err++;
 800bd64:	7afb      	ldrb	r3, [r7, #11]
 800bd66:	3301      	adds	r3, #1
 800bd68:	72fb      	strb	r3, [r7, #11]
          break;
 800bd6a:	e089      	b.n	800be80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d00b      	beq.n	800bd90 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd7e:	689b      	ldr	r3, [r3, #8]
 800bd80:	687a      	ldr	r2, [r7, #4]
 800bd82:	7c12      	ldrb	r2, [r2, #16]
 800bd84:	f107 0108 	add.w	r1, r7, #8
 800bd88:	4610      	mov	r0, r2
 800bd8a:	4798      	blx	r3
 800bd8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd8e:	e077      	b.n	800be80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd90:	6839      	ldr	r1, [r7, #0]
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f000 fa98 	bl	800c2c8 <USBD_CtlError>
            err++;
 800bd98:	7afb      	ldrb	r3, [r7, #11]
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	72fb      	strb	r3, [r7, #11]
          break;
 800bd9e:	e06f      	b.n	800be80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d00b      	beq.n	800bdc4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdb2:	68db      	ldr	r3, [r3, #12]
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	7c12      	ldrb	r2, [r2, #16]
 800bdb8:	f107 0108 	add.w	r1, r7, #8
 800bdbc:	4610      	mov	r0, r2
 800bdbe:	4798      	blx	r3
 800bdc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdc2:	e05d      	b.n	800be80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bdc4:	6839      	ldr	r1, [r7, #0]
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fa7e 	bl	800c2c8 <USBD_CtlError>
            err++;
 800bdcc:	7afb      	ldrb	r3, [r7, #11]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	72fb      	strb	r3, [r7, #11]
          break;
 800bdd2:	e055      	b.n	800be80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdda:	691b      	ldr	r3, [r3, #16]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d00b      	beq.n	800bdf8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bde6:	691b      	ldr	r3, [r3, #16]
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	7c12      	ldrb	r2, [r2, #16]
 800bdec:	f107 0108 	add.w	r1, r7, #8
 800bdf0:	4610      	mov	r0, r2
 800bdf2:	4798      	blx	r3
 800bdf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdf6:	e043      	b.n	800be80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bdf8:	6839      	ldr	r1, [r7, #0]
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 fa64 	bl	800c2c8 <USBD_CtlError>
            err++;
 800be00:	7afb      	ldrb	r3, [r7, #11]
 800be02:	3301      	adds	r3, #1
 800be04:	72fb      	strb	r3, [r7, #11]
          break;
 800be06:	e03b      	b.n	800be80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be0e:	695b      	ldr	r3, [r3, #20]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d00b      	beq.n	800be2c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be1a:	695b      	ldr	r3, [r3, #20]
 800be1c:	687a      	ldr	r2, [r7, #4]
 800be1e:	7c12      	ldrb	r2, [r2, #16]
 800be20:	f107 0108 	add.w	r1, r7, #8
 800be24:	4610      	mov	r0, r2
 800be26:	4798      	blx	r3
 800be28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be2a:	e029      	b.n	800be80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be2c:	6839      	ldr	r1, [r7, #0]
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 fa4a 	bl	800c2c8 <USBD_CtlError>
            err++;
 800be34:	7afb      	ldrb	r3, [r7, #11]
 800be36:	3301      	adds	r3, #1
 800be38:	72fb      	strb	r3, [r7, #11]
          break;
 800be3a:	e021      	b.n	800be80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be42:	699b      	ldr	r3, [r3, #24]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d00b      	beq.n	800be60 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be4e:	699b      	ldr	r3, [r3, #24]
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	7c12      	ldrb	r2, [r2, #16]
 800be54:	f107 0108 	add.w	r1, r7, #8
 800be58:	4610      	mov	r0, r2
 800be5a:	4798      	blx	r3
 800be5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be5e:	e00f      	b.n	800be80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be60:	6839      	ldr	r1, [r7, #0]
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 fa30 	bl	800c2c8 <USBD_CtlError>
            err++;
 800be68:	7afb      	ldrb	r3, [r7, #11]
 800be6a:	3301      	adds	r3, #1
 800be6c:	72fb      	strb	r3, [r7, #11]
          break;
 800be6e:	e007      	b.n	800be80 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800be70:	6839      	ldr	r1, [r7, #0]
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 fa28 	bl	800c2c8 <USBD_CtlError>
          err++;
 800be78:	7afb      	ldrb	r3, [r7, #11]
 800be7a:	3301      	adds	r3, #1
 800be7c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800be7e:	bf00      	nop
      }
      break;
 800be80:	e037      	b.n	800bef2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	7c1b      	ldrb	r3, [r3, #16]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d109      	bne.n	800be9e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be92:	f107 0208 	add.w	r2, r7, #8
 800be96:	4610      	mov	r0, r2
 800be98:	4798      	blx	r3
 800be9a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be9c:	e029      	b.n	800bef2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800be9e:	6839      	ldr	r1, [r7, #0]
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f000 fa11 	bl	800c2c8 <USBD_CtlError>
        err++;
 800bea6:	7afb      	ldrb	r3, [r7, #11]
 800bea8:	3301      	adds	r3, #1
 800beaa:	72fb      	strb	r3, [r7, #11]
      break;
 800beac:	e021      	b.n	800bef2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	7c1b      	ldrb	r3, [r3, #16]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d10d      	bne.n	800bed2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bebe:	f107 0208 	add.w	r2, r7, #8
 800bec2:	4610      	mov	r0, r2
 800bec4:	4798      	blx	r3
 800bec6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	3301      	adds	r3, #1
 800becc:	2207      	movs	r2, #7
 800bece:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bed0:	e00f      	b.n	800bef2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bed2:	6839      	ldr	r1, [r7, #0]
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 f9f7 	bl	800c2c8 <USBD_CtlError>
        err++;
 800beda:	7afb      	ldrb	r3, [r7, #11]
 800bedc:	3301      	adds	r3, #1
 800bede:	72fb      	strb	r3, [r7, #11]
      break;
 800bee0:	e007      	b.n	800bef2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bee2:	6839      	ldr	r1, [r7, #0]
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 f9ef 	bl	800c2c8 <USBD_CtlError>
      err++;
 800beea:	7afb      	ldrb	r3, [r7, #11]
 800beec:	3301      	adds	r3, #1
 800beee:	72fb      	strb	r3, [r7, #11]
      break;
 800bef0:	bf00      	nop
  }

  if (err != 0U)
 800bef2:	7afb      	ldrb	r3, [r7, #11]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d11e      	bne.n	800bf36 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	88db      	ldrh	r3, [r3, #6]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d016      	beq.n	800bf2e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bf00:	893b      	ldrh	r3, [r7, #8]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00e      	beq.n	800bf24 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	88da      	ldrh	r2, [r3, #6]
 800bf0a:	893b      	ldrh	r3, [r7, #8]
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	bf28      	it	cs
 800bf10:	4613      	movcs	r3, r2
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bf16:	893b      	ldrh	r3, [r7, #8]
 800bf18:	461a      	mov	r2, r3
 800bf1a:	68f9      	ldr	r1, [r7, #12]
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f000 fa44 	bl	800c3aa <USBD_CtlSendData>
 800bf22:	e009      	b.n	800bf38 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bf24:	6839      	ldr	r1, [r7, #0]
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 f9ce 	bl	800c2c8 <USBD_CtlError>
 800bf2c:	e004      	b.n	800bf38 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 fa95 	bl	800c45e <USBD_CtlSendStatus>
 800bf34:	e000      	b.n	800bf38 <USBD_GetDescriptor+0x2cc>
    return;
 800bf36:	bf00      	nop
  }
}
 800bf38:	3710      	adds	r7, #16
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop

0800bf40 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	889b      	ldrh	r3, [r3, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d131      	bne.n	800bfb6 <USBD_SetAddress+0x76>
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	88db      	ldrh	r3, [r3, #6]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d12d      	bne.n	800bfb6 <USBD_SetAddress+0x76>
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	885b      	ldrh	r3, [r3, #2]
 800bf5e:	2b7f      	cmp	r3, #127	; 0x7f
 800bf60:	d829      	bhi.n	800bfb6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	885b      	ldrh	r3, [r3, #2]
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf74:	b2db      	uxtb	r3, r3
 800bf76:	2b03      	cmp	r3, #3
 800bf78:	d104      	bne.n	800bf84 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bf7a:	6839      	ldr	r1, [r7, #0]
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 f9a3 	bl	800c2c8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf82:	e01d      	b.n	800bfc0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	7bfa      	ldrb	r2, [r7, #15]
 800bf88:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bf8c:	7bfb      	ldrb	r3, [r7, #15]
 800bf8e:	4619      	mov	r1, r3
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f003 f941 	bl	800f218 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 fa61 	bl	800c45e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bf9c:	7bfb      	ldrb	r3, [r7, #15]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d004      	beq.n	800bfac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2202      	movs	r2, #2
 800bfa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfaa:	e009      	b.n	800bfc0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfb4:	e004      	b.n	800bfc0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bfb6:	6839      	ldr	r1, [r7, #0]
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 f985 	bl	800c2c8 <USBD_CtlError>
  }
}
 800bfbe:	bf00      	nop
 800bfc0:	bf00      	nop
 800bfc2:	3710      	adds	r7, #16
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	885b      	ldrh	r3, [r3, #2]
 800bfda:	b2da      	uxtb	r2, r3
 800bfdc:	4b4c      	ldr	r3, [pc, #304]	; (800c110 <USBD_SetConfig+0x148>)
 800bfde:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bfe0:	4b4b      	ldr	r3, [pc, #300]	; (800c110 <USBD_SetConfig+0x148>)
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d905      	bls.n	800bff4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bfe8:	6839      	ldr	r1, [r7, #0]
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f000 f96c 	bl	800c2c8 <USBD_CtlError>
    return USBD_FAIL;
 800bff0:	2303      	movs	r3, #3
 800bff2:	e088      	b.n	800c106 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	2b02      	cmp	r3, #2
 800bffe:	d002      	beq.n	800c006 <USBD_SetConfig+0x3e>
 800c000:	2b03      	cmp	r3, #3
 800c002:	d025      	beq.n	800c050 <USBD_SetConfig+0x88>
 800c004:	e071      	b.n	800c0ea <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c006:	4b42      	ldr	r3, [pc, #264]	; (800c110 <USBD_SetConfig+0x148>)
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d01c      	beq.n	800c048 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c00e:	4b40      	ldr	r3, [pc, #256]	; (800c110 <USBD_SetConfig+0x148>)
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	461a      	mov	r2, r3
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c018:	4b3d      	ldr	r3, [pc, #244]	; (800c110 <USBD_SetConfig+0x148>)
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	4619      	mov	r1, r3
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f7ff f948 	bl	800b2b4 <USBD_SetClassConfig>
 800c024:	4603      	mov	r3, r0
 800c026:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c028:	7bfb      	ldrb	r3, [r7, #15]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d004      	beq.n	800c038 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c02e:	6839      	ldr	r1, [r7, #0]
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 f949 	bl	800c2c8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c036:	e065      	b.n	800c104 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f000 fa10 	bl	800c45e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2203      	movs	r2, #3
 800c042:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c046:	e05d      	b.n	800c104 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 fa08 	bl	800c45e <USBD_CtlSendStatus>
      break;
 800c04e:	e059      	b.n	800c104 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c050:	4b2f      	ldr	r3, [pc, #188]	; (800c110 <USBD_SetConfig+0x148>)
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d112      	bne.n	800c07e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2202      	movs	r2, #2
 800c05c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c060:	4b2b      	ldr	r3, [pc, #172]	; (800c110 <USBD_SetConfig+0x148>)
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	461a      	mov	r2, r3
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c06a:	4b29      	ldr	r3, [pc, #164]	; (800c110 <USBD_SetConfig+0x148>)
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	4619      	mov	r1, r3
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f7ff f93b 	bl	800b2ec <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 f9f1 	bl	800c45e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c07c:	e042      	b.n	800c104 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c07e:	4b24      	ldr	r3, [pc, #144]	; (800c110 <USBD_SetConfig+0x148>)
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	461a      	mov	r2, r3
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d02a      	beq.n	800c0e2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	b2db      	uxtb	r3, r3
 800c092:	4619      	mov	r1, r3
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f7ff f929 	bl	800b2ec <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c09a:	4b1d      	ldr	r3, [pc, #116]	; (800c110 <USBD_SetConfig+0x148>)
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	461a      	mov	r2, r3
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c0a4:	4b1a      	ldr	r3, [pc, #104]	; (800c110 <USBD_SetConfig+0x148>)
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f7ff f902 	bl	800b2b4 <USBD_SetClassConfig>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c0b4:	7bfb      	ldrb	r3, [r7, #15]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d00f      	beq.n	800c0da <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c0ba:	6839      	ldr	r1, [r7, #0]
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 f903 	bl	800c2c8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f7ff f90e 	bl	800b2ec <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2202      	movs	r2, #2
 800c0d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c0d8:	e014      	b.n	800c104 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f000 f9bf 	bl	800c45e <USBD_CtlSendStatus>
      break;
 800c0e0:	e010      	b.n	800c104 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 f9bb 	bl	800c45e <USBD_CtlSendStatus>
      break;
 800c0e8:	e00c      	b.n	800c104 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c0ea:	6839      	ldr	r1, [r7, #0]
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 f8eb 	bl	800c2c8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c0f2:	4b07      	ldr	r3, [pc, #28]	; (800c110 <USBD_SetConfig+0x148>)
 800c0f4:	781b      	ldrb	r3, [r3, #0]
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f7ff f8f7 	bl	800b2ec <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c0fe:	2303      	movs	r3, #3
 800c100:	73fb      	strb	r3, [r7, #15]
      break;
 800c102:	bf00      	nop
  }

  return ret;
 800c104:	7bfb      	ldrb	r3, [r7, #15]
}
 800c106:	4618      	mov	r0, r3
 800c108:	3710      	adds	r7, #16
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	20000b80 	.word	0x20000b80

0800c114 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b082      	sub	sp, #8
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	88db      	ldrh	r3, [r3, #6]
 800c122:	2b01      	cmp	r3, #1
 800c124:	d004      	beq.n	800c130 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c126:	6839      	ldr	r1, [r7, #0]
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 f8cd 	bl	800c2c8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c12e:	e023      	b.n	800c178 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c136:	b2db      	uxtb	r3, r3
 800c138:	2b02      	cmp	r3, #2
 800c13a:	dc02      	bgt.n	800c142 <USBD_GetConfig+0x2e>
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	dc03      	bgt.n	800c148 <USBD_GetConfig+0x34>
 800c140:	e015      	b.n	800c16e <USBD_GetConfig+0x5a>
 800c142:	2b03      	cmp	r3, #3
 800c144:	d00b      	beq.n	800c15e <USBD_GetConfig+0x4a>
 800c146:	e012      	b.n	800c16e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2200      	movs	r2, #0
 800c14c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	3308      	adds	r3, #8
 800c152:	2201      	movs	r2, #1
 800c154:	4619      	mov	r1, r3
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 f927 	bl	800c3aa <USBD_CtlSendData>
        break;
 800c15c:	e00c      	b.n	800c178 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	3304      	adds	r3, #4
 800c162:	2201      	movs	r2, #1
 800c164:	4619      	mov	r1, r3
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 f91f 	bl	800c3aa <USBD_CtlSendData>
        break;
 800c16c:	e004      	b.n	800c178 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c16e:	6839      	ldr	r1, [r7, #0]
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 f8a9 	bl	800c2c8 <USBD_CtlError>
        break;
 800c176:	bf00      	nop
}
 800c178:	bf00      	nop
 800c17a:	3708      	adds	r7, #8
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c190:	b2db      	uxtb	r3, r3
 800c192:	3b01      	subs	r3, #1
 800c194:	2b02      	cmp	r3, #2
 800c196:	d81e      	bhi.n	800c1d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	88db      	ldrh	r3, [r3, #6]
 800c19c:	2b02      	cmp	r3, #2
 800c19e:	d004      	beq.n	800c1aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c1a0:	6839      	ldr	r1, [r7, #0]
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 f890 	bl	800c2c8 <USBD_CtlError>
        break;
 800c1a8:	e01a      	b.n	800c1e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d005      	beq.n	800c1c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	68db      	ldr	r3, [r3, #12]
 800c1be:	f043 0202 	orr.w	r2, r3, #2
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	330c      	adds	r3, #12
 800c1ca:	2202      	movs	r2, #2
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 f8eb 	bl	800c3aa <USBD_CtlSendData>
      break;
 800c1d4:	e004      	b.n	800c1e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c1d6:	6839      	ldr	r1, [r7, #0]
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 f875 	bl	800c2c8 <USBD_CtlError>
      break;
 800c1de:	bf00      	nop
  }
}
 800c1e0:	bf00      	nop
 800c1e2:	3708      	adds	r7, #8
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	885b      	ldrh	r3, [r3, #2]
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d106      	bne.n	800c208 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 f92b 	bl	800c45e <USBD_CtlSendStatus>
  }
}
 800c208:	bf00      	nop
 800c20a:	3708      	adds	r7, #8
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c220:	b2db      	uxtb	r3, r3
 800c222:	3b01      	subs	r3, #1
 800c224:	2b02      	cmp	r3, #2
 800c226:	d80b      	bhi.n	800c240 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	885b      	ldrh	r3, [r3, #2]
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	d10c      	bne.n	800c24a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2200      	movs	r2, #0
 800c234:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 f910 	bl	800c45e <USBD_CtlSendStatus>
      }
      break;
 800c23e:	e004      	b.n	800c24a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c240:	6839      	ldr	r1, [r7, #0]
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f000 f840 	bl	800c2c8 <USBD_CtlError>
      break;
 800c248:	e000      	b.n	800c24c <USBD_ClrFeature+0x3c>
      break;
 800c24a:	bf00      	nop
  }
}
 800c24c:	bf00      	nop
 800c24e:	3708      	adds	r7, #8
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	781a      	ldrb	r2, [r3, #0]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	3301      	adds	r3, #1
 800c26e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	781a      	ldrb	r2, [r3, #0]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	3301      	adds	r3, #1
 800c27c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c27e:	68f8      	ldr	r0, [r7, #12]
 800c280:	f7ff fabb 	bl	800b7fa <SWAPBYTE>
 800c284:	4603      	mov	r3, r0
 800c286:	461a      	mov	r2, r3
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	3301      	adds	r3, #1
 800c290:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	3301      	adds	r3, #1
 800c296:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c298:	68f8      	ldr	r0, [r7, #12]
 800c29a:	f7ff faae 	bl	800b7fa <SWAPBYTE>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c2b2:	68f8      	ldr	r0, [r7, #12]
 800c2b4:	f7ff faa1 	bl	800b7fa <SWAPBYTE>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	80da      	strh	r2, [r3, #6]
}
 800c2c0:	bf00      	nop
 800c2c2:	3710      	adds	r7, #16
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b082      	sub	sp, #8
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2d2:	2180      	movs	r1, #128	; 0x80
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f002 ff35 	bl	800f144 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c2da:	2100      	movs	r1, #0
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f002 ff31 	bl	800f144 <USBD_LL_StallEP>
}
 800c2e2:	bf00      	nop
 800c2e4:	3708      	adds	r7, #8
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c2ea:	b580      	push	{r7, lr}
 800c2ec:	b086      	sub	sp, #24
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	60f8      	str	r0, [r7, #12]
 800c2f2:	60b9      	str	r1, [r7, #8]
 800c2f4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d036      	beq.n	800c36e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c304:	6938      	ldr	r0, [r7, #16]
 800c306:	f000 f836 	bl	800c376 <USBD_GetLen>
 800c30a:	4603      	mov	r3, r0
 800c30c:	3301      	adds	r3, #1
 800c30e:	b29b      	uxth	r3, r3
 800c310:	005b      	lsls	r3, r3, #1
 800c312:	b29a      	uxth	r2, r3
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c318:	7dfb      	ldrb	r3, [r7, #23]
 800c31a:	68ba      	ldr	r2, [r7, #8]
 800c31c:	4413      	add	r3, r2
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	7812      	ldrb	r2, [r2, #0]
 800c322:	701a      	strb	r2, [r3, #0]
  idx++;
 800c324:	7dfb      	ldrb	r3, [r7, #23]
 800c326:	3301      	adds	r3, #1
 800c328:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c32a:	7dfb      	ldrb	r3, [r7, #23]
 800c32c:	68ba      	ldr	r2, [r7, #8]
 800c32e:	4413      	add	r3, r2
 800c330:	2203      	movs	r2, #3
 800c332:	701a      	strb	r2, [r3, #0]
  idx++;
 800c334:	7dfb      	ldrb	r3, [r7, #23]
 800c336:	3301      	adds	r3, #1
 800c338:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c33a:	e013      	b.n	800c364 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c33c:	7dfb      	ldrb	r3, [r7, #23]
 800c33e:	68ba      	ldr	r2, [r7, #8]
 800c340:	4413      	add	r3, r2
 800c342:	693a      	ldr	r2, [r7, #16]
 800c344:	7812      	ldrb	r2, [r2, #0]
 800c346:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	3301      	adds	r3, #1
 800c34c:	613b      	str	r3, [r7, #16]
    idx++;
 800c34e:	7dfb      	ldrb	r3, [r7, #23]
 800c350:	3301      	adds	r3, #1
 800c352:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c354:	7dfb      	ldrb	r3, [r7, #23]
 800c356:	68ba      	ldr	r2, [r7, #8]
 800c358:	4413      	add	r3, r2
 800c35a:	2200      	movs	r2, #0
 800c35c:	701a      	strb	r2, [r3, #0]
    idx++;
 800c35e:	7dfb      	ldrb	r3, [r7, #23]
 800c360:	3301      	adds	r3, #1
 800c362:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	781b      	ldrb	r3, [r3, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d1e7      	bne.n	800c33c <USBD_GetString+0x52>
 800c36c:	e000      	b.n	800c370 <USBD_GetString+0x86>
    return;
 800c36e:	bf00      	nop
  }
}
 800c370:	3718      	adds	r7, #24
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}

0800c376 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c376:	b480      	push	{r7}
 800c378:	b085      	sub	sp, #20
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c37e:	2300      	movs	r3, #0
 800c380:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c386:	e005      	b.n	800c394 <USBD_GetLen+0x1e>
  {
    len++;
 800c388:	7bfb      	ldrb	r3, [r7, #15]
 800c38a:	3301      	adds	r3, #1
 800c38c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	3301      	adds	r3, #1
 800c392:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	781b      	ldrb	r3, [r3, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d1f5      	bne.n	800c388 <USBD_GetLen+0x12>
  }

  return len;
 800c39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3714      	adds	r7, #20
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a8:	4770      	bx	lr

0800c3aa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c3aa:	b580      	push	{r7, lr}
 800c3ac:	b084      	sub	sp, #16
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	60f8      	str	r0, [r7, #12]
 800c3b2:	60b9      	str	r1, [r7, #8]
 800c3b4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2202      	movs	r2, #2
 800c3ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	68ba      	ldr	r2, [r7, #8]
 800c3ce:	2100      	movs	r1, #0
 800c3d0:	68f8      	ldr	r0, [r7, #12]
 800c3d2:	f002 ff40 	bl	800f256 <USBD_LL_Transmit>

  return USBD_OK;
 800c3d6:	2300      	movs	r3, #0
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3710      	adds	r7, #16
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	68ba      	ldr	r2, [r7, #8]
 800c3f0:	2100      	movs	r1, #0
 800c3f2:	68f8      	ldr	r0, [r7, #12]
 800c3f4:	f002 ff2f 	bl	800f256 <USBD_LL_Transmit>

  return USBD_OK;
 800c3f8:	2300      	movs	r3, #0
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3710      	adds	r7, #16
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}

0800c402 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c402:	b580      	push	{r7, lr}
 800c404:	b084      	sub	sp, #16
 800c406:	af00      	add	r7, sp, #0
 800c408:	60f8      	str	r0, [r7, #12]
 800c40a:	60b9      	str	r1, [r7, #8]
 800c40c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2203      	movs	r2, #3
 800c412:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	68ba      	ldr	r2, [r7, #8]
 800c42a:	2100      	movs	r1, #0
 800c42c:	68f8      	ldr	r0, [r7, #12]
 800c42e:	f002 ff33 	bl	800f298 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c432:	2300      	movs	r3, #0
}
 800c434:	4618      	mov	r0, r3
 800c436:	3710      	adds	r7, #16
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b084      	sub	sp, #16
 800c440:	af00      	add	r7, sp, #0
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	60b9      	str	r1, [r7, #8]
 800c446:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	68ba      	ldr	r2, [r7, #8]
 800c44c:	2100      	movs	r1, #0
 800c44e:	68f8      	ldr	r0, [r7, #12]
 800c450:	f002 ff22 	bl	800f298 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c454:	2300      	movs	r3, #0
}
 800c456:	4618      	mov	r0, r3
 800c458:	3710      	adds	r7, #16
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}

0800c45e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c45e:	b580      	push	{r7, lr}
 800c460:	b082      	sub	sp, #8
 800c462:	af00      	add	r7, sp, #0
 800c464:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2204      	movs	r2, #4
 800c46a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c46e:	2300      	movs	r3, #0
 800c470:	2200      	movs	r2, #0
 800c472:	2100      	movs	r1, #0
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f002 feee 	bl	800f256 <USBD_LL_Transmit>

  return USBD_OK;
 800c47a:	2300      	movs	r3, #0
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3708      	adds	r7, #8
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2205      	movs	r2, #5
 800c490:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c494:	2300      	movs	r3, #0
 800c496:	2200      	movs	r2, #0
 800c498:	2100      	movs	r1, #0
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f002 fefc 	bl	800f298 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4a0:	2300      	movs	r3, #0
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3708      	adds	r7, #8
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
	...

0800c4ac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c4b6:	79fb      	ldrb	r3, [r7, #7]
 800c4b8:	4a08      	ldr	r2, [pc, #32]	; (800c4dc <disk_status+0x30>)
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	4413      	add	r3, r2
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	79fa      	ldrb	r2, [r7, #7]
 800c4c4:	4905      	ldr	r1, [pc, #20]	; (800c4dc <disk_status+0x30>)
 800c4c6:	440a      	add	r2, r1
 800c4c8:	7a12      	ldrb	r2, [r2, #8]
 800c4ca:	4610      	mov	r0, r2
 800c4cc:	4798      	blx	r3
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c4d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3710      	adds	r7, #16
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}
 800c4dc:	20000bac 	.word	0x20000bac

0800c4e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b084      	sub	sp, #16
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c4ee:	79fb      	ldrb	r3, [r7, #7]
 800c4f0:	4a0d      	ldr	r2, [pc, #52]	; (800c528 <disk_initialize+0x48>)
 800c4f2:	5cd3      	ldrb	r3, [r2, r3]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d111      	bne.n	800c51c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c4f8:	79fb      	ldrb	r3, [r7, #7]
 800c4fa:	4a0b      	ldr	r2, [pc, #44]	; (800c528 <disk_initialize+0x48>)
 800c4fc:	2101      	movs	r1, #1
 800c4fe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c500:	79fb      	ldrb	r3, [r7, #7]
 800c502:	4a09      	ldr	r2, [pc, #36]	; (800c528 <disk_initialize+0x48>)
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	4413      	add	r3, r2
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	79fa      	ldrb	r2, [r7, #7]
 800c50e:	4906      	ldr	r1, [pc, #24]	; (800c528 <disk_initialize+0x48>)
 800c510:	440a      	add	r2, r1
 800c512:	7a12      	ldrb	r2, [r2, #8]
 800c514:	4610      	mov	r0, r2
 800c516:	4798      	blx	r3
 800c518:	4603      	mov	r3, r0
 800c51a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c51c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	20000bac 	.word	0x20000bac

0800c52c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c52c:	b590      	push	{r4, r7, lr}
 800c52e:	b087      	sub	sp, #28
 800c530:	af00      	add	r7, sp, #0
 800c532:	60b9      	str	r1, [r7, #8]
 800c534:	607a      	str	r2, [r7, #4]
 800c536:	603b      	str	r3, [r7, #0]
 800c538:	4603      	mov	r3, r0
 800c53a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c53c:	7bfb      	ldrb	r3, [r7, #15]
 800c53e:	4a0a      	ldr	r2, [pc, #40]	; (800c568 <disk_read+0x3c>)
 800c540:	009b      	lsls	r3, r3, #2
 800c542:	4413      	add	r3, r2
 800c544:	685b      	ldr	r3, [r3, #4]
 800c546:	689c      	ldr	r4, [r3, #8]
 800c548:	7bfb      	ldrb	r3, [r7, #15]
 800c54a:	4a07      	ldr	r2, [pc, #28]	; (800c568 <disk_read+0x3c>)
 800c54c:	4413      	add	r3, r2
 800c54e:	7a18      	ldrb	r0, [r3, #8]
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	68b9      	ldr	r1, [r7, #8]
 800c556:	47a0      	blx	r4
 800c558:	4603      	mov	r3, r0
 800c55a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c55c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c55e:	4618      	mov	r0, r3
 800c560:	371c      	adds	r7, #28
 800c562:	46bd      	mov	sp, r7
 800c564:	bd90      	pop	{r4, r7, pc}
 800c566:	bf00      	nop
 800c568:	20000bac 	.word	0x20000bac

0800c56c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c56c:	b590      	push	{r4, r7, lr}
 800c56e:	b087      	sub	sp, #28
 800c570:	af00      	add	r7, sp, #0
 800c572:	60b9      	str	r1, [r7, #8]
 800c574:	607a      	str	r2, [r7, #4]
 800c576:	603b      	str	r3, [r7, #0]
 800c578:	4603      	mov	r3, r0
 800c57a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c57c:	7bfb      	ldrb	r3, [r7, #15]
 800c57e:	4a0a      	ldr	r2, [pc, #40]	; (800c5a8 <disk_write+0x3c>)
 800c580:	009b      	lsls	r3, r3, #2
 800c582:	4413      	add	r3, r2
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	68dc      	ldr	r4, [r3, #12]
 800c588:	7bfb      	ldrb	r3, [r7, #15]
 800c58a:	4a07      	ldr	r2, [pc, #28]	; (800c5a8 <disk_write+0x3c>)
 800c58c:	4413      	add	r3, r2
 800c58e:	7a18      	ldrb	r0, [r3, #8]
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	687a      	ldr	r2, [r7, #4]
 800c594:	68b9      	ldr	r1, [r7, #8]
 800c596:	47a0      	blx	r4
 800c598:	4603      	mov	r3, r0
 800c59a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c59c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	371c      	adds	r7, #28
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd90      	pop	{r4, r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	20000bac 	.word	0x20000bac

0800c5ac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b084      	sub	sp, #16
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	603a      	str	r2, [r7, #0]
 800c5b6:	71fb      	strb	r3, [r7, #7]
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c5bc:	79fb      	ldrb	r3, [r7, #7]
 800c5be:	4a09      	ldr	r2, [pc, #36]	; (800c5e4 <disk_ioctl+0x38>)
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	4413      	add	r3, r2
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	691b      	ldr	r3, [r3, #16]
 800c5c8:	79fa      	ldrb	r2, [r7, #7]
 800c5ca:	4906      	ldr	r1, [pc, #24]	; (800c5e4 <disk_ioctl+0x38>)
 800c5cc:	440a      	add	r2, r1
 800c5ce:	7a10      	ldrb	r0, [r2, #8]
 800c5d0:	79b9      	ldrb	r1, [r7, #6]
 800c5d2:	683a      	ldr	r2, [r7, #0]
 800c5d4:	4798      	blx	r3
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	73fb      	strb	r3, [r7, #15]
  return res;
 800c5da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3710      	adds	r7, #16
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	20000bac 	.word	0x20000bac

0800c5e8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b085      	sub	sp, #20
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c5f8:	89fb      	ldrh	r3, [r7, #14]
 800c5fa:	021b      	lsls	r3, r3, #8
 800c5fc:	b21a      	sxth	r2, r3
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	b21b      	sxth	r3, r3
 800c604:	4313      	orrs	r3, r2
 800c606:	b21b      	sxth	r3, r3
 800c608:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c60a:	89fb      	ldrh	r3, [r7, #14]
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3714      	adds	r7, #20
 800c610:	46bd      	mov	sp, r7
 800c612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c616:	4770      	bx	lr

0800c618 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c618:	b480      	push	{r7}
 800c61a:	b085      	sub	sp, #20
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	3303      	adds	r3, #3
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	021b      	lsls	r3, r3, #8
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	3202      	adds	r2, #2
 800c630:	7812      	ldrb	r2, [r2, #0]
 800c632:	4313      	orrs	r3, r2
 800c634:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	021b      	lsls	r3, r3, #8
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	3201      	adds	r2, #1
 800c63e:	7812      	ldrb	r2, [r2, #0]
 800c640:	4313      	orrs	r3, r2
 800c642:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	021b      	lsls	r3, r3, #8
 800c648:	687a      	ldr	r2, [r7, #4]
 800c64a:	7812      	ldrb	r2, [r2, #0]
 800c64c:	4313      	orrs	r3, r2
 800c64e:	60fb      	str	r3, [r7, #12]
	return rv;
 800c650:	68fb      	ldr	r3, [r7, #12]
}
 800c652:	4618      	mov	r0, r3
 800c654:	3714      	adds	r7, #20
 800c656:	46bd      	mov	sp, r7
 800c658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65c:	4770      	bx	lr

0800c65e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c65e:	b480      	push	{r7}
 800c660:	b083      	sub	sp, #12
 800c662:	af00      	add	r7, sp, #0
 800c664:	6078      	str	r0, [r7, #4]
 800c666:	460b      	mov	r3, r1
 800c668:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	1c5a      	adds	r2, r3, #1
 800c66e:	607a      	str	r2, [r7, #4]
 800c670:	887a      	ldrh	r2, [r7, #2]
 800c672:	b2d2      	uxtb	r2, r2
 800c674:	701a      	strb	r2, [r3, #0]
 800c676:	887b      	ldrh	r3, [r7, #2]
 800c678:	0a1b      	lsrs	r3, r3, #8
 800c67a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	1c5a      	adds	r2, r3, #1
 800c680:	607a      	str	r2, [r7, #4]
 800c682:	887a      	ldrh	r2, [r7, #2]
 800c684:	b2d2      	uxtb	r2, r2
 800c686:	701a      	strb	r2, [r3, #0]
}
 800c688:	bf00      	nop
 800c68a:	370c      	adds	r7, #12
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr

0800c694 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	1c5a      	adds	r2, r3, #1
 800c6a2:	607a      	str	r2, [r7, #4]
 800c6a4:	683a      	ldr	r2, [r7, #0]
 800c6a6:	b2d2      	uxtb	r2, r2
 800c6a8:	701a      	strb	r2, [r3, #0]
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	0a1b      	lsrs	r3, r3, #8
 800c6ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	1c5a      	adds	r2, r3, #1
 800c6b4:	607a      	str	r2, [r7, #4]
 800c6b6:	683a      	ldr	r2, [r7, #0]
 800c6b8:	b2d2      	uxtb	r2, r2
 800c6ba:	701a      	strb	r2, [r3, #0]
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	0a1b      	lsrs	r3, r3, #8
 800c6c0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	1c5a      	adds	r2, r3, #1
 800c6c6:	607a      	str	r2, [r7, #4]
 800c6c8:	683a      	ldr	r2, [r7, #0]
 800c6ca:	b2d2      	uxtb	r2, r2
 800c6cc:	701a      	strb	r2, [r3, #0]
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	0a1b      	lsrs	r3, r3, #8
 800c6d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	1c5a      	adds	r2, r3, #1
 800c6d8:	607a      	str	r2, [r7, #4]
 800c6da:	683a      	ldr	r2, [r7, #0]
 800c6dc:	b2d2      	uxtb	r2, r2
 800c6de:	701a      	strb	r2, [r3, #0]
}
 800c6e0:	bf00      	nop
 800c6e2:	370c      	adds	r7, #12
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr

0800c6ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c6ec:	b480      	push	{r7}
 800c6ee:	b087      	sub	sp, #28
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	60f8      	str	r0, [r7, #12]
 800c6f4:	60b9      	str	r1, [r7, #8]
 800c6f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d00d      	beq.n	800c722 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c706:	693a      	ldr	r2, [r7, #16]
 800c708:	1c53      	adds	r3, r2, #1
 800c70a:	613b      	str	r3, [r7, #16]
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	1c59      	adds	r1, r3, #1
 800c710:	6179      	str	r1, [r7, #20]
 800c712:	7812      	ldrb	r2, [r2, #0]
 800c714:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	3b01      	subs	r3, #1
 800c71a:	607b      	str	r3, [r7, #4]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d1f1      	bne.n	800c706 <mem_cpy+0x1a>
	}
}
 800c722:	bf00      	nop
 800c724:	371c      	adds	r7, #28
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr

0800c72e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c72e:	b480      	push	{r7}
 800c730:	b087      	sub	sp, #28
 800c732:	af00      	add	r7, sp, #0
 800c734:	60f8      	str	r0, [r7, #12]
 800c736:	60b9      	str	r1, [r7, #8]
 800c738:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	1c5a      	adds	r2, r3, #1
 800c742:	617a      	str	r2, [r7, #20]
 800c744:	68ba      	ldr	r2, [r7, #8]
 800c746:	b2d2      	uxtb	r2, r2
 800c748:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	3b01      	subs	r3, #1
 800c74e:	607b      	str	r3, [r7, #4]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1f3      	bne.n	800c73e <mem_set+0x10>
}
 800c756:	bf00      	nop
 800c758:	bf00      	nop
 800c75a:	371c      	adds	r7, #28
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr

0800c764 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c764:	b480      	push	{r7}
 800c766:	b089      	sub	sp, #36	; 0x24
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	61fb      	str	r3, [r7, #28]
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c778:	2300      	movs	r3, #0
 800c77a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c77c:	69fb      	ldr	r3, [r7, #28]
 800c77e:	1c5a      	adds	r2, r3, #1
 800c780:	61fa      	str	r2, [r7, #28]
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	4619      	mov	r1, r3
 800c786:	69bb      	ldr	r3, [r7, #24]
 800c788:	1c5a      	adds	r2, r3, #1
 800c78a:	61ba      	str	r2, [r7, #24]
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	1acb      	subs	r3, r1, r3
 800c790:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	3b01      	subs	r3, #1
 800c796:	607b      	str	r3, [r7, #4]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d002      	beq.n	800c7a4 <mem_cmp+0x40>
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d0eb      	beq.n	800c77c <mem_cmp+0x18>

	return r;
 800c7a4:	697b      	ldr	r3, [r7, #20]
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3724      	adds	r7, #36	; 0x24
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b0:	4770      	bx	lr

0800c7b2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c7b2:	b480      	push	{r7}
 800c7b4:	b083      	sub	sp, #12
 800c7b6:	af00      	add	r7, sp, #0
 800c7b8:	6078      	str	r0, [r7, #4]
 800c7ba:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c7bc:	e002      	b.n	800c7c4 <chk_chr+0x12>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	607b      	str	r3, [r7, #4]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d005      	beq.n	800c7d8 <chk_chr+0x26>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d1f2      	bne.n	800c7be <chk_chr+0xc>
	return *str;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	781b      	ldrb	r3, [r3, #0]
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	370c      	adds	r7, #12
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr

0800c7e8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b085      	sub	sp, #20
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	60bb      	str	r3, [r7, #8]
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	60fb      	str	r3, [r7, #12]
 800c7fa:	e029      	b.n	800c850 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c7fc:	4a27      	ldr	r2, [pc, #156]	; (800c89c <chk_lock+0xb4>)
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	011b      	lsls	r3, r3, #4
 800c802:	4413      	add	r3, r2
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d01d      	beq.n	800c846 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c80a:	4a24      	ldr	r2, [pc, #144]	; (800c89c <chk_lock+0xb4>)
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	011b      	lsls	r3, r3, #4
 800c810:	4413      	add	r3, r2
 800c812:	681a      	ldr	r2, [r3, #0]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d116      	bne.n	800c84a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c81c:	4a1f      	ldr	r2, [pc, #124]	; (800c89c <chk_lock+0xb4>)
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	011b      	lsls	r3, r3, #4
 800c822:	4413      	add	r3, r2
 800c824:	3304      	adds	r3, #4
 800c826:	681a      	ldr	r2, [r3, #0]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d10c      	bne.n	800c84a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c830:	4a1a      	ldr	r2, [pc, #104]	; (800c89c <chk_lock+0xb4>)
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	011b      	lsls	r3, r3, #4
 800c836:	4413      	add	r3, r2
 800c838:	3308      	adds	r3, #8
 800c83a:	681a      	ldr	r2, [r3, #0]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c840:	429a      	cmp	r2, r3
 800c842:	d102      	bne.n	800c84a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c844:	e007      	b.n	800c856 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c846:	2301      	movs	r3, #1
 800c848:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	3301      	adds	r3, #1
 800c84e:	60fb      	str	r3, [r7, #12]
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2b01      	cmp	r3, #1
 800c854:	d9d2      	bls.n	800c7fc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	2b02      	cmp	r3, #2
 800c85a:	d109      	bne.n	800c870 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d102      	bne.n	800c868 <chk_lock+0x80>
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	2b02      	cmp	r3, #2
 800c866:	d101      	bne.n	800c86c <chk_lock+0x84>
 800c868:	2300      	movs	r3, #0
 800c86a:	e010      	b.n	800c88e <chk_lock+0xa6>
 800c86c:	2312      	movs	r3, #18
 800c86e:	e00e      	b.n	800c88e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d108      	bne.n	800c888 <chk_lock+0xa0>
 800c876:	4a09      	ldr	r2, [pc, #36]	; (800c89c <chk_lock+0xb4>)
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	011b      	lsls	r3, r3, #4
 800c87c:	4413      	add	r3, r2
 800c87e:	330c      	adds	r3, #12
 800c880:	881b      	ldrh	r3, [r3, #0]
 800c882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c886:	d101      	bne.n	800c88c <chk_lock+0xa4>
 800c888:	2310      	movs	r3, #16
 800c88a:	e000      	b.n	800c88e <chk_lock+0xa6>
 800c88c:	2300      	movs	r3, #0
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3714      	adds	r7, #20
 800c892:	46bd      	mov	sp, r7
 800c894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c898:	4770      	bx	lr
 800c89a:	bf00      	nop
 800c89c:	20000b8c 	.word	0x20000b8c

0800c8a0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b083      	sub	sp, #12
 800c8a4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	607b      	str	r3, [r7, #4]
 800c8aa:	e002      	b.n	800c8b2 <enq_lock+0x12>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	607b      	str	r3, [r7, #4]
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d806      	bhi.n	800c8c6 <enq_lock+0x26>
 800c8b8:	4a09      	ldr	r2, [pc, #36]	; (800c8e0 <enq_lock+0x40>)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	011b      	lsls	r3, r3, #4
 800c8be:	4413      	add	r3, r2
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d1f2      	bne.n	800c8ac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2b02      	cmp	r3, #2
 800c8ca:	bf14      	ite	ne
 800c8cc:	2301      	movne	r3, #1
 800c8ce:	2300      	moveq	r3, #0
 800c8d0:	b2db      	uxtb	r3, r3
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	370c      	adds	r7, #12
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8dc:	4770      	bx	lr
 800c8de:	bf00      	nop
 800c8e0:	20000b8c 	.word	0x20000b8c

0800c8e4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	60fb      	str	r3, [r7, #12]
 800c8f2:	e01f      	b.n	800c934 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c8f4:	4a41      	ldr	r2, [pc, #260]	; (800c9fc <inc_lock+0x118>)
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	011b      	lsls	r3, r3, #4
 800c8fa:	4413      	add	r3, r2
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	429a      	cmp	r2, r3
 800c904:	d113      	bne.n	800c92e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c906:	4a3d      	ldr	r2, [pc, #244]	; (800c9fc <inc_lock+0x118>)
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	011b      	lsls	r3, r3, #4
 800c90c:	4413      	add	r3, r2
 800c90e:	3304      	adds	r3, #4
 800c910:	681a      	ldr	r2, [r3, #0]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c916:	429a      	cmp	r2, r3
 800c918:	d109      	bne.n	800c92e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c91a:	4a38      	ldr	r2, [pc, #224]	; (800c9fc <inc_lock+0x118>)
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	011b      	lsls	r3, r3, #4
 800c920:	4413      	add	r3, r2
 800c922:	3308      	adds	r3, #8
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d006      	beq.n	800c93c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	3301      	adds	r3, #1
 800c932:	60fb      	str	r3, [r7, #12]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	2b01      	cmp	r3, #1
 800c938:	d9dc      	bls.n	800c8f4 <inc_lock+0x10>
 800c93a:	e000      	b.n	800c93e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c93c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2b02      	cmp	r3, #2
 800c942:	d132      	bne.n	800c9aa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c944:	2300      	movs	r3, #0
 800c946:	60fb      	str	r3, [r7, #12]
 800c948:	e002      	b.n	800c950 <inc_lock+0x6c>
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	3301      	adds	r3, #1
 800c94e:	60fb      	str	r3, [r7, #12]
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2b01      	cmp	r3, #1
 800c954:	d806      	bhi.n	800c964 <inc_lock+0x80>
 800c956:	4a29      	ldr	r2, [pc, #164]	; (800c9fc <inc_lock+0x118>)
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	011b      	lsls	r3, r3, #4
 800c95c:	4413      	add	r3, r2
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d1f2      	bne.n	800c94a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2b02      	cmp	r3, #2
 800c968:	d101      	bne.n	800c96e <inc_lock+0x8a>
 800c96a:	2300      	movs	r3, #0
 800c96c:	e040      	b.n	800c9f0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	4922      	ldr	r1, [pc, #136]	; (800c9fc <inc_lock+0x118>)
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	011b      	lsls	r3, r3, #4
 800c978:	440b      	add	r3, r1
 800c97a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	689a      	ldr	r2, [r3, #8]
 800c980:	491e      	ldr	r1, [pc, #120]	; (800c9fc <inc_lock+0x118>)
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	011b      	lsls	r3, r3, #4
 800c986:	440b      	add	r3, r1
 800c988:	3304      	adds	r3, #4
 800c98a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	695a      	ldr	r2, [r3, #20]
 800c990:	491a      	ldr	r1, [pc, #104]	; (800c9fc <inc_lock+0x118>)
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	011b      	lsls	r3, r3, #4
 800c996:	440b      	add	r3, r1
 800c998:	3308      	adds	r3, #8
 800c99a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c99c:	4a17      	ldr	r2, [pc, #92]	; (800c9fc <inc_lock+0x118>)
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	011b      	lsls	r3, r3, #4
 800c9a2:	4413      	add	r3, r2
 800c9a4:	330c      	adds	r3, #12
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d009      	beq.n	800c9c4 <inc_lock+0xe0>
 800c9b0:	4a12      	ldr	r2, [pc, #72]	; (800c9fc <inc_lock+0x118>)
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	011b      	lsls	r3, r3, #4
 800c9b6:	4413      	add	r3, r2
 800c9b8:	330c      	adds	r3, #12
 800c9ba:	881b      	ldrh	r3, [r3, #0]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d001      	beq.n	800c9c4 <inc_lock+0xe0>
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	e015      	b.n	800c9f0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d108      	bne.n	800c9dc <inc_lock+0xf8>
 800c9ca:	4a0c      	ldr	r2, [pc, #48]	; (800c9fc <inc_lock+0x118>)
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	011b      	lsls	r3, r3, #4
 800c9d0:	4413      	add	r3, r2
 800c9d2:	330c      	adds	r3, #12
 800c9d4:	881b      	ldrh	r3, [r3, #0]
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	b29a      	uxth	r2, r3
 800c9da:	e001      	b.n	800c9e0 <inc_lock+0xfc>
 800c9dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c9e0:	4906      	ldr	r1, [pc, #24]	; (800c9fc <inc_lock+0x118>)
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	011b      	lsls	r3, r3, #4
 800c9e6:	440b      	add	r3, r1
 800c9e8:	330c      	adds	r3, #12
 800c9ea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	3301      	adds	r3, #1
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3714      	adds	r7, #20
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr
 800c9fc:	20000b8c 	.word	0x20000b8c

0800ca00 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b085      	sub	sp, #20
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ca08:	2300      	movs	r3, #0
 800ca0a:	60fb      	str	r3, [r7, #12]
 800ca0c:	e010      	b.n	800ca30 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ca0e:	4a0d      	ldr	r2, [pc, #52]	; (800ca44 <clear_lock+0x44>)
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	011b      	lsls	r3, r3, #4
 800ca14:	4413      	add	r3, r2
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d105      	bne.n	800ca2a <clear_lock+0x2a>
 800ca1e:	4a09      	ldr	r2, [pc, #36]	; (800ca44 <clear_lock+0x44>)
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	011b      	lsls	r3, r3, #4
 800ca24:	4413      	add	r3, r2
 800ca26:	2200      	movs	r2, #0
 800ca28:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	60fb      	str	r3, [r7, #12]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2b01      	cmp	r3, #1
 800ca34:	d9eb      	bls.n	800ca0e <clear_lock+0xe>
	}
}
 800ca36:	bf00      	nop
 800ca38:	bf00      	nop
 800ca3a:	3714      	adds	r7, #20
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr
 800ca44:	20000b8c 	.word	0x20000b8c

0800ca48 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b086      	sub	sp, #24
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ca50:	2300      	movs	r3, #0
 800ca52:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	78db      	ldrb	r3, [r3, #3]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d034      	beq.n	800cac6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca60:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	7858      	ldrb	r0, [r3, #1]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	697a      	ldr	r2, [r7, #20]
 800ca70:	f7ff fd7c 	bl	800c56c <disk_write>
 800ca74:	4603      	mov	r3, r0
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d002      	beq.n	800ca80 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	73fb      	strb	r3, [r7, #15]
 800ca7e:	e022      	b.n	800cac6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2200      	movs	r2, #0
 800ca84:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6a1b      	ldr	r3, [r3, #32]
 800ca8a:	697a      	ldr	r2, [r7, #20]
 800ca8c:	1ad2      	subs	r2, r2, r3
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	699b      	ldr	r3, [r3, #24]
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d217      	bcs.n	800cac6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	789b      	ldrb	r3, [r3, #2]
 800ca9a:	613b      	str	r3, [r7, #16]
 800ca9c:	e010      	b.n	800cac0 <sync_window+0x78>
					wsect += fs->fsize;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	699b      	ldr	r3, [r3, #24]
 800caa2:	697a      	ldr	r2, [r7, #20]
 800caa4:	4413      	add	r3, r2
 800caa6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	7858      	ldrb	r0, [r3, #1]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cab2:	2301      	movs	r3, #1
 800cab4:	697a      	ldr	r2, [r7, #20]
 800cab6:	f7ff fd59 	bl	800c56c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	3b01      	subs	r3, #1
 800cabe:	613b      	str	r3, [r7, #16]
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	2b01      	cmp	r3, #1
 800cac4:	d8eb      	bhi.n	800ca9e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cac6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3718      	adds	r7, #24
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b084      	sub	sp, #16
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cada:	2300      	movs	r3, #0
 800cadc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae2:	683a      	ldr	r2, [r7, #0]
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d01b      	beq.n	800cb20 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f7ff ffad 	bl	800ca48 <sync_window>
 800caee:	4603      	mov	r3, r0
 800caf0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800caf2:	7bfb      	ldrb	r3, [r7, #15]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d113      	bne.n	800cb20 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	7858      	ldrb	r0, [r3, #1]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cb02:	2301      	movs	r3, #1
 800cb04:	683a      	ldr	r2, [r7, #0]
 800cb06:	f7ff fd11 	bl	800c52c <disk_read>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d004      	beq.n	800cb1a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cb10:	f04f 33ff 	mov.w	r3, #4294967295
 800cb14:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cb16:	2301      	movs	r3, #1
 800cb18:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	683a      	ldr	r2, [r7, #0]
 800cb1e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800cb20:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3710      	adds	r7, #16
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
	...

0800cb2c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f7ff ff87 	bl	800ca48 <sync_window>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cb3e:	7bfb      	ldrb	r3, [r7, #15]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d158      	bne.n	800cbf6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	2b03      	cmp	r3, #3
 800cb4a:	d148      	bne.n	800cbde <sync_fs+0xb2>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	791b      	ldrb	r3, [r3, #4]
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d144      	bne.n	800cbde <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	3330      	adds	r3, #48	; 0x30
 800cb58:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb5c:	2100      	movs	r1, #0
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7ff fde5 	bl	800c72e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	3330      	adds	r3, #48	; 0x30
 800cb68:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cb6c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7ff fd74 	bl	800c65e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	3330      	adds	r3, #48	; 0x30
 800cb7a:	4921      	ldr	r1, [pc, #132]	; (800cc00 <sync_fs+0xd4>)
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f7ff fd89 	bl	800c694 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	3330      	adds	r3, #48	; 0x30
 800cb86:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cb8a:	491e      	ldr	r1, [pc, #120]	; (800cc04 <sync_fs+0xd8>)
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7ff fd81 	bl	800c694 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	3330      	adds	r3, #48	; 0x30
 800cb96:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	4619      	mov	r1, r3
 800cba0:	4610      	mov	r0, r2
 800cba2:	f7ff fd77 	bl	800c694 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	3330      	adds	r3, #48	; 0x30
 800cbaa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	68db      	ldr	r3, [r3, #12]
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	4610      	mov	r0, r2
 800cbb6:	f7ff fd6d 	bl	800c694 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	69db      	ldr	r3, [r3, #28]
 800cbbe:	1c5a      	adds	r2, r3, #1
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	7858      	ldrb	r0, [r3, #1]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	f7ff fcca 	bl	800c56c <disk_write>
			fs->fsi_flag = 0;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	785b      	ldrb	r3, [r3, #1]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	2100      	movs	r1, #0
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f7ff fce0 	bl	800c5ac <disk_ioctl>
 800cbec:	4603      	mov	r3, r0
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d001      	beq.n	800cbf6 <sync_fs+0xca>
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cbf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3710      	adds	r7, #16
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	41615252 	.word	0x41615252
 800cc04:	61417272 	.word	0x61417272

0800cc08 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b083      	sub	sp, #12
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	3b02      	subs	r3, #2
 800cc16:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	695b      	ldr	r3, [r3, #20]
 800cc1c:	3b02      	subs	r3, #2
 800cc1e:	683a      	ldr	r2, [r7, #0]
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d301      	bcc.n	800cc28 <clust2sect+0x20>
 800cc24:	2300      	movs	r3, #0
 800cc26:	e008      	b.n	800cc3a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	895b      	ldrh	r3, [r3, #10]
 800cc2c:	461a      	mov	r2, r3
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	fb03 f202 	mul.w	r2, r3, r2
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc38:	4413      	add	r3, r2
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	370c      	adds	r7, #12
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc44:	4770      	bx	lr

0800cc46 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cc46:	b580      	push	{r7, lr}
 800cc48:	b086      	sub	sp, #24
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	6078      	str	r0, [r7, #4]
 800cc4e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	2b01      	cmp	r3, #1
 800cc5a:	d904      	bls.n	800cc66 <get_fat+0x20>
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	695b      	ldr	r3, [r3, #20]
 800cc60:	683a      	ldr	r2, [r7, #0]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d302      	bcc.n	800cc6c <get_fat+0x26>
		val = 1;	/* Internal error */
 800cc66:	2301      	movs	r3, #1
 800cc68:	617b      	str	r3, [r7, #20]
 800cc6a:	e08f      	b.n	800cd8c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cc6c:	f04f 33ff 	mov.w	r3, #4294967295
 800cc70:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	2b03      	cmp	r3, #3
 800cc78:	d062      	beq.n	800cd40 <get_fat+0xfa>
 800cc7a:	2b03      	cmp	r3, #3
 800cc7c:	dc7c      	bgt.n	800cd78 <get_fat+0x132>
 800cc7e:	2b01      	cmp	r3, #1
 800cc80:	d002      	beq.n	800cc88 <get_fat+0x42>
 800cc82:	2b02      	cmp	r3, #2
 800cc84:	d042      	beq.n	800cd0c <get_fat+0xc6>
 800cc86:	e077      	b.n	800cd78 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	60fb      	str	r3, [r7, #12]
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	085b      	lsrs	r3, r3, #1
 800cc90:	68fa      	ldr	r2, [r7, #12]
 800cc92:	4413      	add	r3, r2
 800cc94:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	6a1a      	ldr	r2, [r3, #32]
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	0a5b      	lsrs	r3, r3, #9
 800cc9e:	4413      	add	r3, r2
 800cca0:	4619      	mov	r1, r3
 800cca2:	6938      	ldr	r0, [r7, #16]
 800cca4:	f7ff ff14 	bl	800cad0 <move_window>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d167      	bne.n	800cd7e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	1c5a      	adds	r2, r3, #1
 800ccb2:	60fa      	str	r2, [r7, #12]
 800ccb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccb8:	693a      	ldr	r2, [r7, #16]
 800ccba:	4413      	add	r3, r2
 800ccbc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ccc0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	6a1a      	ldr	r2, [r3, #32]
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	0a5b      	lsrs	r3, r3, #9
 800ccca:	4413      	add	r3, r2
 800cccc:	4619      	mov	r1, r3
 800ccce:	6938      	ldr	r0, [r7, #16]
 800ccd0:	f7ff fefe 	bl	800cad0 <move_window>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d153      	bne.n	800cd82 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cce0:	693a      	ldr	r2, [r7, #16]
 800cce2:	4413      	add	r3, r2
 800cce4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cce8:	021b      	lsls	r3, r3, #8
 800ccea:	461a      	mov	r2, r3
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	f003 0301 	and.w	r3, r3, #1
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d002      	beq.n	800cd02 <get_fat+0xbc>
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	091b      	lsrs	r3, r3, #4
 800cd00:	e002      	b.n	800cd08 <get_fat+0xc2>
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cd08:	617b      	str	r3, [r7, #20]
			break;
 800cd0a:	e03f      	b.n	800cd8c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	6a1a      	ldr	r2, [r3, #32]
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	0a1b      	lsrs	r3, r3, #8
 800cd14:	4413      	add	r3, r2
 800cd16:	4619      	mov	r1, r3
 800cd18:	6938      	ldr	r0, [r7, #16]
 800cd1a:	f7ff fed9 	bl	800cad0 <move_window>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d130      	bne.n	800cd86 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	005b      	lsls	r3, r3, #1
 800cd2e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cd32:	4413      	add	r3, r2
 800cd34:	4618      	mov	r0, r3
 800cd36:	f7ff fc57 	bl	800c5e8 <ld_word>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	617b      	str	r3, [r7, #20]
			break;
 800cd3e:	e025      	b.n	800cd8c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	6a1a      	ldr	r2, [r3, #32]
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	09db      	lsrs	r3, r3, #7
 800cd48:	4413      	add	r3, r2
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	6938      	ldr	r0, [r7, #16]
 800cd4e:	f7ff febf 	bl	800cad0 <move_window>
 800cd52:	4603      	mov	r3, r0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d118      	bne.n	800cd8a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	009b      	lsls	r3, r3, #2
 800cd62:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cd66:	4413      	add	r3, r2
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f7ff fc55 	bl	800c618 <ld_dword>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cd74:	617b      	str	r3, [r7, #20]
			break;
 800cd76:	e009      	b.n	800cd8c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cd78:	2301      	movs	r3, #1
 800cd7a:	617b      	str	r3, [r7, #20]
 800cd7c:	e006      	b.n	800cd8c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd7e:	bf00      	nop
 800cd80:	e004      	b.n	800cd8c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd82:	bf00      	nop
 800cd84:	e002      	b.n	800cd8c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cd86:	bf00      	nop
 800cd88:	e000      	b.n	800cd8c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cd8a:	bf00      	nop
		}
	}

	return val;
 800cd8c:	697b      	ldr	r3, [r7, #20]
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3718      	adds	r7, #24
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}

0800cd96 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cd96:	b590      	push	{r4, r7, lr}
 800cd98:	b089      	sub	sp, #36	; 0x24
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	60f8      	str	r0, [r7, #12]
 800cd9e:	60b9      	str	r1, [r7, #8]
 800cda0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cda2:	2302      	movs	r3, #2
 800cda4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	f240 80d2 	bls.w	800cf52 <put_fat+0x1bc>
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	695b      	ldr	r3, [r3, #20]
 800cdb2:	68ba      	ldr	r2, [r7, #8]
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	f080 80cc 	bcs.w	800cf52 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	2b03      	cmp	r3, #3
 800cdc0:	f000 8096 	beq.w	800cef0 <put_fat+0x15a>
 800cdc4:	2b03      	cmp	r3, #3
 800cdc6:	f300 80cd 	bgt.w	800cf64 <put_fat+0x1ce>
 800cdca:	2b01      	cmp	r3, #1
 800cdcc:	d002      	beq.n	800cdd4 <put_fat+0x3e>
 800cdce:	2b02      	cmp	r3, #2
 800cdd0:	d06e      	beq.n	800ceb0 <put_fat+0x11a>
 800cdd2:	e0c7      	b.n	800cf64 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	61bb      	str	r3, [r7, #24]
 800cdd8:	69bb      	ldr	r3, [r7, #24]
 800cdda:	085b      	lsrs	r3, r3, #1
 800cddc:	69ba      	ldr	r2, [r7, #24]
 800cdde:	4413      	add	r3, r2
 800cde0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	6a1a      	ldr	r2, [r3, #32]
 800cde6:	69bb      	ldr	r3, [r7, #24]
 800cde8:	0a5b      	lsrs	r3, r3, #9
 800cdea:	4413      	add	r3, r2
 800cdec:	4619      	mov	r1, r3
 800cdee:	68f8      	ldr	r0, [r7, #12]
 800cdf0:	f7ff fe6e 	bl	800cad0 <move_window>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cdf8:	7ffb      	ldrb	r3, [r7, #31]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	f040 80ab 	bne.w	800cf56 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ce06:	69bb      	ldr	r3, [r7, #24]
 800ce08:	1c59      	adds	r1, r3, #1
 800ce0a:	61b9      	str	r1, [r7, #24]
 800ce0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce10:	4413      	add	r3, r2
 800ce12:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	f003 0301 	and.w	r3, r3, #1
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00d      	beq.n	800ce3a <put_fat+0xa4>
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	b25b      	sxtb	r3, r3
 800ce24:	f003 030f 	and.w	r3, r3, #15
 800ce28:	b25a      	sxtb	r2, r3
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	b2db      	uxtb	r3, r3
 800ce2e:	011b      	lsls	r3, r3, #4
 800ce30:	b25b      	sxtb	r3, r3
 800ce32:	4313      	orrs	r3, r2
 800ce34:	b25b      	sxtb	r3, r3
 800ce36:	b2db      	uxtb	r3, r3
 800ce38:	e001      	b.n	800ce3e <put_fat+0xa8>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	b2db      	uxtb	r3, r3
 800ce3e:	697a      	ldr	r2, [r7, #20]
 800ce40:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2201      	movs	r2, #1
 800ce46:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	6a1a      	ldr	r2, [r3, #32]
 800ce4c:	69bb      	ldr	r3, [r7, #24]
 800ce4e:	0a5b      	lsrs	r3, r3, #9
 800ce50:	4413      	add	r3, r2
 800ce52:	4619      	mov	r1, r3
 800ce54:	68f8      	ldr	r0, [r7, #12]
 800ce56:	f7ff fe3b 	bl	800cad0 <move_window>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ce5e:	7ffb      	ldrb	r3, [r7, #31]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d17a      	bne.n	800cf5a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ce6a:	69bb      	ldr	r3, [r7, #24]
 800ce6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce70:	4413      	add	r3, r2
 800ce72:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	f003 0301 	and.w	r3, r3, #1
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d003      	beq.n	800ce86 <put_fat+0xf0>
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	091b      	lsrs	r3, r3, #4
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	e00e      	b.n	800cea4 <put_fat+0x10e>
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	b25b      	sxtb	r3, r3
 800ce8c:	f023 030f 	bic.w	r3, r3, #15
 800ce90:	b25a      	sxtb	r2, r3
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	0a1b      	lsrs	r3, r3, #8
 800ce96:	b25b      	sxtb	r3, r3
 800ce98:	f003 030f 	and.w	r3, r3, #15
 800ce9c:	b25b      	sxtb	r3, r3
 800ce9e:	4313      	orrs	r3, r2
 800cea0:	b25b      	sxtb	r3, r3
 800cea2:	b2db      	uxtb	r3, r3
 800cea4:	697a      	ldr	r2, [r7, #20]
 800cea6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2201      	movs	r2, #1
 800ceac:	70da      	strb	r2, [r3, #3]
			break;
 800ceae:	e059      	b.n	800cf64 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	6a1a      	ldr	r2, [r3, #32]
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	0a1b      	lsrs	r3, r3, #8
 800ceb8:	4413      	add	r3, r2
 800ceba:	4619      	mov	r1, r3
 800cebc:	68f8      	ldr	r0, [r7, #12]
 800cebe:	f7ff fe07 	bl	800cad0 <move_window>
 800cec2:	4603      	mov	r3, r0
 800cec4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cec6:	7ffb      	ldrb	r3, [r7, #31]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d148      	bne.n	800cf5e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	005b      	lsls	r3, r3, #1
 800ced6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ceda:	4413      	add	r3, r2
 800cedc:	687a      	ldr	r2, [r7, #4]
 800cede:	b292      	uxth	r2, r2
 800cee0:	4611      	mov	r1, r2
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7ff fbbb 	bl	800c65e <st_word>
			fs->wflag = 1;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	2201      	movs	r2, #1
 800ceec:	70da      	strb	r2, [r3, #3]
			break;
 800ceee:	e039      	b.n	800cf64 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	6a1a      	ldr	r2, [r3, #32]
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	09db      	lsrs	r3, r3, #7
 800cef8:	4413      	add	r3, r2
 800cefa:	4619      	mov	r1, r3
 800cefc:	68f8      	ldr	r0, [r7, #12]
 800cefe:	f7ff fde7 	bl	800cad0 <move_window>
 800cf02:	4603      	mov	r3, r0
 800cf04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cf06:	7ffb      	ldrb	r3, [r7, #31]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d12a      	bne.n	800cf62 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	009b      	lsls	r3, r3, #2
 800cf1c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cf20:	4413      	add	r3, r2
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7ff fb78 	bl	800c618 <ld_dword>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cf2e:	4323      	orrs	r3, r4
 800cf30:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	009b      	lsls	r3, r3, #2
 800cf3c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cf40:	4413      	add	r3, r2
 800cf42:	6879      	ldr	r1, [r7, #4]
 800cf44:	4618      	mov	r0, r3
 800cf46:	f7ff fba5 	bl	800c694 <st_dword>
			fs->wflag = 1;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	70da      	strb	r2, [r3, #3]
			break;
 800cf50:	e008      	b.n	800cf64 <put_fat+0x1ce>
		}
	}
 800cf52:	bf00      	nop
 800cf54:	e006      	b.n	800cf64 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cf56:	bf00      	nop
 800cf58:	e004      	b.n	800cf64 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cf5a:	bf00      	nop
 800cf5c:	e002      	b.n	800cf64 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cf5e:	bf00      	nop
 800cf60:	e000      	b.n	800cf64 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cf62:	bf00      	nop
	return res;
 800cf64:	7ffb      	ldrb	r3, [r7, #31]
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3724      	adds	r7, #36	; 0x24
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd90      	pop	{r4, r7, pc}

0800cf6e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cf6e:	b580      	push	{r7, lr}
 800cf70:	b088      	sub	sp, #32
 800cf72:	af00      	add	r7, sp, #0
 800cf74:	60f8      	str	r0, [r7, #12]
 800cf76:	60b9      	str	r1, [r7, #8]
 800cf78:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	2b01      	cmp	r3, #1
 800cf88:	d904      	bls.n	800cf94 <remove_chain+0x26>
 800cf8a:	69bb      	ldr	r3, [r7, #24]
 800cf8c:	695b      	ldr	r3, [r3, #20]
 800cf8e:	68ba      	ldr	r2, [r7, #8]
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d301      	bcc.n	800cf98 <remove_chain+0x2a>
 800cf94:	2302      	movs	r3, #2
 800cf96:	e04b      	b.n	800d030 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d00c      	beq.n	800cfb8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cf9e:	f04f 32ff 	mov.w	r2, #4294967295
 800cfa2:	6879      	ldr	r1, [r7, #4]
 800cfa4:	69b8      	ldr	r0, [r7, #24]
 800cfa6:	f7ff fef6 	bl	800cd96 <put_fat>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cfae:	7ffb      	ldrb	r3, [r7, #31]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d001      	beq.n	800cfb8 <remove_chain+0x4a>
 800cfb4:	7ffb      	ldrb	r3, [r7, #31]
 800cfb6:	e03b      	b.n	800d030 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cfb8:	68b9      	ldr	r1, [r7, #8]
 800cfba:	68f8      	ldr	r0, [r7, #12]
 800cfbc:	f7ff fe43 	bl	800cc46 <get_fat>
 800cfc0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d031      	beq.n	800d02c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	2b01      	cmp	r3, #1
 800cfcc:	d101      	bne.n	800cfd2 <remove_chain+0x64>
 800cfce:	2302      	movs	r3, #2
 800cfd0:	e02e      	b.n	800d030 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfd8:	d101      	bne.n	800cfde <remove_chain+0x70>
 800cfda:	2301      	movs	r3, #1
 800cfdc:	e028      	b.n	800d030 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cfde:	2200      	movs	r2, #0
 800cfe0:	68b9      	ldr	r1, [r7, #8]
 800cfe2:	69b8      	ldr	r0, [r7, #24]
 800cfe4:	f7ff fed7 	bl	800cd96 <put_fat>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cfec:	7ffb      	ldrb	r3, [r7, #31]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d001      	beq.n	800cff6 <remove_chain+0x88>
 800cff2:	7ffb      	ldrb	r3, [r7, #31]
 800cff4:	e01c      	b.n	800d030 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cff6:	69bb      	ldr	r3, [r7, #24]
 800cff8:	691a      	ldr	r2, [r3, #16]
 800cffa:	69bb      	ldr	r3, [r7, #24]
 800cffc:	695b      	ldr	r3, [r3, #20]
 800cffe:	3b02      	subs	r3, #2
 800d000:	429a      	cmp	r2, r3
 800d002:	d20b      	bcs.n	800d01c <remove_chain+0xae>
			fs->free_clst++;
 800d004:	69bb      	ldr	r3, [r7, #24]
 800d006:	691b      	ldr	r3, [r3, #16]
 800d008:	1c5a      	adds	r2, r3, #1
 800d00a:	69bb      	ldr	r3, [r7, #24]
 800d00c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d00e:	69bb      	ldr	r3, [r7, #24]
 800d010:	791b      	ldrb	r3, [r3, #4]
 800d012:	f043 0301 	orr.w	r3, r3, #1
 800d016:	b2da      	uxtb	r2, r3
 800d018:	69bb      	ldr	r3, [r7, #24]
 800d01a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d020:	69bb      	ldr	r3, [r7, #24]
 800d022:	695b      	ldr	r3, [r3, #20]
 800d024:	68ba      	ldr	r2, [r7, #8]
 800d026:	429a      	cmp	r2, r3
 800d028:	d3c6      	bcc.n	800cfb8 <remove_chain+0x4a>
 800d02a:	e000      	b.n	800d02e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d02c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d02e:	2300      	movs	r3, #0
}
 800d030:	4618      	mov	r0, r3
 800d032:	3720      	adds	r7, #32
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b088      	sub	sp, #32
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
 800d040:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d10d      	bne.n	800d06a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	68db      	ldr	r3, [r3, #12]
 800d052:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d054:	69bb      	ldr	r3, [r7, #24]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d004      	beq.n	800d064 <create_chain+0x2c>
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	695b      	ldr	r3, [r3, #20]
 800d05e:	69ba      	ldr	r2, [r7, #24]
 800d060:	429a      	cmp	r2, r3
 800d062:	d31b      	bcc.n	800d09c <create_chain+0x64>
 800d064:	2301      	movs	r3, #1
 800d066:	61bb      	str	r3, [r7, #24]
 800d068:	e018      	b.n	800d09c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d06a:	6839      	ldr	r1, [r7, #0]
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f7ff fdea 	bl	800cc46 <get_fat>
 800d072:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	2b01      	cmp	r3, #1
 800d078:	d801      	bhi.n	800d07e <create_chain+0x46>
 800d07a:	2301      	movs	r3, #1
 800d07c:	e070      	b.n	800d160 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d084:	d101      	bne.n	800d08a <create_chain+0x52>
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	e06a      	b.n	800d160 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	695b      	ldr	r3, [r3, #20]
 800d08e:	68fa      	ldr	r2, [r7, #12]
 800d090:	429a      	cmp	r2, r3
 800d092:	d201      	bcs.n	800d098 <create_chain+0x60>
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	e063      	b.n	800d160 <create_chain+0x128>
		scl = clst;
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d0a0:	69fb      	ldr	r3, [r7, #28]
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	695b      	ldr	r3, [r3, #20]
 800d0aa:	69fa      	ldr	r2, [r7, #28]
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d307      	bcc.n	800d0c0 <create_chain+0x88>
				ncl = 2;
 800d0b0:	2302      	movs	r3, #2
 800d0b2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d0b4:	69fa      	ldr	r2, [r7, #28]
 800d0b6:	69bb      	ldr	r3, [r7, #24]
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d901      	bls.n	800d0c0 <create_chain+0x88>
 800d0bc:	2300      	movs	r3, #0
 800d0be:	e04f      	b.n	800d160 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d0c0:	69f9      	ldr	r1, [r7, #28]
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f7ff fdbf 	bl	800cc46 <get_fat>
 800d0c8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d00e      	beq.n	800d0ee <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2b01      	cmp	r3, #1
 800d0d4:	d003      	beq.n	800d0de <create_chain+0xa6>
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0dc:	d101      	bne.n	800d0e2 <create_chain+0xaa>
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	e03e      	b.n	800d160 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d0e2:	69fa      	ldr	r2, [r7, #28]
 800d0e4:	69bb      	ldr	r3, [r7, #24]
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d1da      	bne.n	800d0a0 <create_chain+0x68>
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	e038      	b.n	800d160 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d0ee:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d0f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d0f4:	69f9      	ldr	r1, [r7, #28]
 800d0f6:	6938      	ldr	r0, [r7, #16]
 800d0f8:	f7ff fe4d 	bl	800cd96 <put_fat>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d100:	7dfb      	ldrb	r3, [r7, #23]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d109      	bne.n	800d11a <create_chain+0xe2>
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d006      	beq.n	800d11a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d10c:	69fa      	ldr	r2, [r7, #28]
 800d10e:	6839      	ldr	r1, [r7, #0]
 800d110:	6938      	ldr	r0, [r7, #16]
 800d112:	f7ff fe40 	bl	800cd96 <put_fat>
 800d116:	4603      	mov	r3, r0
 800d118:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d11a:	7dfb      	ldrb	r3, [r7, #23]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d116      	bne.n	800d14e <create_chain+0x116>
		fs->last_clst = ncl;
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	69fa      	ldr	r2, [r7, #28]
 800d124:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	691a      	ldr	r2, [r3, #16]
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	695b      	ldr	r3, [r3, #20]
 800d12e:	3b02      	subs	r3, #2
 800d130:	429a      	cmp	r2, r3
 800d132:	d804      	bhi.n	800d13e <create_chain+0x106>
 800d134:	693b      	ldr	r3, [r7, #16]
 800d136:	691b      	ldr	r3, [r3, #16]
 800d138:	1e5a      	subs	r2, r3, #1
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	791b      	ldrb	r3, [r3, #4]
 800d142:	f043 0301 	orr.w	r3, r3, #1
 800d146:	b2da      	uxtb	r2, r3
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	711a      	strb	r2, [r3, #4]
 800d14c:	e007      	b.n	800d15e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d14e:	7dfb      	ldrb	r3, [r7, #23]
 800d150:	2b01      	cmp	r3, #1
 800d152:	d102      	bne.n	800d15a <create_chain+0x122>
 800d154:	f04f 33ff 	mov.w	r3, #4294967295
 800d158:	e000      	b.n	800d15c <create_chain+0x124>
 800d15a:	2301      	movs	r3, #1
 800d15c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d15e:	69fb      	ldr	r3, [r7, #28]
}
 800d160:	4618      	mov	r0, r3
 800d162:	3720      	adds	r7, #32
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d168:	b480      	push	{r7}
 800d16a:	b087      	sub	sp, #28
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d17c:	3304      	adds	r3, #4
 800d17e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	0a5b      	lsrs	r3, r3, #9
 800d184:	68fa      	ldr	r2, [r7, #12]
 800d186:	8952      	ldrh	r2, [r2, #10]
 800d188:	fbb3 f3f2 	udiv	r3, r3, r2
 800d18c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	1d1a      	adds	r2, r3, #4
 800d192:	613a      	str	r2, [r7, #16]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d101      	bne.n	800d1a2 <clmt_clust+0x3a>
 800d19e:	2300      	movs	r3, #0
 800d1a0:	e010      	b.n	800d1c4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d1a2:	697a      	ldr	r2, [r7, #20]
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d307      	bcc.n	800d1ba <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d1aa:	697a      	ldr	r2, [r7, #20]
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	1ad3      	subs	r3, r2, r3
 800d1b0:	617b      	str	r3, [r7, #20]
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	3304      	adds	r3, #4
 800d1b6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d1b8:	e7e9      	b.n	800d18e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d1ba:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	681a      	ldr	r2, [r3, #0]
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	4413      	add	r3, r2
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	371c      	adds	r7, #28
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr

0800d1d0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b086      	sub	sp, #24
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d1e6:	d204      	bcs.n	800d1f2 <dir_sdi+0x22>
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	f003 031f 	and.w	r3, r3, #31
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d001      	beq.n	800d1f6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d1f2:	2302      	movs	r3, #2
 800d1f4:	e063      	b.n	800d2be <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	683a      	ldr	r2, [r7, #0]
 800d1fa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	689b      	ldr	r3, [r3, #8]
 800d200:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d106      	bne.n	800d216 <dir_sdi+0x46>
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	2b02      	cmp	r3, #2
 800d20e:	d902      	bls.n	800d216 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d214:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d10c      	bne.n	800d236 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	095b      	lsrs	r3, r3, #5
 800d220:	693a      	ldr	r2, [r7, #16]
 800d222:	8912      	ldrh	r2, [r2, #8]
 800d224:	4293      	cmp	r3, r2
 800d226:	d301      	bcc.n	800d22c <dir_sdi+0x5c>
 800d228:	2302      	movs	r3, #2
 800d22a:	e048      	b.n	800d2be <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	61da      	str	r2, [r3, #28]
 800d234:	e029      	b.n	800d28a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	895b      	ldrh	r3, [r3, #10]
 800d23a:	025b      	lsls	r3, r3, #9
 800d23c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d23e:	e019      	b.n	800d274 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	6979      	ldr	r1, [r7, #20]
 800d244:	4618      	mov	r0, r3
 800d246:	f7ff fcfe 	bl	800cc46 <get_fat>
 800d24a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d252:	d101      	bne.n	800d258 <dir_sdi+0x88>
 800d254:	2301      	movs	r3, #1
 800d256:	e032      	b.n	800d2be <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d904      	bls.n	800d268 <dir_sdi+0x98>
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	695b      	ldr	r3, [r3, #20]
 800d262:	697a      	ldr	r2, [r7, #20]
 800d264:	429a      	cmp	r2, r3
 800d266:	d301      	bcc.n	800d26c <dir_sdi+0x9c>
 800d268:	2302      	movs	r3, #2
 800d26a:	e028      	b.n	800d2be <dir_sdi+0xee>
			ofs -= csz;
 800d26c:	683a      	ldr	r2, [r7, #0]
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	1ad3      	subs	r3, r2, r3
 800d272:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d274:	683a      	ldr	r2, [r7, #0]
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	429a      	cmp	r2, r3
 800d27a:	d2e1      	bcs.n	800d240 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d27c:	6979      	ldr	r1, [r7, #20]
 800d27e:	6938      	ldr	r0, [r7, #16]
 800d280:	f7ff fcc2 	bl	800cc08 <clust2sect>
 800d284:	4602      	mov	r2, r0
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	697a      	ldr	r2, [r7, #20]
 800d28e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	69db      	ldr	r3, [r3, #28]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d101      	bne.n	800d29c <dir_sdi+0xcc>
 800d298:	2302      	movs	r3, #2
 800d29a:	e010      	b.n	800d2be <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	69da      	ldr	r2, [r3, #28]
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	0a5b      	lsrs	r3, r3, #9
 800d2a4:	441a      	add	r2, r3
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2b6:	441a      	add	r2, r3
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d2bc:	2300      	movs	r3, #0
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3718      	adds	r7, #24
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}

0800d2c6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d2c6:	b580      	push	{r7, lr}
 800d2c8:	b086      	sub	sp, #24
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	6078      	str	r0, [r7, #4]
 800d2ce:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	695b      	ldr	r3, [r3, #20]
 800d2da:	3320      	adds	r3, #32
 800d2dc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	69db      	ldr	r3, [r3, #28]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d003      	beq.n	800d2ee <dir_next+0x28>
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d2ec:	d301      	bcc.n	800d2f2 <dir_next+0x2c>
 800d2ee:	2304      	movs	r3, #4
 800d2f0:	e0aa      	b.n	800d448 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	f040 8098 	bne.w	800d42e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	69db      	ldr	r3, [r3, #28]
 800d302:	1c5a      	adds	r2, r3, #1
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	699b      	ldr	r3, [r3, #24]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d10b      	bne.n	800d328 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	095b      	lsrs	r3, r3, #5
 800d314:	68fa      	ldr	r2, [r7, #12]
 800d316:	8912      	ldrh	r2, [r2, #8]
 800d318:	4293      	cmp	r3, r2
 800d31a:	f0c0 8088 	bcc.w	800d42e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2200      	movs	r2, #0
 800d322:	61da      	str	r2, [r3, #28]
 800d324:	2304      	movs	r3, #4
 800d326:	e08f      	b.n	800d448 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	0a5b      	lsrs	r3, r3, #9
 800d32c:	68fa      	ldr	r2, [r7, #12]
 800d32e:	8952      	ldrh	r2, [r2, #10]
 800d330:	3a01      	subs	r2, #1
 800d332:	4013      	ands	r3, r2
 800d334:	2b00      	cmp	r3, #0
 800d336:	d17a      	bne.n	800d42e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d338:	687a      	ldr	r2, [r7, #4]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	699b      	ldr	r3, [r3, #24]
 800d33e:	4619      	mov	r1, r3
 800d340:	4610      	mov	r0, r2
 800d342:	f7ff fc80 	bl	800cc46 <get_fat>
 800d346:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	2b01      	cmp	r3, #1
 800d34c:	d801      	bhi.n	800d352 <dir_next+0x8c>
 800d34e:	2302      	movs	r3, #2
 800d350:	e07a      	b.n	800d448 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d358:	d101      	bne.n	800d35e <dir_next+0x98>
 800d35a:	2301      	movs	r3, #1
 800d35c:	e074      	b.n	800d448 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	695b      	ldr	r3, [r3, #20]
 800d362:	697a      	ldr	r2, [r7, #20]
 800d364:	429a      	cmp	r2, r3
 800d366:	d358      	bcc.n	800d41a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d104      	bne.n	800d378 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2200      	movs	r2, #0
 800d372:	61da      	str	r2, [r3, #28]
 800d374:	2304      	movs	r3, #4
 800d376:	e067      	b.n	800d448 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d378:	687a      	ldr	r2, [r7, #4]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	699b      	ldr	r3, [r3, #24]
 800d37e:	4619      	mov	r1, r3
 800d380:	4610      	mov	r0, r2
 800d382:	f7ff fe59 	bl	800d038 <create_chain>
 800d386:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d101      	bne.n	800d392 <dir_next+0xcc>
 800d38e:	2307      	movs	r3, #7
 800d390:	e05a      	b.n	800d448 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	2b01      	cmp	r3, #1
 800d396:	d101      	bne.n	800d39c <dir_next+0xd6>
 800d398:	2302      	movs	r3, #2
 800d39a:	e055      	b.n	800d448 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3a2:	d101      	bne.n	800d3a8 <dir_next+0xe2>
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	e04f      	b.n	800d448 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d3a8:	68f8      	ldr	r0, [r7, #12]
 800d3aa:	f7ff fb4d 	bl	800ca48 <sync_window>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d001      	beq.n	800d3b8 <dir_next+0xf2>
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	e047      	b.n	800d448 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	3330      	adds	r3, #48	; 0x30
 800d3bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3c0:	2100      	movs	r1, #0
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7ff f9b3 	bl	800c72e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	613b      	str	r3, [r7, #16]
 800d3cc:	6979      	ldr	r1, [r7, #20]
 800d3ce:	68f8      	ldr	r0, [r7, #12]
 800d3d0:	f7ff fc1a 	bl	800cc08 <clust2sect>
 800d3d4:	4602      	mov	r2, r0
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	62da      	str	r2, [r3, #44]	; 0x2c
 800d3da:	e012      	b.n	800d402 <dir_next+0x13c>
						fs->wflag = 1;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	2201      	movs	r2, #1
 800d3e0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d3e2:	68f8      	ldr	r0, [r7, #12]
 800d3e4:	f7ff fb30 	bl	800ca48 <sync_window>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d001      	beq.n	800d3f2 <dir_next+0x12c>
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e02a      	b.n	800d448 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	613b      	str	r3, [r7, #16]
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3fc:	1c5a      	adds	r2, r3, #1
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	62da      	str	r2, [r3, #44]	; 0x2c
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	895b      	ldrh	r3, [r3, #10]
 800d406:	461a      	mov	r2, r3
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d3e6      	bcc.n	800d3dc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	1ad2      	subs	r2, r2, r3
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	697a      	ldr	r2, [r7, #20]
 800d41e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d420:	6979      	ldr	r1, [r7, #20]
 800d422:	68f8      	ldr	r0, [r7, #12]
 800d424:	f7ff fbf0 	bl	800cc08 <clust2sect>
 800d428:	4602      	mov	r2, r0
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	68ba      	ldr	r2, [r7, #8]
 800d432:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d440:	441a      	add	r2, r3
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d446:	2300      	movs	r3, #0
}
 800d448:	4618      	mov	r0, r3
 800d44a:	3718      	adds	r7, #24
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}

0800d450 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b086      	sub	sp, #24
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
 800d458:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d460:	2100      	movs	r1, #0
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f7ff feb4 	bl	800d1d0 <dir_sdi>
 800d468:	4603      	mov	r3, r0
 800d46a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d46c:	7dfb      	ldrb	r3, [r7, #23]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d12b      	bne.n	800d4ca <dir_alloc+0x7a>
		n = 0;
 800d472:	2300      	movs	r3, #0
 800d474:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	69db      	ldr	r3, [r3, #28]
 800d47a:	4619      	mov	r1, r3
 800d47c:	68f8      	ldr	r0, [r7, #12]
 800d47e:	f7ff fb27 	bl	800cad0 <move_window>
 800d482:	4603      	mov	r3, r0
 800d484:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d486:	7dfb      	ldrb	r3, [r7, #23]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d11d      	bne.n	800d4c8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6a1b      	ldr	r3, [r3, #32]
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	2be5      	cmp	r3, #229	; 0xe5
 800d494:	d004      	beq.n	800d4a0 <dir_alloc+0x50>
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6a1b      	ldr	r3, [r3, #32]
 800d49a:	781b      	ldrb	r3, [r3, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d107      	bne.n	800d4b0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	613b      	str	r3, [r7, #16]
 800d4a6:	693a      	ldr	r2, [r7, #16]
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d102      	bne.n	800d4b4 <dir_alloc+0x64>
 800d4ae:	e00c      	b.n	800d4ca <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d4b4:	2101      	movs	r1, #1
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f7ff ff05 	bl	800d2c6 <dir_next>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d4c0:	7dfb      	ldrb	r3, [r7, #23]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d0d7      	beq.n	800d476 <dir_alloc+0x26>
 800d4c6:	e000      	b.n	800d4ca <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d4c8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d4ca:	7dfb      	ldrb	r3, [r7, #23]
 800d4cc:	2b04      	cmp	r3, #4
 800d4ce:	d101      	bne.n	800d4d4 <dir_alloc+0x84>
 800d4d0:	2307      	movs	r3, #7
 800d4d2:	75fb      	strb	r3, [r7, #23]
	return res;
 800d4d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3718      	adds	r7, #24
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}

0800d4de <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d4de:	b580      	push	{r7, lr}
 800d4e0:	b084      	sub	sp, #16
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	6078      	str	r0, [r7, #4]
 800d4e6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	331a      	adds	r3, #26
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7ff f87b 	bl	800c5e8 <ld_word>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	2b03      	cmp	r3, #3
 800d4fc:	d109      	bne.n	800d512 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	3314      	adds	r3, #20
 800d502:	4618      	mov	r0, r3
 800d504:	f7ff f870 	bl	800c5e8 <ld_word>
 800d508:	4603      	mov	r3, r0
 800d50a:	041b      	lsls	r3, r3, #16
 800d50c:	68fa      	ldr	r2, [r7, #12]
 800d50e:	4313      	orrs	r3, r2
 800d510:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d512:	68fb      	ldr	r3, [r7, #12]
}
 800d514:	4618      	mov	r0, r3
 800d516:	3710      	adds	r7, #16
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	60f8      	str	r0, [r7, #12]
 800d524:	60b9      	str	r1, [r7, #8]
 800d526:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	331a      	adds	r3, #26
 800d52c:	687a      	ldr	r2, [r7, #4]
 800d52e:	b292      	uxth	r2, r2
 800d530:	4611      	mov	r1, r2
 800d532:	4618      	mov	r0, r3
 800d534:	f7ff f893 	bl	800c65e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	2b03      	cmp	r3, #3
 800d53e:	d109      	bne.n	800d554 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	f103 0214 	add.w	r2, r3, #20
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	0c1b      	lsrs	r3, r3, #16
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	4619      	mov	r1, r3
 800d54e:	4610      	mov	r0, r2
 800d550:	f7ff f885 	bl	800c65e <st_word>
	}
}
 800d554:	bf00      	nop
 800d556:	3710      	adds	r7, #16
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b086      	sub	sp, #24
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d56a:	2100      	movs	r1, #0
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f7ff fe2f 	bl	800d1d0 <dir_sdi>
 800d572:	4603      	mov	r3, r0
 800d574:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d576:	7dfb      	ldrb	r3, [r7, #23]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d001      	beq.n	800d580 <dir_find+0x24>
 800d57c:	7dfb      	ldrb	r3, [r7, #23]
 800d57e:	e03e      	b.n	800d5fe <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	69db      	ldr	r3, [r3, #28]
 800d584:	4619      	mov	r1, r3
 800d586:	6938      	ldr	r0, [r7, #16]
 800d588:	f7ff faa2 	bl	800cad0 <move_window>
 800d58c:	4603      	mov	r3, r0
 800d58e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d590:	7dfb      	ldrb	r3, [r7, #23]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d12f      	bne.n	800d5f6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6a1b      	ldr	r3, [r3, #32]
 800d59a:	781b      	ldrb	r3, [r3, #0]
 800d59c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d59e:	7bfb      	ldrb	r3, [r7, #15]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d102      	bne.n	800d5aa <dir_find+0x4e>
 800d5a4:	2304      	movs	r3, #4
 800d5a6:	75fb      	strb	r3, [r7, #23]
 800d5a8:	e028      	b.n	800d5fc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6a1b      	ldr	r3, [r3, #32]
 800d5ae:	330b      	adds	r3, #11
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d5b6:	b2da      	uxtb	r2, r3
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6a1b      	ldr	r3, [r3, #32]
 800d5c0:	330b      	adds	r3, #11
 800d5c2:	781b      	ldrb	r3, [r3, #0]
 800d5c4:	f003 0308 	and.w	r3, r3, #8
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d10a      	bne.n	800d5e2 <dir_find+0x86>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6a18      	ldr	r0, [r3, #32]
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	3324      	adds	r3, #36	; 0x24
 800d5d4:	220b      	movs	r2, #11
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	f7ff f8c4 	bl	800c764 <mem_cmp>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d00b      	beq.n	800d5fa <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d5e2:	2100      	movs	r1, #0
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f7ff fe6e 	bl	800d2c6 <dir_next>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d5ee:	7dfb      	ldrb	r3, [r7, #23]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d0c5      	beq.n	800d580 <dir_find+0x24>
 800d5f4:	e002      	b.n	800d5fc <dir_find+0xa0>
		if (res != FR_OK) break;
 800d5f6:	bf00      	nop
 800d5f8:	e000      	b.n	800d5fc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d5fa:	bf00      	nop

	return res;
 800d5fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3718      	adds	r7, #24
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}

0800d606 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d606:	b580      	push	{r7, lr}
 800d608:	b084      	sub	sp, #16
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d614:	2101      	movs	r1, #1
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f7ff ff1a 	bl	800d450 <dir_alloc>
 800d61c:	4603      	mov	r3, r0
 800d61e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d620:	7bfb      	ldrb	r3, [r7, #15]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d11c      	bne.n	800d660 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	69db      	ldr	r3, [r3, #28]
 800d62a:	4619      	mov	r1, r3
 800d62c:	68b8      	ldr	r0, [r7, #8]
 800d62e:	f7ff fa4f 	bl	800cad0 <move_window>
 800d632:	4603      	mov	r3, r0
 800d634:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d636:	7bfb      	ldrb	r3, [r7, #15]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d111      	bne.n	800d660 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6a1b      	ldr	r3, [r3, #32]
 800d640:	2220      	movs	r2, #32
 800d642:	2100      	movs	r1, #0
 800d644:	4618      	mov	r0, r3
 800d646:	f7ff f872 	bl	800c72e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6a18      	ldr	r0, [r3, #32]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	3324      	adds	r3, #36	; 0x24
 800d652:	220b      	movs	r2, #11
 800d654:	4619      	mov	r1, r3
 800d656:	f7ff f849 	bl	800c6ec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	2201      	movs	r2, #1
 800d65e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d660:	7bfb      	ldrb	r3, [r7, #15]
}
 800d662:	4618      	mov	r0, r3
 800d664:	3710      	adds	r7, #16
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}

0800d66a <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800d66a:	b580      	push	{r7, lr}
 800d66c:	b086      	sub	sp, #24
 800d66e:	af00      	add	r7, sp, #0
 800d670:	6078      	str	r0, [r7, #4]
 800d672:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	2200      	movs	r2, #0
 800d678:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	69db      	ldr	r3, [r3, #28]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d04e      	beq.n	800d720 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800d682:	2300      	movs	r3, #0
 800d684:	613b      	str	r3, [r7, #16]
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800d68a:	e021      	b.n	800d6d0 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6a1a      	ldr	r2, [r3, #32]
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	1c59      	adds	r1, r3, #1
 800d694:	6179      	str	r1, [r7, #20]
 800d696:	4413      	add	r3, r2
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800d69c:	7bfb      	ldrb	r3, [r7, #15]
 800d69e:	2b20      	cmp	r3, #32
 800d6a0:	d100      	bne.n	800d6a4 <get_fileinfo+0x3a>
 800d6a2:	e015      	b.n	800d6d0 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d6a4:	7bfb      	ldrb	r3, [r7, #15]
 800d6a6:	2b05      	cmp	r3, #5
 800d6a8:	d101      	bne.n	800d6ae <get_fileinfo+0x44>
 800d6aa:	23e5      	movs	r3, #229	; 0xe5
 800d6ac:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	2b09      	cmp	r3, #9
 800d6b2:	d106      	bne.n	800d6c2 <get_fileinfo+0x58>
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	1c5a      	adds	r2, r3, #1
 800d6b8:	613a      	str	r2, [r7, #16]
 800d6ba:	683a      	ldr	r2, [r7, #0]
 800d6bc:	4413      	add	r3, r2
 800d6be:	222e      	movs	r2, #46	; 0x2e
 800d6c0:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	1c5a      	adds	r2, r3, #1
 800d6c6:	613a      	str	r2, [r7, #16]
 800d6c8:	683a      	ldr	r2, [r7, #0]
 800d6ca:	4413      	add	r3, r2
 800d6cc:	7bfa      	ldrb	r2, [r7, #15]
 800d6ce:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	2b0a      	cmp	r3, #10
 800d6d4:	d9da      	bls.n	800d68c <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800d6d6:	683a      	ldr	r2, [r7, #0]
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	4413      	add	r3, r2
 800d6dc:	3309      	adds	r3, #9
 800d6de:	2200      	movs	r2, #0
 800d6e0:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6a1b      	ldr	r3, [r3, #32]
 800d6e6:	7ada      	ldrb	r2, [r3, #11]
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6a1b      	ldr	r3, [r3, #32]
 800d6f0:	331c      	adds	r3, #28
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f7fe ff90 	bl	800c618 <ld_dword>
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6a1b      	ldr	r3, [r3, #32]
 800d702:	3316      	adds	r3, #22
 800d704:	4618      	mov	r0, r3
 800d706:	f7fe ff87 	bl	800c618 <ld_dword>
 800d70a:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	b29a      	uxth	r2, r3
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	80da      	strh	r2, [r3, #6]
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	0c1b      	lsrs	r3, r3, #16
 800d718:	b29a      	uxth	r2, r3
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	809a      	strh	r2, [r3, #4]
 800d71e:	e000      	b.n	800d722 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d720:	bf00      	nop
}
 800d722:	3718      	adds	r7, #24
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}

0800d728 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b088      	sub	sp, #32
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	60fb      	str	r3, [r7, #12]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	3324      	adds	r3, #36	; 0x24
 800d73c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d73e:	220b      	movs	r2, #11
 800d740:	2120      	movs	r1, #32
 800d742:	68b8      	ldr	r0, [r7, #8]
 800d744:	f7fe fff3 	bl	800c72e <mem_set>
	si = i = 0; ni = 8;
 800d748:	2300      	movs	r3, #0
 800d74a:	613b      	str	r3, [r7, #16]
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	61fb      	str	r3, [r7, #28]
 800d750:	2308      	movs	r3, #8
 800d752:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d754:	69fb      	ldr	r3, [r7, #28]
 800d756:	1c5a      	adds	r2, r3, #1
 800d758:	61fa      	str	r2, [r7, #28]
 800d75a:	68fa      	ldr	r2, [r7, #12]
 800d75c:	4413      	add	r3, r2
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d762:	7efb      	ldrb	r3, [r7, #27]
 800d764:	2b20      	cmp	r3, #32
 800d766:	d94e      	bls.n	800d806 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d768:	7efb      	ldrb	r3, [r7, #27]
 800d76a:	2b2f      	cmp	r3, #47	; 0x2f
 800d76c:	d006      	beq.n	800d77c <create_name+0x54>
 800d76e:	7efb      	ldrb	r3, [r7, #27]
 800d770:	2b5c      	cmp	r3, #92	; 0x5c
 800d772:	d110      	bne.n	800d796 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d774:	e002      	b.n	800d77c <create_name+0x54>
 800d776:	69fb      	ldr	r3, [r7, #28]
 800d778:	3301      	adds	r3, #1
 800d77a:	61fb      	str	r3, [r7, #28]
 800d77c:	68fa      	ldr	r2, [r7, #12]
 800d77e:	69fb      	ldr	r3, [r7, #28]
 800d780:	4413      	add	r3, r2
 800d782:	781b      	ldrb	r3, [r3, #0]
 800d784:	2b2f      	cmp	r3, #47	; 0x2f
 800d786:	d0f6      	beq.n	800d776 <create_name+0x4e>
 800d788:	68fa      	ldr	r2, [r7, #12]
 800d78a:	69fb      	ldr	r3, [r7, #28]
 800d78c:	4413      	add	r3, r2
 800d78e:	781b      	ldrb	r3, [r3, #0]
 800d790:	2b5c      	cmp	r3, #92	; 0x5c
 800d792:	d0f0      	beq.n	800d776 <create_name+0x4e>
			break;
 800d794:	e038      	b.n	800d808 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d796:	7efb      	ldrb	r3, [r7, #27]
 800d798:	2b2e      	cmp	r3, #46	; 0x2e
 800d79a:	d003      	beq.n	800d7a4 <create_name+0x7c>
 800d79c:	693a      	ldr	r2, [r7, #16]
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d30c      	bcc.n	800d7be <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	2b0b      	cmp	r3, #11
 800d7a8:	d002      	beq.n	800d7b0 <create_name+0x88>
 800d7aa:	7efb      	ldrb	r3, [r7, #27]
 800d7ac:	2b2e      	cmp	r3, #46	; 0x2e
 800d7ae:	d001      	beq.n	800d7b4 <create_name+0x8c>
 800d7b0:	2306      	movs	r3, #6
 800d7b2:	e044      	b.n	800d83e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d7b4:	2308      	movs	r3, #8
 800d7b6:	613b      	str	r3, [r7, #16]
 800d7b8:	230b      	movs	r3, #11
 800d7ba:	617b      	str	r3, [r7, #20]
			continue;
 800d7bc:	e022      	b.n	800d804 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d7be:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	da04      	bge.n	800d7d0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d7c6:	7efb      	ldrb	r3, [r7, #27]
 800d7c8:	3b80      	subs	r3, #128	; 0x80
 800d7ca:	4a1f      	ldr	r2, [pc, #124]	; (800d848 <create_name+0x120>)
 800d7cc:	5cd3      	ldrb	r3, [r2, r3]
 800d7ce:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d7d0:	7efb      	ldrb	r3, [r7, #27]
 800d7d2:	4619      	mov	r1, r3
 800d7d4:	481d      	ldr	r0, [pc, #116]	; (800d84c <create_name+0x124>)
 800d7d6:	f7fe ffec 	bl	800c7b2 <chk_chr>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d001      	beq.n	800d7e4 <create_name+0xbc>
 800d7e0:	2306      	movs	r3, #6
 800d7e2:	e02c      	b.n	800d83e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d7e4:	7efb      	ldrb	r3, [r7, #27]
 800d7e6:	2b60      	cmp	r3, #96	; 0x60
 800d7e8:	d905      	bls.n	800d7f6 <create_name+0xce>
 800d7ea:	7efb      	ldrb	r3, [r7, #27]
 800d7ec:	2b7a      	cmp	r3, #122	; 0x7a
 800d7ee:	d802      	bhi.n	800d7f6 <create_name+0xce>
 800d7f0:	7efb      	ldrb	r3, [r7, #27]
 800d7f2:	3b20      	subs	r3, #32
 800d7f4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	1c5a      	adds	r2, r3, #1
 800d7fa:	613a      	str	r2, [r7, #16]
 800d7fc:	68ba      	ldr	r2, [r7, #8]
 800d7fe:	4413      	add	r3, r2
 800d800:	7efa      	ldrb	r2, [r7, #27]
 800d802:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d804:	e7a6      	b.n	800d754 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d806:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d808:	68fa      	ldr	r2, [r7, #12]
 800d80a:	69fb      	ldr	r3, [r7, #28]
 800d80c:	441a      	add	r2, r3
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d101      	bne.n	800d81c <create_name+0xf4>
 800d818:	2306      	movs	r3, #6
 800d81a:	e010      	b.n	800d83e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	2be5      	cmp	r3, #229	; 0xe5
 800d822:	d102      	bne.n	800d82a <create_name+0x102>
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	2205      	movs	r2, #5
 800d828:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d82a:	7efb      	ldrb	r3, [r7, #27]
 800d82c:	2b20      	cmp	r3, #32
 800d82e:	d801      	bhi.n	800d834 <create_name+0x10c>
 800d830:	2204      	movs	r2, #4
 800d832:	e000      	b.n	800d836 <create_name+0x10e>
 800d834:	2200      	movs	r2, #0
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	330b      	adds	r3, #11
 800d83a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d83c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3720      	adds	r7, #32
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	08012bac 	.word	0x08012bac
 800d84c:	08012ae4 	.word	0x08012ae4

0800d850 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b086      	sub	sp, #24
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d864:	e002      	b.n	800d86c <follow_path+0x1c>
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	3301      	adds	r3, #1
 800d86a:	603b      	str	r3, [r7, #0]
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	2b2f      	cmp	r3, #47	; 0x2f
 800d872:	d0f8      	beq.n	800d866 <follow_path+0x16>
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	2b5c      	cmp	r3, #92	; 0x5c
 800d87a:	d0f4      	beq.n	800d866 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	2200      	movs	r2, #0
 800d880:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	2b1f      	cmp	r3, #31
 800d888:	d80a      	bhi.n	800d8a0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2280      	movs	r2, #128	; 0x80
 800d88e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d892:	2100      	movs	r1, #0
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f7ff fc9b 	bl	800d1d0 <dir_sdi>
 800d89a:	4603      	mov	r3, r0
 800d89c:	75fb      	strb	r3, [r7, #23]
 800d89e:	e043      	b.n	800d928 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d8a0:	463b      	mov	r3, r7
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f7ff ff3f 	bl	800d728 <create_name>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d8ae:	7dfb      	ldrb	r3, [r7, #23]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d134      	bne.n	800d91e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f7ff fe51 	bl	800d55c <dir_find>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d8c4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d8c6:	7dfb      	ldrb	r3, [r7, #23]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d00a      	beq.n	800d8e2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d8cc:	7dfb      	ldrb	r3, [r7, #23]
 800d8ce:	2b04      	cmp	r3, #4
 800d8d0:	d127      	bne.n	800d922 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d8d2:	7afb      	ldrb	r3, [r7, #11]
 800d8d4:	f003 0304 	and.w	r3, r3, #4
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d122      	bne.n	800d922 <follow_path+0xd2>
 800d8dc:	2305      	movs	r3, #5
 800d8de:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d8e0:	e01f      	b.n	800d922 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d8e2:	7afb      	ldrb	r3, [r7, #11]
 800d8e4:	f003 0304 	and.w	r3, r3, #4
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d11c      	bne.n	800d926 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	799b      	ldrb	r3, [r3, #6]
 800d8f0:	f003 0310 	and.w	r3, r3, #16
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d102      	bne.n	800d8fe <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d8f8:	2305      	movs	r3, #5
 800d8fa:	75fb      	strb	r3, [r7, #23]
 800d8fc:	e014      	b.n	800d928 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	695b      	ldr	r3, [r3, #20]
 800d908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d90c:	4413      	add	r3, r2
 800d90e:	4619      	mov	r1, r3
 800d910:	68f8      	ldr	r0, [r7, #12]
 800d912:	f7ff fde4 	bl	800d4de <ld_clust>
 800d916:	4602      	mov	r2, r0
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d91c:	e7c0      	b.n	800d8a0 <follow_path+0x50>
			if (res != FR_OK) break;
 800d91e:	bf00      	nop
 800d920:	e002      	b.n	800d928 <follow_path+0xd8>
				break;
 800d922:	bf00      	nop
 800d924:	e000      	b.n	800d928 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d926:	bf00      	nop
			}
		}
	}

	return res;
 800d928:	7dfb      	ldrb	r3, [r7, #23]
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3718      	adds	r7, #24
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}

0800d932 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d932:	b480      	push	{r7}
 800d934:	b087      	sub	sp, #28
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d93a:	f04f 33ff 	mov.w	r3, #4294967295
 800d93e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d031      	beq.n	800d9ac <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	617b      	str	r3, [r7, #20]
 800d94e:	e002      	b.n	800d956 <get_ldnumber+0x24>
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	3301      	adds	r3, #1
 800d954:	617b      	str	r3, [r7, #20]
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	2b20      	cmp	r3, #32
 800d95c:	d903      	bls.n	800d966 <get_ldnumber+0x34>
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	781b      	ldrb	r3, [r3, #0]
 800d962:	2b3a      	cmp	r3, #58	; 0x3a
 800d964:	d1f4      	bne.n	800d950 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	781b      	ldrb	r3, [r3, #0]
 800d96a:	2b3a      	cmp	r3, #58	; 0x3a
 800d96c:	d11c      	bne.n	800d9a8 <get_ldnumber+0x76>
			tp = *path;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	1c5a      	adds	r2, r3, #1
 800d978:	60fa      	str	r2, [r7, #12]
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	3b30      	subs	r3, #48	; 0x30
 800d97e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	2b09      	cmp	r3, #9
 800d984:	d80e      	bhi.n	800d9a4 <get_ldnumber+0x72>
 800d986:	68fa      	ldr	r2, [r7, #12]
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d10a      	bne.n	800d9a4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d107      	bne.n	800d9a4 <get_ldnumber+0x72>
					vol = (int)i;
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	3301      	adds	r3, #1
 800d99c:	617b      	str	r3, [r7, #20]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	697a      	ldr	r2, [r7, #20]
 800d9a2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	e002      	b.n	800d9ae <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d9ac:	693b      	ldr	r3, [r7, #16]
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	371c      	adds	r7, #28
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b8:	4770      	bx	lr
	...

0800d9bc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b082      	sub	sp, #8
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	70da      	strb	r2, [r3, #3]
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d9d2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d9d4:	6839      	ldr	r1, [r7, #0]
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f7ff f87a 	bl	800cad0 <move_window>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d001      	beq.n	800d9e6 <check_fs+0x2a>
 800d9e2:	2304      	movs	r3, #4
 800d9e4:	e038      	b.n	800da58 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	3330      	adds	r3, #48	; 0x30
 800d9ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7fe fdfa 	bl	800c5e8 <ld_word>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d001      	beq.n	800da04 <check_fs+0x48>
 800da00:	2303      	movs	r3, #3
 800da02:	e029      	b.n	800da58 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da0a:	2be9      	cmp	r3, #233	; 0xe9
 800da0c:	d009      	beq.n	800da22 <check_fs+0x66>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da14:	2beb      	cmp	r3, #235	; 0xeb
 800da16:	d11e      	bne.n	800da56 <check_fs+0x9a>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800da1e:	2b90      	cmp	r3, #144	; 0x90
 800da20:	d119      	bne.n	800da56 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	3330      	adds	r3, #48	; 0x30
 800da26:	3336      	adds	r3, #54	; 0x36
 800da28:	4618      	mov	r0, r3
 800da2a:	f7fe fdf5 	bl	800c618 <ld_dword>
 800da2e:	4603      	mov	r3, r0
 800da30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800da34:	4a0a      	ldr	r2, [pc, #40]	; (800da60 <check_fs+0xa4>)
 800da36:	4293      	cmp	r3, r2
 800da38:	d101      	bne.n	800da3e <check_fs+0x82>
 800da3a:	2300      	movs	r3, #0
 800da3c:	e00c      	b.n	800da58 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	3330      	adds	r3, #48	; 0x30
 800da42:	3352      	adds	r3, #82	; 0x52
 800da44:	4618      	mov	r0, r3
 800da46:	f7fe fde7 	bl	800c618 <ld_dword>
 800da4a:	4603      	mov	r3, r0
 800da4c:	4a05      	ldr	r2, [pc, #20]	; (800da64 <check_fs+0xa8>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	d101      	bne.n	800da56 <check_fs+0x9a>
 800da52:	2300      	movs	r3, #0
 800da54:	e000      	b.n	800da58 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800da56:	2302      	movs	r3, #2
}
 800da58:	4618      	mov	r0, r3
 800da5a:	3708      	adds	r7, #8
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}
 800da60:	00544146 	.word	0x00544146
 800da64:	33544146 	.word	0x33544146

0800da68 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b096      	sub	sp, #88	; 0x58
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	60f8      	str	r0, [r7, #12]
 800da70:	60b9      	str	r1, [r7, #8]
 800da72:	4613      	mov	r3, r2
 800da74:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	2200      	movs	r2, #0
 800da7a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f7ff ff58 	bl	800d932 <get_ldnumber>
 800da82:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800da84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da86:	2b00      	cmp	r3, #0
 800da88:	da01      	bge.n	800da8e <find_volume+0x26>
 800da8a:	230b      	movs	r3, #11
 800da8c:	e22e      	b.n	800deec <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800da8e:	4aa8      	ldr	r2, [pc, #672]	; (800dd30 <find_volume+0x2c8>)
 800da90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da96:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800da98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d101      	bne.n	800daa2 <find_volume+0x3a>
 800da9e:	230c      	movs	r3, #12
 800daa0:	e224      	b.n	800deec <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800daa6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800daa8:	79fb      	ldrb	r3, [r7, #7]
 800daaa:	f023 0301 	bic.w	r3, r3, #1
 800daae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab2:	781b      	ldrb	r3, [r3, #0]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d01a      	beq.n	800daee <find_volume+0x86>
		stat = disk_status(fs->drv);
 800dab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daba:	785b      	ldrb	r3, [r3, #1]
 800dabc:	4618      	mov	r0, r3
 800dabe:	f7fe fcf5 	bl	800c4ac <disk_status>
 800dac2:	4603      	mov	r3, r0
 800dac4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dac8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dacc:	f003 0301 	and.w	r3, r3, #1
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d10c      	bne.n	800daee <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dad4:	79fb      	ldrb	r3, [r7, #7]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d007      	beq.n	800daea <find_volume+0x82>
 800dada:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dade:	f003 0304 	and.w	r3, r3, #4
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d001      	beq.n	800daea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800dae6:	230a      	movs	r3, #10
 800dae8:	e200      	b.n	800deec <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800daea:	2300      	movs	r3, #0
 800daec:	e1fe      	b.n	800deec <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800daee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf0:	2200      	movs	r2, #0
 800daf2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800daf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daf6:	b2da      	uxtb	r2, r3
 800daf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dafa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dafe:	785b      	ldrb	r3, [r3, #1]
 800db00:	4618      	mov	r0, r3
 800db02:	f7fe fced 	bl	800c4e0 <disk_initialize>
 800db06:	4603      	mov	r3, r0
 800db08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800db0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800db10:	f003 0301 	and.w	r3, r3, #1
 800db14:	2b00      	cmp	r3, #0
 800db16:	d001      	beq.n	800db1c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800db18:	2303      	movs	r3, #3
 800db1a:	e1e7      	b.n	800deec <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800db1c:	79fb      	ldrb	r3, [r7, #7]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d007      	beq.n	800db32 <find_volume+0xca>
 800db22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800db26:	f003 0304 	and.w	r3, r3, #4
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d001      	beq.n	800db32 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800db2e:	230a      	movs	r3, #10
 800db30:	e1dc      	b.n	800deec <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800db32:	2300      	movs	r3, #0
 800db34:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800db36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800db38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800db3a:	f7ff ff3f 	bl	800d9bc <check_fs>
 800db3e:	4603      	mov	r3, r0
 800db40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800db44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800db48:	2b02      	cmp	r3, #2
 800db4a:	d14b      	bne.n	800dbe4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800db4c:	2300      	movs	r3, #0
 800db4e:	643b      	str	r3, [r7, #64]	; 0x40
 800db50:	e01f      	b.n	800db92 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800db52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800db58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db5a:	011b      	lsls	r3, r3, #4
 800db5c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800db60:	4413      	add	r3, r2
 800db62:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800db64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db66:	3304      	adds	r3, #4
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d006      	beq.n	800db7c <find_volume+0x114>
 800db6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db70:	3308      	adds	r3, #8
 800db72:	4618      	mov	r0, r3
 800db74:	f7fe fd50 	bl	800c618 <ld_dword>
 800db78:	4602      	mov	r2, r0
 800db7a:	e000      	b.n	800db7e <find_volume+0x116>
 800db7c:	2200      	movs	r2, #0
 800db7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db80:	009b      	lsls	r3, r3, #2
 800db82:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800db86:	440b      	add	r3, r1
 800db88:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800db8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db8e:	3301      	adds	r3, #1
 800db90:	643b      	str	r3, [r7, #64]	; 0x40
 800db92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db94:	2b03      	cmp	r3, #3
 800db96:	d9dc      	bls.n	800db52 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800db98:	2300      	movs	r3, #0
 800db9a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800db9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d002      	beq.n	800dba8 <find_volume+0x140>
 800dba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dba4:	3b01      	subs	r3, #1
 800dba6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800dba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbaa:	009b      	lsls	r3, r3, #2
 800dbac:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800dbb0:	4413      	add	r3, r2
 800dbb2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800dbb6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800dbb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d005      	beq.n	800dbca <find_volume+0x162>
 800dbbe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dbc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dbc2:	f7ff fefb 	bl	800d9bc <check_fs>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	e000      	b.n	800dbcc <find_volume+0x164>
 800dbca:	2303      	movs	r3, #3
 800dbcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800dbd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dbd4:	2b01      	cmp	r3, #1
 800dbd6:	d905      	bls.n	800dbe4 <find_volume+0x17c>
 800dbd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbda:	3301      	adds	r3, #1
 800dbdc:	643b      	str	r3, [r7, #64]	; 0x40
 800dbde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbe0:	2b03      	cmp	r3, #3
 800dbe2:	d9e1      	bls.n	800dba8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dbe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dbe8:	2b04      	cmp	r3, #4
 800dbea:	d101      	bne.n	800dbf0 <find_volume+0x188>
 800dbec:	2301      	movs	r3, #1
 800dbee:	e17d      	b.n	800deec <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800dbf0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	d901      	bls.n	800dbfc <find_volume+0x194>
 800dbf8:	230d      	movs	r3, #13
 800dbfa:	e177      	b.n	800deec <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbfe:	3330      	adds	r3, #48	; 0x30
 800dc00:	330b      	adds	r3, #11
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7fe fcf0 	bl	800c5e8 <ld_word>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc0e:	d001      	beq.n	800dc14 <find_volume+0x1ac>
 800dc10:	230d      	movs	r3, #13
 800dc12:	e16b      	b.n	800deec <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800dc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc16:	3330      	adds	r3, #48	; 0x30
 800dc18:	3316      	adds	r3, #22
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f7fe fce4 	bl	800c5e8 <ld_word>
 800dc20:	4603      	mov	r3, r0
 800dc22:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800dc24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d106      	bne.n	800dc38 <find_volume+0x1d0>
 800dc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc2c:	3330      	adds	r3, #48	; 0x30
 800dc2e:	3324      	adds	r3, #36	; 0x24
 800dc30:	4618      	mov	r0, r3
 800dc32:	f7fe fcf1 	bl	800c618 <ld_dword>
 800dc36:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800dc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc3c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800dc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc40:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800dc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc46:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800dc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc4a:	789b      	ldrb	r3, [r3, #2]
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d005      	beq.n	800dc5c <find_volume+0x1f4>
 800dc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc52:	789b      	ldrb	r3, [r3, #2]
 800dc54:	2b02      	cmp	r3, #2
 800dc56:	d001      	beq.n	800dc5c <find_volume+0x1f4>
 800dc58:	230d      	movs	r3, #13
 800dc5a:	e147      	b.n	800deec <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800dc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc5e:	789b      	ldrb	r3, [r3, #2]
 800dc60:	461a      	mov	r2, r3
 800dc62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc64:	fb02 f303 	mul.w	r3, r2, r3
 800dc68:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800dc6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc70:	b29a      	uxth	r2, r3
 800dc72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc74:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800dc76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc78:	895b      	ldrh	r3, [r3, #10]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d008      	beq.n	800dc90 <find_volume+0x228>
 800dc7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc80:	895b      	ldrh	r3, [r3, #10]
 800dc82:	461a      	mov	r2, r3
 800dc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc86:	895b      	ldrh	r3, [r3, #10]
 800dc88:	3b01      	subs	r3, #1
 800dc8a:	4013      	ands	r3, r2
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d001      	beq.n	800dc94 <find_volume+0x22c>
 800dc90:	230d      	movs	r3, #13
 800dc92:	e12b      	b.n	800deec <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800dc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc96:	3330      	adds	r3, #48	; 0x30
 800dc98:	3311      	adds	r3, #17
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f7fe fca4 	bl	800c5e8 <ld_word>
 800dca0:	4603      	mov	r3, r0
 800dca2:	461a      	mov	r2, r3
 800dca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcaa:	891b      	ldrh	r3, [r3, #8]
 800dcac:	f003 030f 	and.w	r3, r3, #15
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d001      	beq.n	800dcba <find_volume+0x252>
 800dcb6:	230d      	movs	r3, #13
 800dcb8:	e118      	b.n	800deec <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800dcba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcbc:	3330      	adds	r3, #48	; 0x30
 800dcbe:	3313      	adds	r3, #19
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7fe fc91 	bl	800c5e8 <ld_word>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800dcca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d106      	bne.n	800dcde <find_volume+0x276>
 800dcd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd2:	3330      	adds	r3, #48	; 0x30
 800dcd4:	3320      	adds	r3, #32
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7fe fc9e 	bl	800c618 <ld_dword>
 800dcdc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800dcde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dce0:	3330      	adds	r3, #48	; 0x30
 800dce2:	330e      	adds	r3, #14
 800dce4:	4618      	mov	r0, r3
 800dce6:	f7fe fc7f 	bl	800c5e8 <ld_word>
 800dcea:	4603      	mov	r3, r0
 800dcec:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800dcee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d101      	bne.n	800dcf8 <find_volume+0x290>
 800dcf4:	230d      	movs	r3, #13
 800dcf6:	e0f9      	b.n	800deec <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800dcf8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dcfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcfc:	4413      	add	r3, r2
 800dcfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd00:	8912      	ldrh	r2, [r2, #8]
 800dd02:	0912      	lsrs	r2, r2, #4
 800dd04:	b292      	uxth	r2, r2
 800dd06:	4413      	add	r3, r2
 800dd08:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800dd0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd0e:	429a      	cmp	r2, r3
 800dd10:	d201      	bcs.n	800dd16 <find_volume+0x2ae>
 800dd12:	230d      	movs	r3, #13
 800dd14:	e0ea      	b.n	800deec <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800dd16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd1a:	1ad3      	subs	r3, r2, r3
 800dd1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd1e:	8952      	ldrh	r2, [r2, #10]
 800dd20:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd24:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800dd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d103      	bne.n	800dd34 <find_volume+0x2cc>
 800dd2c:	230d      	movs	r3, #13
 800dd2e:	e0dd      	b.n	800deec <find_volume+0x484>
 800dd30:	20000b84 	.word	0x20000b84
		fmt = FS_FAT32;
 800dd34:	2303      	movs	r3, #3
 800dd36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800dd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd3c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800dd40:	4293      	cmp	r3, r2
 800dd42:	d802      	bhi.n	800dd4a <find_volume+0x2e2>
 800dd44:	2302      	movs	r3, #2
 800dd46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800dd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd4c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d802      	bhi.n	800dd5a <find_volume+0x2f2>
 800dd54:	2301      	movs	r3, #1
 800dd56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800dd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd5c:	1c9a      	adds	r2, r3, #2
 800dd5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd60:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800dd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dd66:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800dd68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dd6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd6c:	441a      	add	r2, r3
 800dd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd70:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800dd72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd76:	441a      	add	r2, r3
 800dd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd7a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800dd7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dd80:	2b03      	cmp	r3, #3
 800dd82:	d11e      	bne.n	800ddc2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800dd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd86:	3330      	adds	r3, #48	; 0x30
 800dd88:	332a      	adds	r3, #42	; 0x2a
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f7fe fc2c 	bl	800c5e8 <ld_word>
 800dd90:	4603      	mov	r3, r0
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d001      	beq.n	800dd9a <find_volume+0x332>
 800dd96:	230d      	movs	r3, #13
 800dd98:	e0a8      	b.n	800deec <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd9c:	891b      	ldrh	r3, [r3, #8]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d001      	beq.n	800dda6 <find_volume+0x33e>
 800dda2:	230d      	movs	r3, #13
 800dda4:	e0a2      	b.n	800deec <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800dda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda8:	3330      	adds	r3, #48	; 0x30
 800ddaa:	332c      	adds	r3, #44	; 0x2c
 800ddac:	4618      	mov	r0, r3
 800ddae:	f7fe fc33 	bl	800c618 <ld_dword>
 800ddb2:	4602      	mov	r2, r0
 800ddb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ddb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddba:	695b      	ldr	r3, [r3, #20]
 800ddbc:	009b      	lsls	r3, r3, #2
 800ddbe:	647b      	str	r3, [r7, #68]	; 0x44
 800ddc0:	e01f      	b.n	800de02 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ddc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddc4:	891b      	ldrh	r3, [r3, #8]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d101      	bne.n	800ddce <find_volume+0x366>
 800ddca:	230d      	movs	r3, #13
 800ddcc:	e08e      	b.n	800deec <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ddce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd0:	6a1a      	ldr	r2, [r3, #32]
 800ddd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddd4:	441a      	add	r2, r3
 800ddd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ddda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ddde:	2b02      	cmp	r3, #2
 800dde0:	d103      	bne.n	800ddea <find_volume+0x382>
 800dde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde4:	695b      	ldr	r3, [r3, #20]
 800dde6:	005b      	lsls	r3, r3, #1
 800dde8:	e00a      	b.n	800de00 <find_volume+0x398>
 800ddea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddec:	695a      	ldr	r2, [r3, #20]
 800ddee:	4613      	mov	r3, r2
 800ddf0:	005b      	lsls	r3, r3, #1
 800ddf2:	4413      	add	r3, r2
 800ddf4:	085a      	lsrs	r2, r3, #1
 800ddf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddf8:	695b      	ldr	r3, [r3, #20]
 800ddfa:	f003 0301 	and.w	r3, r3, #1
 800ddfe:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800de00:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800de02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de04:	699a      	ldr	r2, [r3, #24]
 800de06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de08:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800de0c:	0a5b      	lsrs	r3, r3, #9
 800de0e:	429a      	cmp	r2, r3
 800de10:	d201      	bcs.n	800de16 <find_volume+0x3ae>
 800de12:	230d      	movs	r3, #13
 800de14:	e06a      	b.n	800deec <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800de16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de18:	f04f 32ff 	mov.w	r2, #4294967295
 800de1c:	611a      	str	r2, [r3, #16]
 800de1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de20:	691a      	ldr	r2, [r3, #16]
 800de22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de24:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800de26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de28:	2280      	movs	r2, #128	; 0x80
 800de2a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800de2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de30:	2b03      	cmp	r3, #3
 800de32:	d149      	bne.n	800dec8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800de34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de36:	3330      	adds	r3, #48	; 0x30
 800de38:	3330      	adds	r3, #48	; 0x30
 800de3a:	4618      	mov	r0, r3
 800de3c:	f7fe fbd4 	bl	800c5e8 <ld_word>
 800de40:	4603      	mov	r3, r0
 800de42:	2b01      	cmp	r3, #1
 800de44:	d140      	bne.n	800dec8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800de46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de48:	3301      	adds	r3, #1
 800de4a:	4619      	mov	r1, r3
 800de4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800de4e:	f7fe fe3f 	bl	800cad0 <move_window>
 800de52:	4603      	mov	r3, r0
 800de54:	2b00      	cmp	r3, #0
 800de56:	d137      	bne.n	800dec8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800de58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de5a:	2200      	movs	r2, #0
 800de5c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800de5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de60:	3330      	adds	r3, #48	; 0x30
 800de62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800de66:	4618      	mov	r0, r3
 800de68:	f7fe fbbe 	bl	800c5e8 <ld_word>
 800de6c:	4603      	mov	r3, r0
 800de6e:	461a      	mov	r2, r3
 800de70:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800de74:	429a      	cmp	r2, r3
 800de76:	d127      	bne.n	800dec8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800de78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de7a:	3330      	adds	r3, #48	; 0x30
 800de7c:	4618      	mov	r0, r3
 800de7e:	f7fe fbcb 	bl	800c618 <ld_dword>
 800de82:	4603      	mov	r3, r0
 800de84:	4a1b      	ldr	r2, [pc, #108]	; (800def4 <find_volume+0x48c>)
 800de86:	4293      	cmp	r3, r2
 800de88:	d11e      	bne.n	800dec8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800de8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de8c:	3330      	adds	r3, #48	; 0x30
 800de8e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800de92:	4618      	mov	r0, r3
 800de94:	f7fe fbc0 	bl	800c618 <ld_dword>
 800de98:	4603      	mov	r3, r0
 800de9a:	4a17      	ldr	r2, [pc, #92]	; (800def8 <find_volume+0x490>)
 800de9c:	4293      	cmp	r3, r2
 800de9e:	d113      	bne.n	800dec8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800dea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dea2:	3330      	adds	r3, #48	; 0x30
 800dea4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800dea8:	4618      	mov	r0, r3
 800deaa:	f7fe fbb5 	bl	800c618 <ld_dword>
 800deae:	4602      	mov	r2, r0
 800deb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deb2:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800deb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deb6:	3330      	adds	r3, #48	; 0x30
 800deb8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800debc:	4618      	mov	r0, r3
 800debe:	f7fe fbab 	bl	800c618 <ld_dword>
 800dec2:	4602      	mov	r2, r0
 800dec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec6:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800dec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deca:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800dece:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ded0:	4b0a      	ldr	r3, [pc, #40]	; (800defc <find_volume+0x494>)
 800ded2:	881b      	ldrh	r3, [r3, #0]
 800ded4:	3301      	adds	r3, #1
 800ded6:	b29a      	uxth	r2, r3
 800ded8:	4b08      	ldr	r3, [pc, #32]	; (800defc <find_volume+0x494>)
 800deda:	801a      	strh	r2, [r3, #0]
 800dedc:	4b07      	ldr	r3, [pc, #28]	; (800defc <find_volume+0x494>)
 800dede:	881a      	ldrh	r2, [r3, #0]
 800dee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800dee4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dee6:	f7fe fd8b 	bl	800ca00 <clear_lock>
#endif
	return FR_OK;
 800deea:	2300      	movs	r3, #0
}
 800deec:	4618      	mov	r0, r3
 800deee:	3758      	adds	r7, #88	; 0x58
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}
 800def4:	41615252 	.word	0x41615252
 800def8:	61417272 	.word	0x61417272
 800defc:	20000b88 	.word	0x20000b88

0800df00 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b084      	sub	sp, #16
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800df0a:	2309      	movs	r3, #9
 800df0c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d01c      	beq.n	800df4e <validate+0x4e>
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d018      	beq.n	800df4e <validate+0x4e>
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d013      	beq.n	800df4e <validate+0x4e>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	889a      	ldrh	r2, [r3, #4]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	88db      	ldrh	r3, [r3, #6]
 800df30:	429a      	cmp	r2, r3
 800df32:	d10c      	bne.n	800df4e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	785b      	ldrb	r3, [r3, #1]
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7fe fab6 	bl	800c4ac <disk_status>
 800df40:	4603      	mov	r3, r0
 800df42:	f003 0301 	and.w	r3, r3, #1
 800df46:	2b00      	cmp	r3, #0
 800df48:	d101      	bne.n	800df4e <validate+0x4e>
			res = FR_OK;
 800df4a:	2300      	movs	r3, #0
 800df4c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800df4e:	7bfb      	ldrb	r3, [r7, #15]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d102      	bne.n	800df5a <validate+0x5a>
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	e000      	b.n	800df5c <validate+0x5c>
 800df5a:	2300      	movs	r3, #0
 800df5c:	683a      	ldr	r2, [r7, #0]
 800df5e:	6013      	str	r3, [r2, #0]
	return res;
 800df60:	7bfb      	ldrb	r3, [r7, #15]
}
 800df62:	4618      	mov	r0, r3
 800df64:	3710      	adds	r7, #16
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
	...

0800df6c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b088      	sub	sp, #32
 800df70:	af00      	add	r7, sp, #0
 800df72:	60f8      	str	r0, [r7, #12]
 800df74:	60b9      	str	r1, [r7, #8]
 800df76:	4613      	mov	r3, r2
 800df78:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800df7e:	f107 0310 	add.w	r3, r7, #16
 800df82:	4618      	mov	r0, r3
 800df84:	f7ff fcd5 	bl	800d932 <get_ldnumber>
 800df88:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800df8a:	69fb      	ldr	r3, [r7, #28]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	da01      	bge.n	800df94 <f_mount+0x28>
 800df90:	230b      	movs	r3, #11
 800df92:	e02b      	b.n	800dfec <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800df94:	4a17      	ldr	r2, [pc, #92]	; (800dff4 <f_mount+0x88>)
 800df96:	69fb      	ldr	r3, [r7, #28]
 800df98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df9c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800df9e:	69bb      	ldr	r3, [r7, #24]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d005      	beq.n	800dfb0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800dfa4:	69b8      	ldr	r0, [r7, #24]
 800dfa6:	f7fe fd2b 	bl	800ca00 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800dfaa:	69bb      	ldr	r3, [r7, #24]
 800dfac:	2200      	movs	r2, #0
 800dfae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d002      	beq.n	800dfbc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800dfbc:	68fa      	ldr	r2, [r7, #12]
 800dfbe:	490d      	ldr	r1, [pc, #52]	; (800dff4 <f_mount+0x88>)
 800dfc0:	69fb      	ldr	r3, [r7, #28]
 800dfc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d002      	beq.n	800dfd2 <f_mount+0x66>
 800dfcc:	79fb      	ldrb	r3, [r7, #7]
 800dfce:	2b01      	cmp	r3, #1
 800dfd0:	d001      	beq.n	800dfd6 <f_mount+0x6a>
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	e00a      	b.n	800dfec <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800dfd6:	f107 010c 	add.w	r1, r7, #12
 800dfda:	f107 0308 	add.w	r3, r7, #8
 800dfde:	2200      	movs	r2, #0
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f7ff fd41 	bl	800da68 <find_volume>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800dfea:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	3720      	adds	r7, #32
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}
 800dff4:	20000b84 	.word	0x20000b84

0800dff8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b098      	sub	sp, #96	; 0x60
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	60f8      	str	r0, [r7, #12]
 800e000:	60b9      	str	r1, [r7, #8]
 800e002:	4613      	mov	r3, r2
 800e004:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d101      	bne.n	800e010 <f_open+0x18>
 800e00c:	2309      	movs	r3, #9
 800e00e:	e1ad      	b.n	800e36c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e010:	79fb      	ldrb	r3, [r7, #7]
 800e012:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e016:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e018:	79fa      	ldrb	r2, [r7, #7]
 800e01a:	f107 0110 	add.w	r1, r7, #16
 800e01e:	f107 0308 	add.w	r3, r7, #8
 800e022:	4618      	mov	r0, r3
 800e024:	f7ff fd20 	bl	800da68 <find_volume>
 800e028:	4603      	mov	r3, r0
 800e02a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800e02e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e032:	2b00      	cmp	r3, #0
 800e034:	f040 8191 	bne.w	800e35a <f_open+0x362>
		dj.obj.fs = fs;
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e03c:	68ba      	ldr	r2, [r7, #8]
 800e03e:	f107 0314 	add.w	r3, r7, #20
 800e042:	4611      	mov	r1, r2
 800e044:	4618      	mov	r0, r3
 800e046:	f7ff fc03 	bl	800d850 <follow_path>
 800e04a:	4603      	mov	r3, r0
 800e04c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e050:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e054:	2b00      	cmp	r3, #0
 800e056:	d11a      	bne.n	800e08e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e058:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e05c:	b25b      	sxtb	r3, r3
 800e05e:	2b00      	cmp	r3, #0
 800e060:	da03      	bge.n	800e06a <f_open+0x72>
				res = FR_INVALID_NAME;
 800e062:	2306      	movs	r3, #6
 800e064:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e068:	e011      	b.n	800e08e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e06a:	79fb      	ldrb	r3, [r7, #7]
 800e06c:	f023 0301 	bic.w	r3, r3, #1
 800e070:	2b00      	cmp	r3, #0
 800e072:	bf14      	ite	ne
 800e074:	2301      	movne	r3, #1
 800e076:	2300      	moveq	r3, #0
 800e078:	b2db      	uxtb	r3, r3
 800e07a:	461a      	mov	r2, r3
 800e07c:	f107 0314 	add.w	r3, r7, #20
 800e080:	4611      	mov	r1, r2
 800e082:	4618      	mov	r0, r3
 800e084:	f7fe fbb0 	bl	800c7e8 <chk_lock>
 800e088:	4603      	mov	r3, r0
 800e08a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e08e:	79fb      	ldrb	r3, [r7, #7]
 800e090:	f003 031c 	and.w	r3, r3, #28
 800e094:	2b00      	cmp	r3, #0
 800e096:	d07f      	beq.n	800e198 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e098:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d017      	beq.n	800e0d0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e0a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0a4:	2b04      	cmp	r3, #4
 800e0a6:	d10e      	bne.n	800e0c6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e0a8:	f7fe fbfa 	bl	800c8a0 <enq_lock>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d006      	beq.n	800e0c0 <f_open+0xc8>
 800e0b2:	f107 0314 	add.w	r3, r7, #20
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7ff faa5 	bl	800d606 <dir_register>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	e000      	b.n	800e0c2 <f_open+0xca>
 800e0c0:	2312      	movs	r3, #18
 800e0c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e0c6:	79fb      	ldrb	r3, [r7, #7]
 800e0c8:	f043 0308 	orr.w	r3, r3, #8
 800e0cc:	71fb      	strb	r3, [r7, #7]
 800e0ce:	e010      	b.n	800e0f2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e0d0:	7ebb      	ldrb	r3, [r7, #26]
 800e0d2:	f003 0311 	and.w	r3, r3, #17
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d003      	beq.n	800e0e2 <f_open+0xea>
					res = FR_DENIED;
 800e0da:	2307      	movs	r3, #7
 800e0dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e0e0:	e007      	b.n	800e0f2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e0e2:	79fb      	ldrb	r3, [r7, #7]
 800e0e4:	f003 0304 	and.w	r3, r3, #4
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d002      	beq.n	800e0f2 <f_open+0xfa>
 800e0ec:	2308      	movs	r3, #8
 800e0ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e0f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d168      	bne.n	800e1cc <f_open+0x1d4>
 800e0fa:	79fb      	ldrb	r3, [r7, #7]
 800e0fc:	f003 0308 	and.w	r3, r3, #8
 800e100:	2b00      	cmp	r3, #0
 800e102:	d063      	beq.n	800e1cc <f_open+0x1d4>
				dw = GET_FATTIME();
 800e104:	f7fc fb22 	bl	800a74c <get_fattime>
 800e108:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e10c:	330e      	adds	r3, #14
 800e10e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e110:	4618      	mov	r0, r3
 800e112:	f7fe fabf 	bl	800c694 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e118:	3316      	adds	r3, #22
 800e11a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7fe fab9 	bl	800c694 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e124:	330b      	adds	r3, #11
 800e126:	2220      	movs	r2, #32
 800e128:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e12e:	4611      	mov	r1, r2
 800e130:	4618      	mov	r0, r3
 800e132:	f7ff f9d4 	bl	800d4de <ld_clust>
 800e136:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e13c:	2200      	movs	r2, #0
 800e13e:	4618      	mov	r0, r3
 800e140:	f7ff f9ec 	bl	800d51c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e146:	331c      	adds	r3, #28
 800e148:	2100      	movs	r1, #0
 800e14a:	4618      	mov	r0, r3
 800e14c:	f7fe faa2 	bl	800c694 <st_dword>
					fs->wflag = 1;
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	2201      	movs	r2, #1
 800e154:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d037      	beq.n	800e1cc <f_open+0x1d4>
						dw = fs->winsect;
 800e15c:	693b      	ldr	r3, [r7, #16]
 800e15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e160:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e162:	f107 0314 	add.w	r3, r7, #20
 800e166:	2200      	movs	r2, #0
 800e168:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7fe feff 	bl	800cf6e <remove_chain>
 800e170:	4603      	mov	r3, r0
 800e172:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800e176:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d126      	bne.n	800e1cc <f_open+0x1d4>
							res = move_window(fs, dw);
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e182:	4618      	mov	r0, r3
 800e184:	f7fe fca4 	bl	800cad0 <move_window>
 800e188:	4603      	mov	r3, r0
 800e18a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e192:	3a01      	subs	r2, #1
 800e194:	60da      	str	r2, [r3, #12]
 800e196:	e019      	b.n	800e1cc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e198:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d115      	bne.n	800e1cc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e1a0:	7ebb      	ldrb	r3, [r7, #26]
 800e1a2:	f003 0310 	and.w	r3, r3, #16
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d003      	beq.n	800e1b2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800e1aa:	2304      	movs	r3, #4
 800e1ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e1b0:	e00c      	b.n	800e1cc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e1b2:	79fb      	ldrb	r3, [r7, #7]
 800e1b4:	f003 0302 	and.w	r3, r3, #2
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d007      	beq.n	800e1cc <f_open+0x1d4>
 800e1bc:	7ebb      	ldrb	r3, [r7, #26]
 800e1be:	f003 0301 	and.w	r3, r3, #1
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d002      	beq.n	800e1cc <f_open+0x1d4>
						res = FR_DENIED;
 800e1c6:	2307      	movs	r3, #7
 800e1c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e1cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d128      	bne.n	800e226 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e1d4:	79fb      	ldrb	r3, [r7, #7]
 800e1d6:	f003 0308 	and.w	r3, r3, #8
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d003      	beq.n	800e1e6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e1de:	79fb      	ldrb	r3, [r7, #7]
 800e1e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1e4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e1ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e1f4:	79fb      	ldrb	r3, [r7, #7]
 800e1f6:	f023 0301 	bic.w	r3, r3, #1
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	bf14      	ite	ne
 800e1fe:	2301      	movne	r3, #1
 800e200:	2300      	moveq	r3, #0
 800e202:	b2db      	uxtb	r3, r3
 800e204:	461a      	mov	r2, r3
 800e206:	f107 0314 	add.w	r3, r7, #20
 800e20a:	4611      	mov	r1, r2
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7fe fb69 	bl	800c8e4 <inc_lock>
 800e212:	4602      	mov	r2, r0
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	691b      	ldr	r3, [r3, #16]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d102      	bne.n	800e226 <f_open+0x22e>
 800e220:	2302      	movs	r3, #2
 800e222:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e226:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	f040 8095 	bne.w	800e35a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e234:	4611      	mov	r1, r2
 800e236:	4618      	mov	r0, r3
 800e238:	f7ff f951 	bl	800d4de <ld_clust>
 800e23c:	4602      	mov	r2, r0
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e244:	331c      	adds	r3, #28
 800e246:	4618      	mov	r0, r3
 800e248:	f7fe f9e6 	bl	800c618 <ld_dword>
 800e24c:	4602      	mov	r2, r0
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	2200      	movs	r2, #0
 800e256:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e258:	693a      	ldr	r2, [r7, #16]
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e25e:	693b      	ldr	r3, [r7, #16]
 800e260:	88da      	ldrh	r2, [r3, #6]
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	79fa      	ldrb	r2, [r7, #7]
 800e26a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	2200      	movs	r2, #0
 800e270:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	2200      	movs	r2, #0
 800e276:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	2200      	movs	r2, #0
 800e27c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	3330      	adds	r3, #48	; 0x30
 800e282:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e286:	2100      	movs	r1, #0
 800e288:	4618      	mov	r0, r3
 800e28a:	f7fe fa50 	bl	800c72e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e28e:	79fb      	ldrb	r3, [r7, #7]
 800e290:	f003 0320 	and.w	r3, r3, #32
 800e294:	2b00      	cmp	r3, #0
 800e296:	d060      	beq.n	800e35a <f_open+0x362>
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	68db      	ldr	r3, [r3, #12]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d05c      	beq.n	800e35a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	68da      	ldr	r2, [r3, #12]
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	895b      	ldrh	r3, [r3, #10]
 800e2ac:	025b      	lsls	r3, r3, #9
 800e2ae:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	689b      	ldr	r3, [r3, #8]
 800e2b4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	68db      	ldr	r3, [r3, #12]
 800e2ba:	657b      	str	r3, [r7, #84]	; 0x54
 800e2bc:	e016      	b.n	800e2ec <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f7fe fcbf 	bl	800cc46 <get_fat>
 800e2c8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e2ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e2cc:	2b01      	cmp	r3, #1
 800e2ce:	d802      	bhi.n	800e2d6 <f_open+0x2de>
 800e2d0:	2302      	movs	r3, #2
 800e2d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e2d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e2d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2dc:	d102      	bne.n	800e2e4 <f_open+0x2ec>
 800e2de:	2301      	movs	r3, #1
 800e2e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e2e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e2e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2e8:	1ad3      	subs	r3, r2, r3
 800e2ea:	657b      	str	r3, [r7, #84]	; 0x54
 800e2ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d103      	bne.n	800e2fc <f_open+0x304>
 800e2f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e2f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d8e0      	bhi.n	800e2be <f_open+0x2c6>
				}
				fp->clust = clst;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e300:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e302:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e306:	2b00      	cmp	r3, #0
 800e308:	d127      	bne.n	800e35a <f_open+0x362>
 800e30a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e30c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e310:	2b00      	cmp	r3, #0
 800e312:	d022      	beq.n	800e35a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e318:	4618      	mov	r0, r3
 800e31a:	f7fe fc75 	bl	800cc08 <clust2sect>
 800e31e:	6478      	str	r0, [r7, #68]	; 0x44
 800e320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e322:	2b00      	cmp	r3, #0
 800e324:	d103      	bne.n	800e32e <f_open+0x336>
						res = FR_INT_ERR;
 800e326:	2302      	movs	r3, #2
 800e328:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e32c:	e015      	b.n	800e35a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e32e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e330:	0a5a      	lsrs	r2, r3, #9
 800e332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e334:	441a      	add	r2, r3
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e33a:	693b      	ldr	r3, [r7, #16]
 800e33c:	7858      	ldrb	r0, [r3, #1]
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	6a1a      	ldr	r2, [r3, #32]
 800e348:	2301      	movs	r3, #1
 800e34a:	f7fe f8ef 	bl	800c52c <disk_read>
 800e34e:	4603      	mov	r3, r0
 800e350:	2b00      	cmp	r3, #0
 800e352:	d002      	beq.n	800e35a <f_open+0x362>
 800e354:	2301      	movs	r3, #1
 800e356:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e35a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d002      	beq.n	800e368 <f_open+0x370>
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	2200      	movs	r2, #0
 800e366:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e368:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3760      	adds	r7, #96	; 0x60
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}

0800e374 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b08c      	sub	sp, #48	; 0x30
 800e378:	af00      	add	r7, sp, #0
 800e37a:	60f8      	str	r0, [r7, #12]
 800e37c:	60b9      	str	r1, [r7, #8]
 800e37e:	607a      	str	r2, [r7, #4]
 800e380:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	2200      	movs	r2, #0
 800e38a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f107 0210 	add.w	r2, r7, #16
 800e392:	4611      	mov	r1, r2
 800e394:	4618      	mov	r0, r3
 800e396:	f7ff fdb3 	bl	800df00 <validate>
 800e39a:	4603      	mov	r3, r0
 800e39c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e3a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d107      	bne.n	800e3b8 <f_write+0x44>
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	7d5b      	ldrb	r3, [r3, #21]
 800e3ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e3b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d002      	beq.n	800e3be <f_write+0x4a>
 800e3b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3bc:	e14b      	b.n	800e656 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	7d1b      	ldrb	r3, [r3, #20]
 800e3c2:	f003 0302 	and.w	r3, r3, #2
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d101      	bne.n	800e3ce <f_write+0x5a>
 800e3ca:	2307      	movs	r3, #7
 800e3cc:	e143      	b.n	800e656 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	699a      	ldr	r2, [r3, #24]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	441a      	add	r2, r3
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	699b      	ldr	r3, [r3, #24]
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	f080 812d 	bcs.w	800e63a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	699b      	ldr	r3, [r3, #24]
 800e3e4:	43db      	mvns	r3, r3
 800e3e6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e3e8:	e127      	b.n	800e63a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	699b      	ldr	r3, [r3, #24]
 800e3ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	f040 80e3 	bne.w	800e5be <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	699b      	ldr	r3, [r3, #24]
 800e3fc:	0a5b      	lsrs	r3, r3, #9
 800e3fe:	693a      	ldr	r2, [r7, #16]
 800e400:	8952      	ldrh	r2, [r2, #10]
 800e402:	3a01      	subs	r2, #1
 800e404:	4013      	ands	r3, r2
 800e406:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e408:	69bb      	ldr	r3, [r7, #24]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d143      	bne.n	800e496 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	699b      	ldr	r3, [r3, #24]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d10c      	bne.n	800e430 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	689b      	ldr	r3, [r3, #8]
 800e41a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d11a      	bne.n	800e458 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	2100      	movs	r1, #0
 800e426:	4618      	mov	r0, r3
 800e428:	f7fe fe06 	bl	800d038 <create_chain>
 800e42c:	62b8      	str	r0, [r7, #40]	; 0x28
 800e42e:	e013      	b.n	800e458 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e434:	2b00      	cmp	r3, #0
 800e436:	d007      	beq.n	800e448 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	699b      	ldr	r3, [r3, #24]
 800e43c:	4619      	mov	r1, r3
 800e43e:	68f8      	ldr	r0, [r7, #12]
 800e440:	f7fe fe92 	bl	800d168 <clmt_clust>
 800e444:	62b8      	str	r0, [r7, #40]	; 0x28
 800e446:	e007      	b.n	800e458 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e448:	68fa      	ldr	r2, [r7, #12]
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	69db      	ldr	r3, [r3, #28]
 800e44e:	4619      	mov	r1, r3
 800e450:	4610      	mov	r0, r2
 800e452:	f7fe fdf1 	bl	800d038 <create_chain>
 800e456:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	f000 80f2 	beq.w	800e644 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e462:	2b01      	cmp	r3, #1
 800e464:	d104      	bne.n	800e470 <f_write+0xfc>
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	2202      	movs	r2, #2
 800e46a:	755a      	strb	r2, [r3, #21]
 800e46c:	2302      	movs	r3, #2
 800e46e:	e0f2      	b.n	800e656 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e476:	d104      	bne.n	800e482 <f_write+0x10e>
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	2201      	movs	r2, #1
 800e47c:	755a      	strb	r2, [r3, #21]
 800e47e:	2301      	movs	r3, #1
 800e480:	e0e9      	b.n	800e656 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e486:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	689b      	ldr	r3, [r3, #8]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d102      	bne.n	800e496 <f_write+0x122>
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e494:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	7d1b      	ldrb	r3, [r3, #20]
 800e49a:	b25b      	sxtb	r3, r3
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	da18      	bge.n	800e4d2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	7858      	ldrb	r0, [r3, #1]
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	6a1a      	ldr	r2, [r3, #32]
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	f7fe f85c 	bl	800c56c <disk_write>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d004      	beq.n	800e4c4 <f_write+0x150>
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	2201      	movs	r2, #1
 800e4be:	755a      	strb	r2, [r3, #21]
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	e0c8      	b.n	800e656 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	7d1b      	ldrb	r3, [r3, #20]
 800e4c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4cc:	b2da      	uxtb	r2, r3
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e4d2:	693a      	ldr	r2, [r7, #16]
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	69db      	ldr	r3, [r3, #28]
 800e4d8:	4619      	mov	r1, r3
 800e4da:	4610      	mov	r0, r2
 800e4dc:	f7fe fb94 	bl	800cc08 <clust2sect>
 800e4e0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d104      	bne.n	800e4f2 <f_write+0x17e>
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2202      	movs	r2, #2
 800e4ec:	755a      	strb	r2, [r3, #21]
 800e4ee:	2302      	movs	r3, #2
 800e4f0:	e0b1      	b.n	800e656 <f_write+0x2e2>
			sect += csect;
 800e4f2:	697a      	ldr	r2, [r7, #20]
 800e4f4:	69bb      	ldr	r3, [r7, #24]
 800e4f6:	4413      	add	r3, r2
 800e4f8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	0a5b      	lsrs	r3, r3, #9
 800e4fe:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e500:	6a3b      	ldr	r3, [r7, #32]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d03c      	beq.n	800e580 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e506:	69ba      	ldr	r2, [r7, #24]
 800e508:	6a3b      	ldr	r3, [r7, #32]
 800e50a:	4413      	add	r3, r2
 800e50c:	693a      	ldr	r2, [r7, #16]
 800e50e:	8952      	ldrh	r2, [r2, #10]
 800e510:	4293      	cmp	r3, r2
 800e512:	d905      	bls.n	800e520 <f_write+0x1ac>
					cc = fs->csize - csect;
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	895b      	ldrh	r3, [r3, #10]
 800e518:	461a      	mov	r2, r3
 800e51a:	69bb      	ldr	r3, [r7, #24]
 800e51c:	1ad3      	subs	r3, r2, r3
 800e51e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	7858      	ldrb	r0, [r3, #1]
 800e524:	6a3b      	ldr	r3, [r7, #32]
 800e526:	697a      	ldr	r2, [r7, #20]
 800e528:	69f9      	ldr	r1, [r7, #28]
 800e52a:	f7fe f81f 	bl	800c56c <disk_write>
 800e52e:	4603      	mov	r3, r0
 800e530:	2b00      	cmp	r3, #0
 800e532:	d004      	beq.n	800e53e <f_write+0x1ca>
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2201      	movs	r2, #1
 800e538:	755a      	strb	r2, [r3, #21]
 800e53a:	2301      	movs	r3, #1
 800e53c:	e08b      	b.n	800e656 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	6a1a      	ldr	r2, [r3, #32]
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	1ad3      	subs	r3, r2, r3
 800e546:	6a3a      	ldr	r2, [r7, #32]
 800e548:	429a      	cmp	r2, r3
 800e54a:	d915      	bls.n	800e578 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	6a1a      	ldr	r2, [r3, #32]
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	1ad3      	subs	r3, r2, r3
 800e55a:	025b      	lsls	r3, r3, #9
 800e55c:	69fa      	ldr	r2, [r7, #28]
 800e55e:	4413      	add	r3, r2
 800e560:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e564:	4619      	mov	r1, r3
 800e566:	f7fe f8c1 	bl	800c6ec <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	7d1b      	ldrb	r3, [r3, #20]
 800e56e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e572:	b2da      	uxtb	r2, r3
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e578:	6a3b      	ldr	r3, [r7, #32]
 800e57a:	025b      	lsls	r3, r3, #9
 800e57c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e57e:	e03f      	b.n	800e600 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	6a1b      	ldr	r3, [r3, #32]
 800e584:	697a      	ldr	r2, [r7, #20]
 800e586:	429a      	cmp	r2, r3
 800e588:	d016      	beq.n	800e5b8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	699a      	ldr	r2, [r3, #24]
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e592:	429a      	cmp	r2, r3
 800e594:	d210      	bcs.n	800e5b8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	7858      	ldrb	r0, [r3, #1]
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	697a      	ldr	r2, [r7, #20]
 800e5a4:	f7fd ffc2 	bl	800c52c <disk_read>
 800e5a8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d004      	beq.n	800e5b8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	2201      	movs	r2, #1
 800e5b2:	755a      	strb	r2, [r3, #21]
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	e04e      	b.n	800e656 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	697a      	ldr	r2, [r7, #20]
 800e5bc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	699b      	ldr	r3, [r3, #24]
 800e5c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5c6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e5ca:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e5cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	d901      	bls.n	800e5d8 <f_write+0x264>
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	699b      	ldr	r3, [r3, #24]
 800e5e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5e6:	4413      	add	r3, r2
 800e5e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5ea:	69f9      	ldr	r1, [r7, #28]
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f7fe f87d 	bl	800c6ec <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	7d1b      	ldrb	r3, [r3, #20]
 800e5f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e5fa:	b2da      	uxtb	r2, r3
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e600:	69fa      	ldr	r2, [r7, #28]
 800e602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e604:	4413      	add	r3, r2
 800e606:	61fb      	str	r3, [r7, #28]
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	699a      	ldr	r2, [r3, #24]
 800e60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e60e:	441a      	add	r2, r3
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	619a      	str	r2, [r3, #24]
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	68da      	ldr	r2, [r3, #12]
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	699b      	ldr	r3, [r3, #24]
 800e61c:	429a      	cmp	r2, r3
 800e61e:	bf38      	it	cc
 800e620:	461a      	movcc	r2, r3
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	60da      	str	r2, [r3, #12]
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	681a      	ldr	r2, [r3, #0]
 800e62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62c:	441a      	add	r2, r3
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	601a      	str	r2, [r3, #0]
 800e632:	687a      	ldr	r2, [r7, #4]
 800e634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e636:	1ad3      	subs	r3, r2, r3
 800e638:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	f47f aed4 	bne.w	800e3ea <f_write+0x76>
 800e642:	e000      	b.n	800e646 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e644:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	7d1b      	ldrb	r3, [r3, #20]
 800e64a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e64e:	b2da      	uxtb	r2, r3
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e654:	2300      	movs	r3, #0
}
 800e656:	4618      	mov	r0, r3
 800e658:	3730      	adds	r7, #48	; 0x30
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e65e:	b580      	push	{r7, lr}
 800e660:	b086      	sub	sp, #24
 800e662:	af00      	add	r7, sp, #0
 800e664:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f107 0208 	add.w	r2, r7, #8
 800e66c:	4611      	mov	r1, r2
 800e66e:	4618      	mov	r0, r3
 800e670:	f7ff fc46 	bl	800df00 <validate>
 800e674:	4603      	mov	r3, r0
 800e676:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e678:	7dfb      	ldrb	r3, [r7, #23]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d168      	bne.n	800e750 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	7d1b      	ldrb	r3, [r3, #20]
 800e682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e686:	2b00      	cmp	r3, #0
 800e688:	d062      	beq.n	800e750 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	7d1b      	ldrb	r3, [r3, #20]
 800e68e:	b25b      	sxtb	r3, r3
 800e690:	2b00      	cmp	r3, #0
 800e692:	da15      	bge.n	800e6c0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	7858      	ldrb	r0, [r3, #1]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6a1a      	ldr	r2, [r3, #32]
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	f7fd ff62 	bl	800c56c <disk_write>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d001      	beq.n	800e6b2 <f_sync+0x54>
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	e04f      	b.n	800e752 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	7d1b      	ldrb	r3, [r3, #20]
 800e6b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6ba:	b2da      	uxtb	r2, r3
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e6c0:	f7fc f844 	bl	800a74c <get_fattime>
 800e6c4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e6c6:	68ba      	ldr	r2, [r7, #8]
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6cc:	4619      	mov	r1, r3
 800e6ce:	4610      	mov	r0, r2
 800e6d0:	f7fe f9fe 	bl	800cad0 <move_window>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e6d8:	7dfb      	ldrb	r3, [r7, #23]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d138      	bne.n	800e750 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6e2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	330b      	adds	r3, #11
 800e6e8:	781a      	ldrb	r2, [r3, #0]
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	330b      	adds	r3, #11
 800e6ee:	f042 0220 	orr.w	r2, r2, #32
 800e6f2:	b2d2      	uxtb	r2, r2
 800e6f4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6818      	ldr	r0, [r3, #0]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	689b      	ldr	r3, [r3, #8]
 800e6fe:	461a      	mov	r2, r3
 800e700:	68f9      	ldr	r1, [r7, #12]
 800e702:	f7fe ff0b 	bl	800d51c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	f103 021c 	add.w	r2, r3, #28
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	68db      	ldr	r3, [r3, #12]
 800e710:	4619      	mov	r1, r3
 800e712:	4610      	mov	r0, r2
 800e714:	f7fd ffbe 	bl	800c694 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	3316      	adds	r3, #22
 800e71c:	6939      	ldr	r1, [r7, #16]
 800e71e:	4618      	mov	r0, r3
 800e720:	f7fd ffb8 	bl	800c694 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	3312      	adds	r3, #18
 800e728:	2100      	movs	r1, #0
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7fd ff97 	bl	800c65e <st_word>
					fs->wflag = 1;
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	2201      	movs	r2, #1
 800e734:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	4618      	mov	r0, r3
 800e73a:	f7fe f9f7 	bl	800cb2c <sync_fs>
 800e73e:	4603      	mov	r3, r0
 800e740:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	7d1b      	ldrb	r3, [r3, #20]
 800e746:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e74a:	b2da      	uxtb	r2, r3
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e750:	7dfb      	ldrb	r3, [r7, #23]
}
 800e752:	4618      	mov	r0, r3
 800e754:	3718      	adds	r7, #24
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}

0800e75a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e75a:	b580      	push	{r7, lr}
 800e75c:	b090      	sub	sp, #64	; 0x40
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
 800e762:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800e764:	f107 010c 	add.w	r1, r7, #12
 800e768:	1d3b      	adds	r3, r7, #4
 800e76a:	2200      	movs	r2, #0
 800e76c:	4618      	mov	r0, r3
 800e76e:	f7ff f97b 	bl	800da68 <find_volume>
 800e772:	4603      	mov	r3, r0
 800e774:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800e778:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d11f      	bne.n	800e7c0 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e780:	687a      	ldr	r2, [r7, #4]
 800e782:	f107 030c 	add.w	r3, r7, #12
 800e786:	4611      	mov	r1, r2
 800e788:	4618      	mov	r0, r3
 800e78a:	f7ff f861 	bl	800d850 <follow_path>
 800e78e:	4603      	mov	r3, r0
 800e790:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800e794:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d111      	bne.n	800e7c0 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800e79c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e7a0:	b25b      	sxtb	r3, r3
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	da03      	bge.n	800e7ae <f_stat+0x54>
				res = FR_INVALID_NAME;
 800e7a6:	2306      	movs	r3, #6
 800e7a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e7ac:	e008      	b.n	800e7c0 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d005      	beq.n	800e7c0 <f_stat+0x66>
 800e7b4:	f107 030c 	add.w	r3, r7, #12
 800e7b8:	6839      	ldr	r1, [r7, #0]
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7fe ff55 	bl	800d66a <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800e7c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3740      	adds	r7, #64	; 0x40
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}

0800e7cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b087      	sub	sp, #28
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	60f8      	str	r0, [r7, #12]
 800e7d4:	60b9      	str	r1, [r7, #8]
 800e7d6:	4613      	mov	r3, r2
 800e7d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e7da:	2301      	movs	r3, #1
 800e7dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e7e2:	4b1f      	ldr	r3, [pc, #124]	; (800e860 <FATFS_LinkDriverEx+0x94>)
 800e7e4:	7a5b      	ldrb	r3, [r3, #9]
 800e7e6:	b2db      	uxtb	r3, r3
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d131      	bne.n	800e850 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e7ec:	4b1c      	ldr	r3, [pc, #112]	; (800e860 <FATFS_LinkDriverEx+0x94>)
 800e7ee:	7a5b      	ldrb	r3, [r3, #9]
 800e7f0:	b2db      	uxtb	r3, r3
 800e7f2:	461a      	mov	r2, r3
 800e7f4:	4b1a      	ldr	r3, [pc, #104]	; (800e860 <FATFS_LinkDriverEx+0x94>)
 800e7f6:	2100      	movs	r1, #0
 800e7f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e7fa:	4b19      	ldr	r3, [pc, #100]	; (800e860 <FATFS_LinkDriverEx+0x94>)
 800e7fc:	7a5b      	ldrb	r3, [r3, #9]
 800e7fe:	b2db      	uxtb	r3, r3
 800e800:	4a17      	ldr	r2, [pc, #92]	; (800e860 <FATFS_LinkDriverEx+0x94>)
 800e802:	009b      	lsls	r3, r3, #2
 800e804:	4413      	add	r3, r2
 800e806:	68fa      	ldr	r2, [r7, #12]
 800e808:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e80a:	4b15      	ldr	r3, [pc, #84]	; (800e860 <FATFS_LinkDriverEx+0x94>)
 800e80c:	7a5b      	ldrb	r3, [r3, #9]
 800e80e:	b2db      	uxtb	r3, r3
 800e810:	461a      	mov	r2, r3
 800e812:	4b13      	ldr	r3, [pc, #76]	; (800e860 <FATFS_LinkDriverEx+0x94>)
 800e814:	4413      	add	r3, r2
 800e816:	79fa      	ldrb	r2, [r7, #7]
 800e818:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e81a:	4b11      	ldr	r3, [pc, #68]	; (800e860 <FATFS_LinkDriverEx+0x94>)
 800e81c:	7a5b      	ldrb	r3, [r3, #9]
 800e81e:	b2db      	uxtb	r3, r3
 800e820:	1c5a      	adds	r2, r3, #1
 800e822:	b2d1      	uxtb	r1, r2
 800e824:	4a0e      	ldr	r2, [pc, #56]	; (800e860 <FATFS_LinkDriverEx+0x94>)
 800e826:	7251      	strb	r1, [r2, #9]
 800e828:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e82a:	7dbb      	ldrb	r3, [r7, #22]
 800e82c:	3330      	adds	r3, #48	; 0x30
 800e82e:	b2da      	uxtb	r2, r3
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	3301      	adds	r3, #1
 800e838:	223a      	movs	r2, #58	; 0x3a
 800e83a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	3302      	adds	r3, #2
 800e840:	222f      	movs	r2, #47	; 0x2f
 800e842:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	3303      	adds	r3, #3
 800e848:	2200      	movs	r2, #0
 800e84a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e84c:	2300      	movs	r3, #0
 800e84e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e850:	7dfb      	ldrb	r3, [r7, #23]
}
 800e852:	4618      	mov	r0, r3
 800e854:	371c      	adds	r7, #28
 800e856:	46bd      	mov	sp, r7
 800e858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85c:	4770      	bx	lr
 800e85e:	bf00      	nop
 800e860:	20000bac 	.word	0x20000bac

0800e864 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b082      	sub	sp, #8
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e86e:	2200      	movs	r2, #0
 800e870:	6839      	ldr	r1, [r7, #0]
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f7ff ffaa 	bl	800e7cc <FATFS_LinkDriverEx>
 800e878:	4603      	mov	r3, r0
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3708      	adds	r7, #8
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}
	...

0800e884 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e888:	2200      	movs	r2, #0
 800e88a:	4912      	ldr	r1, [pc, #72]	; (800e8d4 <MX_USB_DEVICE_Init+0x50>)
 800e88c:	4812      	ldr	r0, [pc, #72]	; (800e8d8 <MX_USB_DEVICE_Init+0x54>)
 800e88e:	f7fc fca3 	bl	800b1d8 <USBD_Init>
 800e892:	4603      	mov	r3, r0
 800e894:	2b00      	cmp	r3, #0
 800e896:	d001      	beq.n	800e89c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e898:	f7f3 fc0c 	bl	80020b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e89c:	490f      	ldr	r1, [pc, #60]	; (800e8dc <MX_USB_DEVICE_Init+0x58>)
 800e89e:	480e      	ldr	r0, [pc, #56]	; (800e8d8 <MX_USB_DEVICE_Init+0x54>)
 800e8a0:	f7fc fcca 	bl	800b238 <USBD_RegisterClass>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d001      	beq.n	800e8ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e8aa:	f7f3 fc03 	bl	80020b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e8ae:	490c      	ldr	r1, [pc, #48]	; (800e8e0 <MX_USB_DEVICE_Init+0x5c>)
 800e8b0:	4809      	ldr	r0, [pc, #36]	; (800e8d8 <MX_USB_DEVICE_Init+0x54>)
 800e8b2:	f7fc fc1b 	bl	800b0ec <USBD_CDC_RegisterInterface>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d001      	beq.n	800e8c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e8bc:	f7f3 fbfa 	bl	80020b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e8c0:	4805      	ldr	r0, [pc, #20]	; (800e8d8 <MX_USB_DEVICE_Init+0x54>)
 800e8c2:	f7fc fce0 	bl	800b286 <USBD_Start>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d001      	beq.n	800e8d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e8cc:	f7f3 fbf2 	bl	80020b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e8d0:	bf00      	nop
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	20000130 	.word	0x20000130
 800e8d8:	20001950 	.word	0x20001950
 800e8dc:	20000018 	.word	0x20000018
 800e8e0:	2000011c 	.word	0x2000011c

0800e8e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	4905      	ldr	r1, [pc, #20]	; (800e900 <CDC_Init_FS+0x1c>)
 800e8ec:	4805      	ldr	r0, [pc, #20]	; (800e904 <CDC_Init_FS+0x20>)
 800e8ee:	f7fc fc12 	bl	800b116 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e8f2:	4905      	ldr	r1, [pc, #20]	; (800e908 <CDC_Init_FS+0x24>)
 800e8f4:	4803      	ldr	r0, [pc, #12]	; (800e904 <CDC_Init_FS+0x20>)
 800e8f6:	f7fc fc2c 	bl	800b152 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e8fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	bd80      	pop	{r7, pc}
 800e900:	20002420 	.word	0x20002420
 800e904:	20001950 	.word	0x20001950
 800e908:	20001c20 	.word	0x20001c20

0800e90c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e90c:	b480      	push	{r7}
 800e90e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e910:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e912:	4618      	mov	r0, r3
 800e914:	46bd      	mov	sp, r7
 800e916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91a:	4770      	bx	lr

0800e91c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b087      	sub	sp, #28
 800e920:	af00      	add	r7, sp, #0
 800e922:	4603      	mov	r3, r0
 800e924:	6039      	str	r1, [r7, #0]
 800e926:	71fb      	strb	r3, [r7, #7]
 800e928:	4613      	mov	r3, r2
 800e92a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 800e92c:	4a51      	ldr	r2, [pc, #324]	; (800ea74 <CDC_Control_FS+0x158>)
 800e92e:	f107 030c 	add.w	r3, r7, #12
 800e932:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e936:	6018      	str	r0, [r3, #0]
 800e938:	3304      	adds	r3, #4
 800e93a:	8019      	strh	r1, [r3, #0]
 800e93c:	3302      	adds	r3, #2
 800e93e:	0c0a      	lsrs	r2, r1, #16
 800e940:	701a      	strb	r2, [r3, #0]
  USBD_SetupReqTypedef* req;
  switch(cmd)
 800e942:	79fb      	ldrb	r3, [r7, #7]
 800e944:	2b23      	cmp	r3, #35	; 0x23
 800e946:	f200 808d 	bhi.w	800ea64 <CDC_Control_FS+0x148>
 800e94a:	a201      	add	r2, pc, #4	; (adr r2, 800e950 <CDC_Control_FS+0x34>)
 800e94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e950:	0800ea65 	.word	0x0800ea65
 800e954:	0800ea65 	.word	0x0800ea65
 800e958:	0800ea65 	.word	0x0800ea65
 800e95c:	0800ea65 	.word	0x0800ea65
 800e960:	0800ea65 	.word	0x0800ea65
 800e964:	0800ea65 	.word	0x0800ea65
 800e968:	0800ea65 	.word	0x0800ea65
 800e96c:	0800ea65 	.word	0x0800ea65
 800e970:	0800ea65 	.word	0x0800ea65
 800e974:	0800ea65 	.word	0x0800ea65
 800e978:	0800ea65 	.word	0x0800ea65
 800e97c:	0800ea65 	.word	0x0800ea65
 800e980:	0800ea65 	.word	0x0800ea65
 800e984:	0800ea65 	.word	0x0800ea65
 800e988:	0800ea65 	.word	0x0800ea65
 800e98c:	0800ea65 	.word	0x0800ea65
 800e990:	0800ea65 	.word	0x0800ea65
 800e994:	0800ea65 	.word	0x0800ea65
 800e998:	0800ea65 	.word	0x0800ea65
 800e99c:	0800ea65 	.word	0x0800ea65
 800e9a0:	0800ea65 	.word	0x0800ea65
 800e9a4:	0800ea65 	.word	0x0800ea65
 800e9a8:	0800ea65 	.word	0x0800ea65
 800e9ac:	0800ea65 	.word	0x0800ea65
 800e9b0:	0800ea65 	.word	0x0800ea65
 800e9b4:	0800ea65 	.word	0x0800ea65
 800e9b8:	0800ea65 	.word	0x0800ea65
 800e9bc:	0800ea65 	.word	0x0800ea65
 800e9c0:	0800ea65 	.word	0x0800ea65
 800e9c4:	0800ea65 	.word	0x0800ea65
 800e9c8:	0800ea65 	.word	0x0800ea65
 800e9cc:	0800ea65 	.word	0x0800ea65
 800e9d0:	0800e9e1 	.word	0x0800e9e1
 800e9d4:	0800ea0d 	.word	0x0800ea0d
 800e9d8:	0800ea45 	.word	0x0800ea45
 800e9dc:	0800ea65 	.word	0x0800ea65
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	// required for VCP
      	tempbuf[0] = pbuf[0];
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	781b      	ldrb	r3, [r3, #0]
 800e9e4:	733b      	strb	r3, [r7, #12]
      	tempbuf[1] = pbuf[1];
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	785b      	ldrb	r3, [r3, #1]
 800e9ea:	737b      	strb	r3, [r7, #13]
      	tempbuf[2] = pbuf[2];
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	789b      	ldrb	r3, [r3, #2]
 800e9f0:	73bb      	strb	r3, [r7, #14]
      	tempbuf[3] = pbuf[3];
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	78db      	ldrb	r3, [r3, #3]
 800e9f6:	73fb      	strb	r3, [r7, #15]
      	tempbuf[4] = pbuf[4];
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	791b      	ldrb	r3, [r3, #4]
 800e9fc:	743b      	strb	r3, [r7, #16]
      	tempbuf[5] = pbuf[5];
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	795b      	ldrb	r3, [r3, #5]
 800ea02:	747b      	strb	r3, [r7, #17]
      	tempbuf[6] = pbuf[6];
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	799b      	ldrb	r3, [r3, #6]
 800ea08:	74bb      	strb	r3, [r7, #18]
      	break;
 800ea0a:	e02c      	b.n	800ea66 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	// required for VCP
      	pbuf[0] = tempbuf[0];
 800ea0c:	7b3a      	ldrb	r2, [r7, #12]
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	701a      	strb	r2, [r3, #0]
      	pbuf[1] = tempbuf[1];
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	3301      	adds	r3, #1
 800ea16:	7b7a      	ldrb	r2, [r7, #13]
 800ea18:	701a      	strb	r2, [r3, #0]
      	pbuf[2] = tempbuf[2];
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	3302      	adds	r3, #2
 800ea1e:	7bba      	ldrb	r2, [r7, #14]
 800ea20:	701a      	strb	r2, [r3, #0]
      	pbuf[3] = tempbuf[3];
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	3303      	adds	r3, #3
 800ea26:	7bfa      	ldrb	r2, [r7, #15]
 800ea28:	701a      	strb	r2, [r3, #0]
      	pbuf[4] = tempbuf[4];
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	3304      	adds	r3, #4
 800ea2e:	7c3a      	ldrb	r2, [r7, #16]
 800ea30:	701a      	strb	r2, [r3, #0]
      	pbuf[5] = tempbuf[5];
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	3305      	adds	r3, #5
 800ea36:	7c7a      	ldrb	r2, [r7, #17]
 800ea38:	701a      	strb	r2, [r3, #0]
      	pbuf[6] = tempbuf[6];
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	3306      	adds	r3, #6
 800ea3e:	7cba      	ldrb	r2, [r7, #18]
 800ea40:	701a      	strb	r2, [r3, #0]
      	break;
 800ea42:	e010      	b.n	800ea66 <CDC_Control_FS+0x14a>

    case CDC_SET_CONTROL_LINE_STATE:
    	// update if VCP is open or not
    	req = (USBD_SetupReqTypedef *)pbuf;
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	617b      	str	r3, [r7, #20]
    	if((req->wValue &0x0001) != 0)
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	885b      	ldrh	r3, [r3, #2]
 800ea4c:	f003 0301 	and.w	r3, r3, #1
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d003      	beq.n	800ea5c <CDC_Control_FS+0x140>
    		VCP_OPEN = 1;
 800ea54:	4b08      	ldr	r3, [pc, #32]	; (800ea78 <CDC_Control_FS+0x15c>)
 800ea56:	2201      	movs	r2, #1
 800ea58:	701a      	strb	r2, [r3, #0]
    	else VCP_OPEN = 0;
    	break;
 800ea5a:	e004      	b.n	800ea66 <CDC_Control_FS+0x14a>
    	else VCP_OPEN = 0;
 800ea5c:	4b06      	ldr	r3, [pc, #24]	; (800ea78 <CDC_Control_FS+0x15c>)
 800ea5e:	2200      	movs	r2, #0
 800ea60:	701a      	strb	r2, [r3, #0]
    	break;
 800ea62:	e000      	b.n	800ea66 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ea64:	bf00      	nop
  }

  return (USBD_OK);
 800ea66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	371c      	adds	r7, #28
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea72:	4770      	bx	lr
 800ea74:	08012b28 	.word	0x08012b28
 800ea78:	20000e34 	.word	0x20000e34

0800ea7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b084      	sub	sp, #16
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
 800ea84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint32_t len=*Len;
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	60fb      	str	r3, [r7, #12]
	if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 800ea8c:	4b26      	ldr	r3, [pc, #152]	; (800eb28 <CDC_Receive_FS+0xac>)
 800ea8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea92:	b2db      	uxtb	r3, r3
 800ea94:	2b03      	cmp	r3, #3
 800ea96:	d001      	beq.n	800ea9c <CDC_Receive_FS+0x20>
	{
	   return USBD_FAIL;
 800ea98:	2303      	movs	r3, #3
 800ea9a:	e041      	b.n	800eb20 <CDC_Receive_FS+0xa4>
	}

	if (((Buf == NULL) || (Len == NULL)) || (*Len <= 0))
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d006      	beq.n	800eab0 <CDC_Receive_FS+0x34>
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d003      	beq.n	800eab0 <CDC_Receive_FS+0x34>
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d101      	bne.n	800eab4 <CDC_Receive_FS+0x38>
	{
	   return USBD_FAIL;
 800eab0:	2303      	movs	r3, #3
 800eab2:	e035      	b.n	800eb20 <CDC_Receive_FS+0xa4>
	}

	/* Get data */
	uint8_t result = USBD_OK;
 800eab4:	2300      	movs	r3, #0
 800eab6:	72fb      	strb	r3, [r7, #11]
	    do
	    {
	        result = USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800eab8:	6879      	ldr	r1, [r7, #4]
 800eaba:	481b      	ldr	r0, [pc, #108]	; (800eb28 <CDC_Receive_FS+0xac>)
 800eabc:	f7fc fb49 	bl	800b152 <USBD_CDC_SetRxBuffer>
 800eac0:	4603      	mov	r3, r0
 800eac2:	72fb      	strb	r3, [r7, #11]
	    }
	    while(result != USBD_OK);
 800eac4:	7afb      	ldrb	r3, [r7, #11]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d1f6      	bne.n	800eab8 <CDC_Receive_FS+0x3c>

	    do
	    {
	       result = USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800eaca:	4817      	ldr	r0, [pc, #92]	; (800eb28 <CDC_Receive_FS+0xac>)
 800eacc:	f7fc fb5a 	bl	800b184 <USBD_CDC_ReceivePacket>
 800ead0:	4603      	mov	r3, r0
 800ead2:	72fb      	strb	r3, [r7, #11]
	    }
	    while(result != USBD_OK);
 800ead4:	7afb      	ldrb	r3, [r7, #11]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d1f7      	bne.n	800eaca <CDC_Receive_FS+0x4e>

	// add data to FIFO
	    while (len--)
 800eada:	e01b      	b.n	800eb14 <CDC_Receive_FS+0x98>
	       if (FIFO_INCR(RX_FIFO.head)==RX_FIFO.tail)
 800eadc:	4b13      	ldr	r3, [pc, #76]	; (800eb2c <CDC_Receive_FS+0xb0>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	3301      	adds	r3, #1
 800eae2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800eae6:	4b11      	ldr	r3, [pc, #68]	; (800eb2c <CDC_Receive_FS+0xb0>)
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d101      	bne.n	800eaf2 <CDC_Receive_FS+0x76>
	             return USBD_FAIL;  // overrun
 800eaee:	2303      	movs	r3, #3
 800eaf0:	e016      	b.n	800eb20 <CDC_Receive_FS+0xa4>
	       else
	        {
	        RX_FIFO.data[RX_FIFO.head]=*Buf++;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	1c5a      	adds	r2, r3, #1
 800eaf6:	607a      	str	r2, [r7, #4]
 800eaf8:	4a0c      	ldr	r2, [pc, #48]	; (800eb2c <CDC_Receive_FS+0xb0>)
 800eafa:	6812      	ldr	r2, [r2, #0]
 800eafc:	7819      	ldrb	r1, [r3, #0]
 800eafe:	4b0b      	ldr	r3, [pc, #44]	; (800eb2c <CDC_Receive_FS+0xb0>)
 800eb00:	4413      	add	r3, r2
 800eb02:	460a      	mov	r2, r1
 800eb04:	721a      	strb	r2, [r3, #8]
	       RX_FIFO.head=FIFO_INCR(RX_FIFO.head);
 800eb06:	4b09      	ldr	r3, [pc, #36]	; (800eb2c <CDC_Receive_FS+0xb0>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eb10:	4a06      	ldr	r2, [pc, #24]	; (800eb2c <CDC_Receive_FS+0xb0>)
 800eb12:	6013      	str	r3, [r2, #0]
	    while (len--)
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	1e5a      	subs	r2, r3, #1
 800eb18:	60fa      	str	r2, [r7, #12]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d1de      	bne.n	800eadc <CDC_Receive_FS+0x60>
	       }
	   return (USBD_OK);
 800eb1e:	2300      	movs	r3, #0

  /* USER CODE END 6 */
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	3710      	adds	r7, #16
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}
 800eb28:	20001950 	.word	0x20001950
 800eb2c:	2000036c 	.word	0x2000036c

0800eb30 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800eb30:	b480      	push	{r7}
 800eb32:	b087      	sub	sp, #28
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	60f8      	str	r0, [r7, #12]
 800eb38:	60b9      	str	r1, [r7, #8]
 800eb3a:	4613      	mov	r3, r2
 800eb3c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800eb42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	371c      	adds	r7, #28
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb50:	4770      	bx	lr
	...

0800eb54 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb54:	b480      	push	{r7}
 800eb56:	b083      	sub	sp, #12
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	6039      	str	r1, [r7, #0]
 800eb5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	2212      	movs	r2, #18
 800eb64:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800eb66:	4b03      	ldr	r3, [pc, #12]	; (800eb74 <USBD_FS_DeviceDescriptor+0x20>)
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	370c      	adds	r7, #12
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb72:	4770      	bx	lr
 800eb74:	2000014c 	.word	0x2000014c

0800eb78 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb78:	b480      	push	{r7}
 800eb7a:	b083      	sub	sp, #12
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	4603      	mov	r3, r0
 800eb80:	6039      	str	r1, [r7, #0]
 800eb82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	2204      	movs	r2, #4
 800eb88:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800eb8a:	4b03      	ldr	r3, [pc, #12]	; (800eb98 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	370c      	adds	r7, #12
 800eb90:	46bd      	mov	sp, r7
 800eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb96:	4770      	bx	lr
 800eb98:	20000160 	.word	0x20000160

0800eb9c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b082      	sub	sp, #8
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	4603      	mov	r3, r0
 800eba4:	6039      	str	r1, [r7, #0]
 800eba6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eba8:	79fb      	ldrb	r3, [r7, #7]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d105      	bne.n	800ebba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ebae:	683a      	ldr	r2, [r7, #0]
 800ebb0:	4907      	ldr	r1, [pc, #28]	; (800ebd0 <USBD_FS_ProductStrDescriptor+0x34>)
 800ebb2:	4808      	ldr	r0, [pc, #32]	; (800ebd4 <USBD_FS_ProductStrDescriptor+0x38>)
 800ebb4:	f7fd fb99 	bl	800c2ea <USBD_GetString>
 800ebb8:	e004      	b.n	800ebc4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ebba:	683a      	ldr	r2, [r7, #0]
 800ebbc:	4904      	ldr	r1, [pc, #16]	; (800ebd0 <USBD_FS_ProductStrDescriptor+0x34>)
 800ebbe:	4805      	ldr	r0, [pc, #20]	; (800ebd4 <USBD_FS_ProductStrDescriptor+0x38>)
 800ebc0:	f7fd fb93 	bl	800c2ea <USBD_GetString>
  }
  return USBD_StrDesc;
 800ebc4:	4b02      	ldr	r3, [pc, #8]	; (800ebd0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3708      	adds	r7, #8
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}
 800ebce:	bf00      	nop
 800ebd0:	20002c20 	.word	0x20002c20
 800ebd4:	08012b30 	.word	0x08012b30

0800ebd8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	4603      	mov	r3, r0
 800ebe0:	6039      	str	r1, [r7, #0]
 800ebe2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ebe4:	683a      	ldr	r2, [r7, #0]
 800ebe6:	4904      	ldr	r1, [pc, #16]	; (800ebf8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ebe8:	4804      	ldr	r0, [pc, #16]	; (800ebfc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ebea:	f7fd fb7e 	bl	800c2ea <USBD_GetString>
  return USBD_StrDesc;
 800ebee:	4b02      	ldr	r3, [pc, #8]	; (800ebf8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3708      	adds	r7, #8
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}
 800ebf8:	20002c20 	.word	0x20002c20
 800ebfc:	08012b48 	.word	0x08012b48

0800ec00 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b082      	sub	sp, #8
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	4603      	mov	r3, r0
 800ec08:	6039      	str	r1, [r7, #0]
 800ec0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	221a      	movs	r2, #26
 800ec10:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ec12:	f000 f843 	bl	800ec9c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ec16:	4b02      	ldr	r3, [pc, #8]	; (800ec20 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ec18:	4618      	mov	r0, r3
 800ec1a:	3708      	adds	r7, #8
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}
 800ec20:	20000164 	.word	0x20000164

0800ec24 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	6039      	str	r1, [r7, #0]
 800ec2e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ec30:	79fb      	ldrb	r3, [r7, #7]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d105      	bne.n	800ec42 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ec36:	683a      	ldr	r2, [r7, #0]
 800ec38:	4907      	ldr	r1, [pc, #28]	; (800ec58 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ec3a:	4808      	ldr	r0, [pc, #32]	; (800ec5c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ec3c:	f7fd fb55 	bl	800c2ea <USBD_GetString>
 800ec40:	e004      	b.n	800ec4c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ec42:	683a      	ldr	r2, [r7, #0]
 800ec44:	4904      	ldr	r1, [pc, #16]	; (800ec58 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ec46:	4805      	ldr	r0, [pc, #20]	; (800ec5c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ec48:	f7fd fb4f 	bl	800c2ea <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec4c:	4b02      	ldr	r3, [pc, #8]	; (800ec58 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3708      	adds	r7, #8
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}
 800ec56:	bf00      	nop
 800ec58:	20002c20 	.word	0x20002c20
 800ec5c:	08012b5c 	.word	0x08012b5c

0800ec60 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b082      	sub	sp, #8
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	4603      	mov	r3, r0
 800ec68:	6039      	str	r1, [r7, #0]
 800ec6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ec6c:	79fb      	ldrb	r3, [r7, #7]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d105      	bne.n	800ec7e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ec72:	683a      	ldr	r2, [r7, #0]
 800ec74:	4907      	ldr	r1, [pc, #28]	; (800ec94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ec76:	4808      	ldr	r0, [pc, #32]	; (800ec98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ec78:	f7fd fb37 	bl	800c2ea <USBD_GetString>
 800ec7c:	e004      	b.n	800ec88 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ec7e:	683a      	ldr	r2, [r7, #0]
 800ec80:	4904      	ldr	r1, [pc, #16]	; (800ec94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ec82:	4805      	ldr	r0, [pc, #20]	; (800ec98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ec84:	f7fd fb31 	bl	800c2ea <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec88:	4b02      	ldr	r3, [pc, #8]	; (800ec94 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3708      	adds	r7, #8
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}
 800ec92:	bf00      	nop
 800ec94:	20002c20 	.word	0x20002c20
 800ec98:	08012b68 	.word	0x08012b68

0800ec9c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b084      	sub	sp, #16
 800eca0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800eca2:	4b0f      	ldr	r3, [pc, #60]	; (800ece0 <Get_SerialNum+0x44>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800eca8:	4b0e      	ldr	r3, [pc, #56]	; (800ece4 <Get_SerialNum+0x48>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ecae:	4b0e      	ldr	r3, [pc, #56]	; (800ece8 <Get_SerialNum+0x4c>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ecb4:	68fa      	ldr	r2, [r7, #12]
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	4413      	add	r3, r2
 800ecba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d009      	beq.n	800ecd6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ecc2:	2208      	movs	r2, #8
 800ecc4:	4909      	ldr	r1, [pc, #36]	; (800ecec <Get_SerialNum+0x50>)
 800ecc6:	68f8      	ldr	r0, [r7, #12]
 800ecc8:	f000 f814 	bl	800ecf4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800eccc:	2204      	movs	r2, #4
 800ecce:	4908      	ldr	r1, [pc, #32]	; (800ecf0 <Get_SerialNum+0x54>)
 800ecd0:	68b8      	ldr	r0, [r7, #8]
 800ecd2:	f000 f80f 	bl	800ecf4 <IntToUnicode>
  }
}
 800ecd6:	bf00      	nop
 800ecd8:	3710      	adds	r7, #16
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	1fff7a10 	.word	0x1fff7a10
 800ece4:	1fff7a14 	.word	0x1fff7a14
 800ece8:	1fff7a18 	.word	0x1fff7a18
 800ecec:	20000166 	.word	0x20000166
 800ecf0:	20000176 	.word	0x20000176

0800ecf4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b087      	sub	sp, #28
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	60f8      	str	r0, [r7, #12]
 800ecfc:	60b9      	str	r1, [r7, #8]
 800ecfe:	4613      	mov	r3, r2
 800ed00:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ed02:	2300      	movs	r3, #0
 800ed04:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ed06:	2300      	movs	r3, #0
 800ed08:	75fb      	strb	r3, [r7, #23]
 800ed0a:	e027      	b.n	800ed5c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	0f1b      	lsrs	r3, r3, #28
 800ed10:	2b09      	cmp	r3, #9
 800ed12:	d80b      	bhi.n	800ed2c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	0f1b      	lsrs	r3, r3, #28
 800ed18:	b2da      	uxtb	r2, r3
 800ed1a:	7dfb      	ldrb	r3, [r7, #23]
 800ed1c:	005b      	lsls	r3, r3, #1
 800ed1e:	4619      	mov	r1, r3
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	440b      	add	r3, r1
 800ed24:	3230      	adds	r2, #48	; 0x30
 800ed26:	b2d2      	uxtb	r2, r2
 800ed28:	701a      	strb	r2, [r3, #0]
 800ed2a:	e00a      	b.n	800ed42 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	0f1b      	lsrs	r3, r3, #28
 800ed30:	b2da      	uxtb	r2, r3
 800ed32:	7dfb      	ldrb	r3, [r7, #23]
 800ed34:	005b      	lsls	r3, r3, #1
 800ed36:	4619      	mov	r1, r3
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	440b      	add	r3, r1
 800ed3c:	3237      	adds	r2, #55	; 0x37
 800ed3e:	b2d2      	uxtb	r2, r2
 800ed40:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	011b      	lsls	r3, r3, #4
 800ed46:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ed48:	7dfb      	ldrb	r3, [r7, #23]
 800ed4a:	005b      	lsls	r3, r3, #1
 800ed4c:	3301      	adds	r3, #1
 800ed4e:	68ba      	ldr	r2, [r7, #8]
 800ed50:	4413      	add	r3, r2
 800ed52:	2200      	movs	r2, #0
 800ed54:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ed56:	7dfb      	ldrb	r3, [r7, #23]
 800ed58:	3301      	adds	r3, #1
 800ed5a:	75fb      	strb	r3, [r7, #23]
 800ed5c:	7dfa      	ldrb	r2, [r7, #23]
 800ed5e:	79fb      	ldrb	r3, [r7, #7]
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d3d3      	bcc.n	800ed0c <IntToUnicode+0x18>
  }
}
 800ed64:	bf00      	nop
 800ed66:	bf00      	nop
 800ed68:	371c      	adds	r7, #28
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed70:	4770      	bx	lr
	...

0800ed74 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b08a      	sub	sp, #40	; 0x28
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ed7c:	f107 0314 	add.w	r3, r7, #20
 800ed80:	2200      	movs	r2, #0
 800ed82:	601a      	str	r2, [r3, #0]
 800ed84:	605a      	str	r2, [r3, #4]
 800ed86:	609a      	str	r2, [r3, #8]
 800ed88:	60da      	str	r2, [r3, #12]
 800ed8a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ed94:	d13a      	bne.n	800ee0c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed96:	2300      	movs	r3, #0
 800ed98:	613b      	str	r3, [r7, #16]
 800ed9a:	4b1e      	ldr	r3, [pc, #120]	; (800ee14 <HAL_PCD_MspInit+0xa0>)
 800ed9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed9e:	4a1d      	ldr	r2, [pc, #116]	; (800ee14 <HAL_PCD_MspInit+0xa0>)
 800eda0:	f043 0301 	orr.w	r3, r3, #1
 800eda4:	6313      	str	r3, [r2, #48]	; 0x30
 800eda6:	4b1b      	ldr	r3, [pc, #108]	; (800ee14 <HAL_PCD_MspInit+0xa0>)
 800eda8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edaa:	f003 0301 	and.w	r3, r3, #1
 800edae:	613b      	str	r3, [r7, #16]
 800edb0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800edb2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800edb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800edb8:	2302      	movs	r3, #2
 800edba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800edbc:	2300      	movs	r3, #0
 800edbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800edc0:	2303      	movs	r3, #3
 800edc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800edc4:	230a      	movs	r3, #10
 800edc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800edc8:	f107 0314 	add.w	r3, r7, #20
 800edcc:	4619      	mov	r1, r3
 800edce:	4812      	ldr	r0, [pc, #72]	; (800ee18 <HAL_PCD_MspInit+0xa4>)
 800edd0:	f7f4 fab0 	bl	8003334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800edd4:	4b0f      	ldr	r3, [pc, #60]	; (800ee14 <HAL_PCD_MspInit+0xa0>)
 800edd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edd8:	4a0e      	ldr	r2, [pc, #56]	; (800ee14 <HAL_PCD_MspInit+0xa0>)
 800edda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edde:	6353      	str	r3, [r2, #52]	; 0x34
 800ede0:	2300      	movs	r3, #0
 800ede2:	60fb      	str	r3, [r7, #12]
 800ede4:	4b0b      	ldr	r3, [pc, #44]	; (800ee14 <HAL_PCD_MspInit+0xa0>)
 800ede6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ede8:	4a0a      	ldr	r2, [pc, #40]	; (800ee14 <HAL_PCD_MspInit+0xa0>)
 800edea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800edee:	6453      	str	r3, [r2, #68]	; 0x44
 800edf0:	4b08      	ldr	r3, [pc, #32]	; (800ee14 <HAL_PCD_MspInit+0xa0>)
 800edf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800edf8:	60fb      	str	r3, [r7, #12]
 800edfa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800edfc:	2200      	movs	r2, #0
 800edfe:	2100      	movs	r1, #0
 800ee00:	2043      	movs	r0, #67	; 0x43
 800ee02:	f7f3 fec2 	bl	8002b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ee06:	2043      	movs	r0, #67	; 0x43
 800ee08:	f7f3 fedb 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ee0c:	bf00      	nop
 800ee0e:	3728      	adds	r7, #40	; 0x28
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}
 800ee14:	40023800 	.word	0x40023800
 800ee18:	40020000 	.word	0x40020000

0800ee1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b082      	sub	sp, #8
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ee30:	4619      	mov	r1, r3
 800ee32:	4610      	mov	r0, r2
 800ee34:	f7fc fa72 	bl	800b31c <USBD_LL_SetupStage>
}
 800ee38:	bf00      	nop
 800ee3a:	3708      	adds	r7, #8
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b082      	sub	sp, #8
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	460b      	mov	r3, r1
 800ee4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ee52:	78fa      	ldrb	r2, [r7, #3]
 800ee54:	6879      	ldr	r1, [r7, #4]
 800ee56:	4613      	mov	r3, r2
 800ee58:	00db      	lsls	r3, r3, #3
 800ee5a:	1a9b      	subs	r3, r3, r2
 800ee5c:	009b      	lsls	r3, r3, #2
 800ee5e:	440b      	add	r3, r1
 800ee60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ee64:	681a      	ldr	r2, [r3, #0]
 800ee66:	78fb      	ldrb	r3, [r7, #3]
 800ee68:	4619      	mov	r1, r3
 800ee6a:	f7fc faac 	bl	800b3c6 <USBD_LL_DataOutStage>
}
 800ee6e:	bf00      	nop
 800ee70:	3708      	adds	r7, #8
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}

0800ee76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee76:	b580      	push	{r7, lr}
 800ee78:	b082      	sub	sp, #8
 800ee7a:	af00      	add	r7, sp, #0
 800ee7c:	6078      	str	r0, [r7, #4]
 800ee7e:	460b      	mov	r3, r1
 800ee80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ee88:	78fa      	ldrb	r2, [r7, #3]
 800ee8a:	6879      	ldr	r1, [r7, #4]
 800ee8c:	4613      	mov	r3, r2
 800ee8e:	00db      	lsls	r3, r3, #3
 800ee90:	1a9b      	subs	r3, r3, r2
 800ee92:	009b      	lsls	r3, r3, #2
 800ee94:	440b      	add	r3, r1
 800ee96:	3348      	adds	r3, #72	; 0x48
 800ee98:	681a      	ldr	r2, [r3, #0]
 800ee9a:	78fb      	ldrb	r3, [r7, #3]
 800ee9c:	4619      	mov	r1, r3
 800ee9e:	f7fc faf5 	bl	800b48c <USBD_LL_DataInStage>
}
 800eea2:	bf00      	nop
 800eea4:	3708      	adds	r7, #8
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}

0800eeaa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eeaa:	b580      	push	{r7, lr}
 800eeac:	b082      	sub	sp, #8
 800eeae:	af00      	add	r7, sp, #0
 800eeb0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f7fc fc09 	bl	800b6d0 <USBD_LL_SOF>
}
 800eebe:	bf00      	nop
 800eec0:	3708      	adds	r7, #8
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}

0800eec6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eec6:	b580      	push	{r7, lr}
 800eec8:	b084      	sub	sp, #16
 800eeca:	af00      	add	r7, sp, #0
 800eecc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800eece:	2301      	movs	r3, #1
 800eed0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	68db      	ldr	r3, [r3, #12]
 800eed6:	2b02      	cmp	r3, #2
 800eed8:	d001      	beq.n	800eede <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800eeda:	f7f3 f8eb 	bl	80020b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800eee4:	7bfa      	ldrb	r2, [r7, #15]
 800eee6:	4611      	mov	r1, r2
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7fc fbb3 	bl	800b654 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7fc fb5f 	bl	800b5b8 <USBD_LL_Reset>
}
 800eefa:	bf00      	nop
 800eefc:	3710      	adds	r7, #16
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}
	...

0800ef04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b082      	sub	sp, #8
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7fc fbae 	bl	800b674 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	687a      	ldr	r2, [r7, #4]
 800ef24:	6812      	ldr	r2, [r2, #0]
 800ef26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ef2a:	f043 0301 	orr.w	r3, r3, #1
 800ef2e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6a1b      	ldr	r3, [r3, #32]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d005      	beq.n	800ef44 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ef38:	4b04      	ldr	r3, [pc, #16]	; (800ef4c <HAL_PCD_SuspendCallback+0x48>)
 800ef3a:	691b      	ldr	r3, [r3, #16]
 800ef3c:	4a03      	ldr	r2, [pc, #12]	; (800ef4c <HAL_PCD_SuspendCallback+0x48>)
 800ef3e:	f043 0306 	orr.w	r3, r3, #6
 800ef42:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ef44:	bf00      	nop
 800ef46:	3708      	adds	r7, #8
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}
 800ef4c:	e000ed00 	.word	0xe000ed00

0800ef50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b082      	sub	sp, #8
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f7fc fb9e 	bl	800b6a0 <USBD_LL_Resume>
}
 800ef64:	bf00      	nop
 800ef66:	3708      	adds	r7, #8
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd80      	pop	{r7, pc}

0800ef6c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b082      	sub	sp, #8
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
 800ef74:	460b      	mov	r3, r1
 800ef76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ef7e:	78fa      	ldrb	r2, [r7, #3]
 800ef80:	4611      	mov	r1, r2
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7fc fbec 	bl	800b760 <USBD_LL_IsoOUTIncomplete>
}
 800ef88:	bf00      	nop
 800ef8a:	3708      	adds	r7, #8
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}

0800ef90 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b082      	sub	sp, #8
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
 800ef98:	460b      	mov	r3, r1
 800ef9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800efa2:	78fa      	ldrb	r2, [r7, #3]
 800efa4:	4611      	mov	r1, r2
 800efa6:	4618      	mov	r0, r3
 800efa8:	f7fc fbb4 	bl	800b714 <USBD_LL_IsoINIncomplete>
}
 800efac:	bf00      	nop
 800efae:	3708      	adds	r7, #8
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}

0800efb4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b082      	sub	sp, #8
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7fc fbf2 	bl	800b7ac <USBD_LL_DevConnected>
}
 800efc8:	bf00      	nop
 800efca:	3708      	adds	r7, #8
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}

0800efd0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b082      	sub	sp, #8
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800efde:	4618      	mov	r0, r3
 800efe0:	f7fc fbef 	bl	800b7c2 <USBD_LL_DevDisconnected>
}
 800efe4:	bf00      	nop
 800efe6:	3708      	adds	r7, #8
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd80      	pop	{r7, pc}

0800efec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b082      	sub	sp, #8
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	781b      	ldrb	r3, [r3, #0]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d13c      	bne.n	800f076 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800effc:	4a20      	ldr	r2, [pc, #128]	; (800f080 <USBD_LL_Init+0x94>)
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	4a1e      	ldr	r2, [pc, #120]	; (800f080 <USBD_LL_Init+0x94>)
 800f008:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f00c:	4b1c      	ldr	r3, [pc, #112]	; (800f080 <USBD_LL_Init+0x94>)
 800f00e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f012:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f014:	4b1a      	ldr	r3, [pc, #104]	; (800f080 <USBD_LL_Init+0x94>)
 800f016:	2204      	movs	r2, #4
 800f018:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f01a:	4b19      	ldr	r3, [pc, #100]	; (800f080 <USBD_LL_Init+0x94>)
 800f01c:	2202      	movs	r2, #2
 800f01e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f020:	4b17      	ldr	r3, [pc, #92]	; (800f080 <USBD_LL_Init+0x94>)
 800f022:	2200      	movs	r2, #0
 800f024:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f026:	4b16      	ldr	r3, [pc, #88]	; (800f080 <USBD_LL_Init+0x94>)
 800f028:	2202      	movs	r2, #2
 800f02a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f02c:	4b14      	ldr	r3, [pc, #80]	; (800f080 <USBD_LL_Init+0x94>)
 800f02e:	2200      	movs	r2, #0
 800f030:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f032:	4b13      	ldr	r3, [pc, #76]	; (800f080 <USBD_LL_Init+0x94>)
 800f034:	2200      	movs	r2, #0
 800f036:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f038:	4b11      	ldr	r3, [pc, #68]	; (800f080 <USBD_LL_Init+0x94>)
 800f03a:	2200      	movs	r2, #0
 800f03c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f03e:	4b10      	ldr	r3, [pc, #64]	; (800f080 <USBD_LL_Init+0x94>)
 800f040:	2200      	movs	r2, #0
 800f042:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f044:	4b0e      	ldr	r3, [pc, #56]	; (800f080 <USBD_LL_Init+0x94>)
 800f046:	2200      	movs	r2, #0
 800f048:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f04a:	480d      	ldr	r0, [pc, #52]	; (800f080 <USBD_LL_Init+0x94>)
 800f04c:	f7f5 fabd 	bl	80045ca <HAL_PCD_Init>
 800f050:	4603      	mov	r3, r0
 800f052:	2b00      	cmp	r3, #0
 800f054:	d001      	beq.n	800f05a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f056:	f7f3 f82d 	bl	80020b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f05a:	2180      	movs	r1, #128	; 0x80
 800f05c:	4808      	ldr	r0, [pc, #32]	; (800f080 <USBD_LL_Init+0x94>)
 800f05e:	f7f6 fc1a 	bl	8005896 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f062:	2240      	movs	r2, #64	; 0x40
 800f064:	2100      	movs	r1, #0
 800f066:	4806      	ldr	r0, [pc, #24]	; (800f080 <USBD_LL_Init+0x94>)
 800f068:	f7f6 fbce 	bl	8005808 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f06c:	2280      	movs	r2, #128	; 0x80
 800f06e:	2101      	movs	r1, #1
 800f070:	4803      	ldr	r0, [pc, #12]	; (800f080 <USBD_LL_Init+0x94>)
 800f072:	f7f6 fbc9 	bl	8005808 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f076:	2300      	movs	r3, #0
}
 800f078:	4618      	mov	r0, r3
 800f07a:	3708      	adds	r7, #8
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}
 800f080:	20002e20 	.word	0x20002e20

0800f084 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b084      	sub	sp, #16
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f08c:	2300      	movs	r3, #0
 800f08e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f090:	2300      	movs	r3, #0
 800f092:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7f5 fbb2 	bl	8004804 <HAL_PCD_Start>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0a4:	7bfb      	ldrb	r3, [r7, #15]
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f000 f942 	bl	800f330 <USBD_Get_USB_Status>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3710      	adds	r7, #16
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}

0800f0ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f0ba:	b580      	push	{r7, lr}
 800f0bc:	b084      	sub	sp, #16
 800f0be:	af00      	add	r7, sp, #0
 800f0c0:	6078      	str	r0, [r7, #4]
 800f0c2:	4608      	mov	r0, r1
 800f0c4:	4611      	mov	r1, r2
 800f0c6:	461a      	mov	r2, r3
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	70fb      	strb	r3, [r7, #3]
 800f0cc:	460b      	mov	r3, r1
 800f0ce:	70bb      	strb	r3, [r7, #2]
 800f0d0:	4613      	mov	r3, r2
 800f0d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f0e2:	78bb      	ldrb	r3, [r7, #2]
 800f0e4:	883a      	ldrh	r2, [r7, #0]
 800f0e6:	78f9      	ldrb	r1, [r7, #3]
 800f0e8:	f7f5 ff96 	bl	8005018 <HAL_PCD_EP_Open>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0f0:	7bfb      	ldrb	r3, [r7, #15]
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f000 f91c 	bl	800f330 <USBD_Get_USB_Status>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3710      	adds	r7, #16
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}

0800f106 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f106:	b580      	push	{r7, lr}
 800f108:	b084      	sub	sp, #16
 800f10a:	af00      	add	r7, sp, #0
 800f10c:	6078      	str	r0, [r7, #4]
 800f10e:	460b      	mov	r3, r1
 800f110:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f112:	2300      	movs	r3, #0
 800f114:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f116:	2300      	movs	r3, #0
 800f118:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f120:	78fa      	ldrb	r2, [r7, #3]
 800f122:	4611      	mov	r1, r2
 800f124:	4618      	mov	r0, r3
 800f126:	f7f5 ffdf 	bl	80050e8 <HAL_PCD_EP_Close>
 800f12a:	4603      	mov	r3, r0
 800f12c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f12e:	7bfb      	ldrb	r3, [r7, #15]
 800f130:	4618      	mov	r0, r3
 800f132:	f000 f8fd 	bl	800f330 <USBD_Get_USB_Status>
 800f136:	4603      	mov	r3, r0
 800f138:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f13a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3710      	adds	r7, #16
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}

0800f144 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b084      	sub	sp, #16
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	460b      	mov	r3, r1
 800f14e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f150:	2300      	movs	r3, #0
 800f152:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f154:	2300      	movs	r3, #0
 800f156:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f15e:	78fa      	ldrb	r2, [r7, #3]
 800f160:	4611      	mov	r1, r2
 800f162:	4618      	mov	r0, r3
 800f164:	f7f6 f8b7 	bl	80052d6 <HAL_PCD_EP_SetStall>
 800f168:	4603      	mov	r3, r0
 800f16a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f16c:	7bfb      	ldrb	r3, [r7, #15]
 800f16e:	4618      	mov	r0, r3
 800f170:	f000 f8de 	bl	800f330 <USBD_Get_USB_Status>
 800f174:	4603      	mov	r3, r0
 800f176:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f178:	7bbb      	ldrb	r3, [r7, #14]
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3710      	adds	r7, #16
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}

0800f182 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f182:	b580      	push	{r7, lr}
 800f184:	b084      	sub	sp, #16
 800f186:	af00      	add	r7, sp, #0
 800f188:	6078      	str	r0, [r7, #4]
 800f18a:	460b      	mov	r3, r1
 800f18c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f18e:	2300      	movs	r3, #0
 800f190:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f192:	2300      	movs	r3, #0
 800f194:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f19c:	78fa      	ldrb	r2, [r7, #3]
 800f19e:	4611      	mov	r1, r2
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f7f6 f8fc 	bl	800539e <HAL_PCD_EP_ClrStall>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1aa:	7bfb      	ldrb	r3, [r7, #15]
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f000 f8bf 	bl	800f330 <USBD_Get_USB_Status>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	3710      	adds	r7, #16
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}

0800f1c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b085      	sub	sp, #20
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
 800f1c8:	460b      	mov	r3, r1
 800f1ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f1d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f1d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	da0b      	bge.n	800f1f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f1dc:	78fb      	ldrb	r3, [r7, #3]
 800f1de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f1e2:	68f9      	ldr	r1, [r7, #12]
 800f1e4:	4613      	mov	r3, r2
 800f1e6:	00db      	lsls	r3, r3, #3
 800f1e8:	1a9b      	subs	r3, r3, r2
 800f1ea:	009b      	lsls	r3, r3, #2
 800f1ec:	440b      	add	r3, r1
 800f1ee:	333e      	adds	r3, #62	; 0x3e
 800f1f0:	781b      	ldrb	r3, [r3, #0]
 800f1f2:	e00b      	b.n	800f20c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f1f4:	78fb      	ldrb	r3, [r7, #3]
 800f1f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f1fa:	68f9      	ldr	r1, [r7, #12]
 800f1fc:	4613      	mov	r3, r2
 800f1fe:	00db      	lsls	r3, r3, #3
 800f200:	1a9b      	subs	r3, r3, r2
 800f202:	009b      	lsls	r3, r3, #2
 800f204:	440b      	add	r3, r1
 800f206:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f20a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3714      	adds	r7, #20
 800f210:	46bd      	mov	sp, r7
 800f212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f216:	4770      	bx	lr

0800f218 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b084      	sub	sp, #16
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
 800f220:	460b      	mov	r3, r1
 800f222:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f224:	2300      	movs	r3, #0
 800f226:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f228:	2300      	movs	r3, #0
 800f22a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f232:	78fa      	ldrb	r2, [r7, #3]
 800f234:	4611      	mov	r1, r2
 800f236:	4618      	mov	r0, r3
 800f238:	f7f5 fec9 	bl	8004fce <HAL_PCD_SetAddress>
 800f23c:	4603      	mov	r3, r0
 800f23e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f240:	7bfb      	ldrb	r3, [r7, #15]
 800f242:	4618      	mov	r0, r3
 800f244:	f000 f874 	bl	800f330 <USBD_Get_USB_Status>
 800f248:	4603      	mov	r3, r0
 800f24a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f24c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f24e:	4618      	mov	r0, r3
 800f250:	3710      	adds	r7, #16
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}

0800f256 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f256:	b580      	push	{r7, lr}
 800f258:	b086      	sub	sp, #24
 800f25a:	af00      	add	r7, sp, #0
 800f25c:	60f8      	str	r0, [r7, #12]
 800f25e:	607a      	str	r2, [r7, #4]
 800f260:	603b      	str	r3, [r7, #0]
 800f262:	460b      	mov	r3, r1
 800f264:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f266:	2300      	movs	r3, #0
 800f268:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f26a:	2300      	movs	r3, #0
 800f26c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f274:	7af9      	ldrb	r1, [r7, #11]
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	687a      	ldr	r2, [r7, #4]
 800f27a:	f7f5 ffe2 	bl	8005242 <HAL_PCD_EP_Transmit>
 800f27e:	4603      	mov	r3, r0
 800f280:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f282:	7dfb      	ldrb	r3, [r7, #23]
 800f284:	4618      	mov	r0, r3
 800f286:	f000 f853 	bl	800f330 <USBD_Get_USB_Status>
 800f28a:	4603      	mov	r3, r0
 800f28c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f28e:	7dbb      	ldrb	r3, [r7, #22]
}
 800f290:	4618      	mov	r0, r3
 800f292:	3718      	adds	r7, #24
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}

0800f298 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b086      	sub	sp, #24
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	60f8      	str	r0, [r7, #12]
 800f2a0:	607a      	str	r2, [r7, #4]
 800f2a2:	603b      	str	r3, [r7, #0]
 800f2a4:	460b      	mov	r3, r1
 800f2a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f2b6:	7af9      	ldrb	r1, [r7, #11]
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	687a      	ldr	r2, [r7, #4]
 800f2bc:	f7f5 ff5e 	bl	800517c <HAL_PCD_EP_Receive>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2c4:	7dfb      	ldrb	r3, [r7, #23]
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f000 f832 	bl	800f330 <USBD_Get_USB_Status>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f2d0:	7dbb      	ldrb	r3, [r7, #22]
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3718      	adds	r7, #24
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}

0800f2da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f2da:	b580      	push	{r7, lr}
 800f2dc:	b082      	sub	sp, #8
 800f2de:	af00      	add	r7, sp, #0
 800f2e0:	6078      	str	r0, [r7, #4]
 800f2e2:	460b      	mov	r3, r1
 800f2e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f2ec:	78fa      	ldrb	r2, [r7, #3]
 800f2ee:	4611      	mov	r1, r2
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7f5 ff8e 	bl	8005212 <HAL_PCD_EP_GetRxCount>
 800f2f6:	4603      	mov	r3, r0
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3708      	adds	r7, #8
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}

0800f300 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f300:	b480      	push	{r7}
 800f302:	b083      	sub	sp, #12
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f308:	4b03      	ldr	r3, [pc, #12]	; (800f318 <USBD_static_malloc+0x18>)
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	370c      	adds	r7, #12
 800f30e:	46bd      	mov	sp, r7
 800f310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f314:	4770      	bx	lr
 800f316:	bf00      	nop
 800f318:	20000bb8 	.word	0x20000bb8

0800f31c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f31c:	b480      	push	{r7}
 800f31e:	b083      	sub	sp, #12
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]

}
 800f324:	bf00      	nop
 800f326:	370c      	adds	r7, #12
 800f328:	46bd      	mov	sp, r7
 800f32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32e:	4770      	bx	lr

0800f330 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f330:	b480      	push	{r7}
 800f332:	b085      	sub	sp, #20
 800f334:	af00      	add	r7, sp, #0
 800f336:	4603      	mov	r3, r0
 800f338:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f33a:	2300      	movs	r3, #0
 800f33c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f33e:	79fb      	ldrb	r3, [r7, #7]
 800f340:	2b03      	cmp	r3, #3
 800f342:	d817      	bhi.n	800f374 <USBD_Get_USB_Status+0x44>
 800f344:	a201      	add	r2, pc, #4	; (adr r2, 800f34c <USBD_Get_USB_Status+0x1c>)
 800f346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f34a:	bf00      	nop
 800f34c:	0800f35d 	.word	0x0800f35d
 800f350:	0800f363 	.word	0x0800f363
 800f354:	0800f369 	.word	0x0800f369
 800f358:	0800f36f 	.word	0x0800f36f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f35c:	2300      	movs	r3, #0
 800f35e:	73fb      	strb	r3, [r7, #15]
    break;
 800f360:	e00b      	b.n	800f37a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f362:	2303      	movs	r3, #3
 800f364:	73fb      	strb	r3, [r7, #15]
    break;
 800f366:	e008      	b.n	800f37a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f368:	2301      	movs	r3, #1
 800f36a:	73fb      	strb	r3, [r7, #15]
    break;
 800f36c:	e005      	b.n	800f37a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f36e:	2303      	movs	r3, #3
 800f370:	73fb      	strb	r3, [r7, #15]
    break;
 800f372:	e002      	b.n	800f37a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f374:	2303      	movs	r3, #3
 800f376:	73fb      	strb	r3, [r7, #15]
    break;
 800f378:	bf00      	nop
  }
  return usb_status;
 800f37a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	3714      	adds	r7, #20
 800f380:	46bd      	mov	sp, r7
 800f382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f386:	4770      	bx	lr

0800f388 <powf>:
 800f388:	b508      	push	{r3, lr}
 800f38a:	ed2d 8b04 	vpush	{d8-d9}
 800f38e:	eeb0 9a40 	vmov.f32	s18, s0
 800f392:	eef0 8a60 	vmov.f32	s17, s1
 800f396:	f000 f88f 	bl	800f4b8 <__ieee754_powf>
 800f39a:	4b43      	ldr	r3, [pc, #268]	; (800f4a8 <powf+0x120>)
 800f39c:	f993 3000 	ldrsb.w	r3, [r3]
 800f3a0:	3301      	adds	r3, #1
 800f3a2:	eeb0 8a40 	vmov.f32	s16, s0
 800f3a6:	d012      	beq.n	800f3ce <powf+0x46>
 800f3a8:	eef4 8a68 	vcmp.f32	s17, s17
 800f3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3b0:	d60d      	bvs.n	800f3ce <powf+0x46>
 800f3b2:	eeb4 9a49 	vcmp.f32	s18, s18
 800f3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ba:	d70d      	bvc.n	800f3d8 <powf+0x50>
 800f3bc:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f3c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f3c8:	bf08      	it	eq
 800f3ca:	eeb0 8a67 	vmoveq.f32	s16, s15
 800f3ce:	eeb0 0a48 	vmov.f32	s0, s16
 800f3d2:	ecbd 8b04 	vpop	{d8-d9}
 800f3d6:	bd08      	pop	{r3, pc}
 800f3d8:	eddf 9a34 	vldr	s19, [pc, #208]	; 800f4ac <powf+0x124>
 800f3dc:	eeb4 9a69 	vcmp.f32	s18, s19
 800f3e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3e4:	d116      	bne.n	800f414 <powf+0x8c>
 800f3e6:	eef4 8a69 	vcmp.f32	s17, s19
 800f3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ee:	d057      	beq.n	800f4a0 <powf+0x118>
 800f3f0:	eeb0 0a68 	vmov.f32	s0, s17
 800f3f4:	f000 fb2a 	bl	800fa4c <finitef>
 800f3f8:	2800      	cmp	r0, #0
 800f3fa:	d0e8      	beq.n	800f3ce <powf+0x46>
 800f3fc:	eef4 8ae9 	vcmpe.f32	s17, s19
 800f400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f404:	d5e3      	bpl.n	800f3ce <powf+0x46>
 800f406:	f000 fc03 	bl	800fc10 <__errno>
 800f40a:	2321      	movs	r3, #33	; 0x21
 800f40c:	6003      	str	r3, [r0, #0]
 800f40e:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800f4b0 <powf+0x128>
 800f412:	e7dc      	b.n	800f3ce <powf+0x46>
 800f414:	f000 fb1a 	bl	800fa4c <finitef>
 800f418:	bb50      	cbnz	r0, 800f470 <powf+0xe8>
 800f41a:	eeb0 0a49 	vmov.f32	s0, s18
 800f41e:	f000 fb15 	bl	800fa4c <finitef>
 800f422:	b328      	cbz	r0, 800f470 <powf+0xe8>
 800f424:	eeb0 0a68 	vmov.f32	s0, s17
 800f428:	f000 fb10 	bl	800fa4c <finitef>
 800f42c:	b300      	cbz	r0, 800f470 <powf+0xe8>
 800f42e:	eeb4 8a48 	vcmp.f32	s16, s16
 800f432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f436:	d706      	bvc.n	800f446 <powf+0xbe>
 800f438:	f000 fbea 	bl	800fc10 <__errno>
 800f43c:	2321      	movs	r3, #33	; 0x21
 800f43e:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800f442:	6003      	str	r3, [r0, #0]
 800f444:	e7c3      	b.n	800f3ce <powf+0x46>
 800f446:	f000 fbe3 	bl	800fc10 <__errno>
 800f44a:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800f44e:	2322      	movs	r3, #34	; 0x22
 800f450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f454:	6003      	str	r3, [r0, #0]
 800f456:	d508      	bpl.n	800f46a <powf+0xe2>
 800f458:	eeb0 0a68 	vmov.f32	s0, s17
 800f45c:	f000 fb0a 	bl	800fa74 <rintf>
 800f460:	eeb4 0a68 	vcmp.f32	s0, s17
 800f464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f468:	d1d1      	bne.n	800f40e <powf+0x86>
 800f46a:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800f4b4 <powf+0x12c>
 800f46e:	e7ae      	b.n	800f3ce <powf+0x46>
 800f470:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f478:	d1a9      	bne.n	800f3ce <powf+0x46>
 800f47a:	eeb0 0a49 	vmov.f32	s0, s18
 800f47e:	f000 fae5 	bl	800fa4c <finitef>
 800f482:	2800      	cmp	r0, #0
 800f484:	d0a3      	beq.n	800f3ce <powf+0x46>
 800f486:	eeb0 0a68 	vmov.f32	s0, s17
 800f48a:	f000 fadf 	bl	800fa4c <finitef>
 800f48e:	2800      	cmp	r0, #0
 800f490:	d09d      	beq.n	800f3ce <powf+0x46>
 800f492:	f000 fbbd 	bl	800fc10 <__errno>
 800f496:	2322      	movs	r3, #34	; 0x22
 800f498:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800f4ac <powf+0x124>
 800f49c:	6003      	str	r3, [r0, #0]
 800f49e:	e796      	b.n	800f3ce <powf+0x46>
 800f4a0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f4a4:	e793      	b.n	800f3ce <powf+0x46>
 800f4a6:	bf00      	nop
 800f4a8:	2000017e 	.word	0x2000017e
 800f4ac:	00000000 	.word	0x00000000
 800f4b0:	ff800000 	.word	0xff800000
 800f4b4:	7f800000 	.word	0x7f800000

0800f4b8 <__ieee754_powf>:
 800f4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4bc:	ee10 5a90 	vmov	r5, s1
 800f4c0:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800f4c4:	ed2d 8b02 	vpush	{d8}
 800f4c8:	eeb0 8a40 	vmov.f32	s16, s0
 800f4cc:	eef0 8a60 	vmov.f32	s17, s1
 800f4d0:	f000 8291 	beq.w	800f9f6 <__ieee754_powf+0x53e>
 800f4d4:	ee10 8a10 	vmov	r8, s0
 800f4d8:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800f4dc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800f4e0:	dc06      	bgt.n	800f4f0 <__ieee754_powf+0x38>
 800f4e2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800f4e6:	dd0a      	ble.n	800f4fe <__ieee754_powf+0x46>
 800f4e8:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800f4ec:	f000 8283 	beq.w	800f9f6 <__ieee754_powf+0x53e>
 800f4f0:	ecbd 8b02 	vpop	{d8}
 800f4f4:	48d8      	ldr	r0, [pc, #864]	; (800f858 <__ieee754_powf+0x3a0>)
 800f4f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f4fa:	f000 bab5 	b.w	800fa68 <nanf>
 800f4fe:	f1b8 0f00 	cmp.w	r8, #0
 800f502:	da1f      	bge.n	800f544 <__ieee754_powf+0x8c>
 800f504:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800f508:	da2e      	bge.n	800f568 <__ieee754_powf+0xb0>
 800f50a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800f50e:	f2c0 827b 	blt.w	800fa08 <__ieee754_powf+0x550>
 800f512:	15fb      	asrs	r3, r7, #23
 800f514:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800f518:	fa47 f603 	asr.w	r6, r7, r3
 800f51c:	fa06 f303 	lsl.w	r3, r6, r3
 800f520:	42bb      	cmp	r3, r7
 800f522:	f040 8271 	bne.w	800fa08 <__ieee754_powf+0x550>
 800f526:	f006 0601 	and.w	r6, r6, #1
 800f52a:	f1c6 0602 	rsb	r6, r6, #2
 800f52e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800f532:	d120      	bne.n	800f576 <__ieee754_powf+0xbe>
 800f534:	2d00      	cmp	r5, #0
 800f536:	f280 8264 	bge.w	800fa02 <__ieee754_powf+0x54a>
 800f53a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f53e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f542:	e00d      	b.n	800f560 <__ieee754_powf+0xa8>
 800f544:	2600      	movs	r6, #0
 800f546:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800f54a:	d1f0      	bne.n	800f52e <__ieee754_powf+0x76>
 800f54c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800f550:	f000 8251 	beq.w	800f9f6 <__ieee754_powf+0x53e>
 800f554:	dd0a      	ble.n	800f56c <__ieee754_powf+0xb4>
 800f556:	2d00      	cmp	r5, #0
 800f558:	f280 8250 	bge.w	800f9fc <__ieee754_powf+0x544>
 800f55c:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800f85c <__ieee754_powf+0x3a4>
 800f560:	ecbd 8b02 	vpop	{d8}
 800f564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f568:	2602      	movs	r6, #2
 800f56a:	e7ec      	b.n	800f546 <__ieee754_powf+0x8e>
 800f56c:	2d00      	cmp	r5, #0
 800f56e:	daf5      	bge.n	800f55c <__ieee754_powf+0xa4>
 800f570:	eeb1 0a68 	vneg.f32	s0, s17
 800f574:	e7f4      	b.n	800f560 <__ieee754_powf+0xa8>
 800f576:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800f57a:	d102      	bne.n	800f582 <__ieee754_powf+0xca>
 800f57c:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f580:	e7ee      	b.n	800f560 <__ieee754_powf+0xa8>
 800f582:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800f586:	eeb0 0a48 	vmov.f32	s0, s16
 800f58a:	d108      	bne.n	800f59e <__ieee754_powf+0xe6>
 800f58c:	f1b8 0f00 	cmp.w	r8, #0
 800f590:	db05      	blt.n	800f59e <__ieee754_powf+0xe6>
 800f592:	ecbd 8b02 	vpop	{d8}
 800f596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f59a:	f000 ba4d 	b.w	800fa38 <__ieee754_sqrtf>
 800f59e:	f000 fa4e 	bl	800fa3e <fabsf>
 800f5a2:	b124      	cbz	r4, 800f5ae <__ieee754_powf+0xf6>
 800f5a4:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800f5a8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800f5ac:	d117      	bne.n	800f5de <__ieee754_powf+0x126>
 800f5ae:	2d00      	cmp	r5, #0
 800f5b0:	bfbc      	itt	lt
 800f5b2:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800f5b6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f5ba:	f1b8 0f00 	cmp.w	r8, #0
 800f5be:	dacf      	bge.n	800f560 <__ieee754_powf+0xa8>
 800f5c0:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800f5c4:	ea54 0306 	orrs.w	r3, r4, r6
 800f5c8:	d104      	bne.n	800f5d4 <__ieee754_powf+0x11c>
 800f5ca:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f5ce:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f5d2:	e7c5      	b.n	800f560 <__ieee754_powf+0xa8>
 800f5d4:	2e01      	cmp	r6, #1
 800f5d6:	d1c3      	bne.n	800f560 <__ieee754_powf+0xa8>
 800f5d8:	eeb1 0a40 	vneg.f32	s0, s0
 800f5dc:	e7c0      	b.n	800f560 <__ieee754_powf+0xa8>
 800f5de:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800f5e2:	3801      	subs	r0, #1
 800f5e4:	ea56 0300 	orrs.w	r3, r6, r0
 800f5e8:	d104      	bne.n	800f5f4 <__ieee754_powf+0x13c>
 800f5ea:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f5ee:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f5f2:	e7b5      	b.n	800f560 <__ieee754_powf+0xa8>
 800f5f4:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800f5f8:	dd6b      	ble.n	800f6d2 <__ieee754_powf+0x21a>
 800f5fa:	4b99      	ldr	r3, [pc, #612]	; (800f860 <__ieee754_powf+0x3a8>)
 800f5fc:	429c      	cmp	r4, r3
 800f5fe:	dc06      	bgt.n	800f60e <__ieee754_powf+0x156>
 800f600:	2d00      	cmp	r5, #0
 800f602:	daab      	bge.n	800f55c <__ieee754_powf+0xa4>
 800f604:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800f864 <__ieee754_powf+0x3ac>
 800f608:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f60c:	e7a8      	b.n	800f560 <__ieee754_powf+0xa8>
 800f60e:	4b96      	ldr	r3, [pc, #600]	; (800f868 <__ieee754_powf+0x3b0>)
 800f610:	429c      	cmp	r4, r3
 800f612:	dd02      	ble.n	800f61a <__ieee754_powf+0x162>
 800f614:	2d00      	cmp	r5, #0
 800f616:	dcf5      	bgt.n	800f604 <__ieee754_powf+0x14c>
 800f618:	e7a0      	b.n	800f55c <__ieee754_powf+0xa4>
 800f61a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f61e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f622:	eddf 6a92 	vldr	s13, [pc, #584]	; 800f86c <__ieee754_powf+0x3b4>
 800f626:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800f62a:	eee0 6a67 	vfms.f32	s13, s0, s15
 800f62e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f632:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800f636:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f63a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f63e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800f870 <__ieee754_powf+0x3b8>
 800f642:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800f646:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800f874 <__ieee754_powf+0x3bc>
 800f64a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f64e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800f878 <__ieee754_powf+0x3c0>
 800f652:	eef0 6a67 	vmov.f32	s13, s15
 800f656:	eee0 6a07 	vfma.f32	s13, s0, s14
 800f65a:	ee16 3a90 	vmov	r3, s13
 800f65e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f662:	f023 030f 	bic.w	r3, r3, #15
 800f666:	ee00 3a90 	vmov	s1, r3
 800f66a:	eee0 0a47 	vfms.f32	s1, s0, s14
 800f66e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f672:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800f676:	f025 050f 	bic.w	r5, r5, #15
 800f67a:	ee07 5a10 	vmov	s14, r5
 800f67e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800f682:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800f686:	ee07 3a90 	vmov	s15, r3
 800f68a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800f68e:	3e01      	subs	r6, #1
 800f690:	ea56 0200 	orrs.w	r2, r6, r0
 800f694:	ee07 5a10 	vmov	s14, r5
 800f698:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f69c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f6a0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800f6a4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800f6a8:	ee17 4a10 	vmov	r4, s14
 800f6ac:	bf08      	it	eq
 800f6ae:	eeb0 8a40 	vmoveq.f32	s16, s0
 800f6b2:	2c00      	cmp	r4, #0
 800f6b4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f6b8:	f340 8184 	ble.w	800f9c4 <__ieee754_powf+0x50c>
 800f6bc:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800f6c0:	f340 80fc 	ble.w	800f8bc <__ieee754_powf+0x404>
 800f6c4:	eddf 7a67 	vldr	s15, [pc, #412]	; 800f864 <__ieee754_powf+0x3ac>
 800f6c8:	ee28 0a27 	vmul.f32	s0, s16, s15
 800f6cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f6d0:	e746      	b.n	800f560 <__ieee754_powf+0xa8>
 800f6d2:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800f6d6:	bf01      	itttt	eq
 800f6d8:	eddf 7a68 	vldreq	s15, [pc, #416]	; 800f87c <__ieee754_powf+0x3c4>
 800f6dc:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800f6e0:	f06f 0217 	mvneq.w	r2, #23
 800f6e4:	ee17 4a90 	vmoveq	r4, s15
 800f6e8:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800f6ec:	bf18      	it	ne
 800f6ee:	2200      	movne	r2, #0
 800f6f0:	3b7f      	subs	r3, #127	; 0x7f
 800f6f2:	4413      	add	r3, r2
 800f6f4:	4a62      	ldr	r2, [pc, #392]	; (800f880 <__ieee754_powf+0x3c8>)
 800f6f6:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800f6fa:	4294      	cmp	r4, r2
 800f6fc:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800f700:	dd06      	ble.n	800f710 <__ieee754_powf+0x258>
 800f702:	4a60      	ldr	r2, [pc, #384]	; (800f884 <__ieee754_powf+0x3cc>)
 800f704:	4294      	cmp	r4, r2
 800f706:	f340 80a4 	ble.w	800f852 <__ieee754_powf+0x39a>
 800f70a:	3301      	adds	r3, #1
 800f70c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f710:	2400      	movs	r4, #0
 800f712:	4a5d      	ldr	r2, [pc, #372]	; (800f888 <__ieee754_powf+0x3d0>)
 800f714:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800f718:	ee07 1a90 	vmov	s15, r1
 800f71c:	ed92 7a00 	vldr	s14, [r2]
 800f720:	4a5a      	ldr	r2, [pc, #360]	; (800f88c <__ieee754_powf+0x3d4>)
 800f722:	ee37 6a27 	vadd.f32	s12, s14, s15
 800f726:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f72a:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800f72e:	1049      	asrs	r1, r1, #1
 800f730:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800f734:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800f738:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800f73c:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800f740:	ee06 1a10 	vmov	s12, r1
 800f744:	ee65 4a26 	vmul.f32	s9, s10, s13
 800f748:	ee36 7a47 	vsub.f32	s14, s12, s14
 800f74c:	ee14 7a90 	vmov	r7, s9
 800f750:	4017      	ands	r7, r2
 800f752:	ee05 7a90 	vmov	s11, r7
 800f756:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800f75a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f75e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800f890 <__ieee754_powf+0x3d8>
 800f762:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800f766:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800f76a:	ee25 6a26 	vmul.f32	s12, s10, s13
 800f76e:	eddf 6a49 	vldr	s13, [pc, #292]	; 800f894 <__ieee754_powf+0x3dc>
 800f772:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f776:	eddf 6a48 	vldr	s13, [pc, #288]	; 800f898 <__ieee754_powf+0x3e0>
 800f77a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f77e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800f86c <__ieee754_powf+0x3b4>
 800f782:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f786:	eddf 6a45 	vldr	s13, [pc, #276]	; 800f89c <__ieee754_powf+0x3e4>
 800f78a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f78e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800f8a0 <__ieee754_powf+0x3e8>
 800f792:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f796:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800f79a:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800f79e:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f7a2:	eee5 6a07 	vfma.f32	s13, s10, s14
 800f7a6:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800f7aa:	eef0 7a45 	vmov.f32	s15, s10
 800f7ae:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800f7b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f7b6:	ee17 1a90 	vmov	r1, s15
 800f7ba:	4011      	ands	r1, r2
 800f7bc:	ee07 1a90 	vmov	s15, r1
 800f7c0:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800f7c4:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800f7c8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f7cc:	ee27 7a24 	vmul.f32	s14, s14, s9
 800f7d0:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f7d4:	eeb0 6a47 	vmov.f32	s12, s14
 800f7d8:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800f7dc:	ee16 1a10 	vmov	r1, s12
 800f7e0:	4011      	ands	r1, r2
 800f7e2:	ee06 1a90 	vmov	s13, r1
 800f7e6:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800f7ea:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800f8a4 <__ieee754_powf+0x3ec>
 800f7ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800f8a8 <__ieee754_powf+0x3f0>
 800f7f2:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f7f6:	ee06 1a10 	vmov	s12, r1
 800f7fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f7fe:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800f8ac <__ieee754_powf+0x3f4>
 800f802:	492b      	ldr	r1, [pc, #172]	; (800f8b0 <__ieee754_powf+0x3f8>)
 800f804:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f808:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f80c:	edd1 7a00 	vldr	s15, [r1]
 800f810:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f814:	ee07 3a90 	vmov	s15, r3
 800f818:	4b26      	ldr	r3, [pc, #152]	; (800f8b4 <__ieee754_powf+0x3fc>)
 800f81a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f81e:	eef0 7a47 	vmov.f32	s15, s14
 800f822:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f826:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f82a:	edd4 0a00 	vldr	s1, [r4]
 800f82e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800f832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f836:	ee17 3a90 	vmov	r3, s15
 800f83a:	4013      	ands	r3, r2
 800f83c:	ee07 3a90 	vmov	s15, r3
 800f840:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800f844:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800f848:	eee6 6a65 	vfms.f32	s13, s12, s11
 800f84c:	ee77 7a66 	vsub.f32	s15, s14, s13
 800f850:	e70f      	b.n	800f672 <__ieee754_powf+0x1ba>
 800f852:	2401      	movs	r4, #1
 800f854:	e75d      	b.n	800f712 <__ieee754_powf+0x25a>
 800f856:	bf00      	nop
 800f858:	08012ec0 	.word	0x08012ec0
 800f85c:	00000000 	.word	0x00000000
 800f860:	3f7ffff7 	.word	0x3f7ffff7
 800f864:	7149f2ca 	.word	0x7149f2ca
 800f868:	3f800007 	.word	0x3f800007
 800f86c:	3eaaaaab 	.word	0x3eaaaaab
 800f870:	3fb8aa3b 	.word	0x3fb8aa3b
 800f874:	36eca570 	.word	0x36eca570
 800f878:	3fb8aa00 	.word	0x3fb8aa00
 800f87c:	4b800000 	.word	0x4b800000
 800f880:	001cc471 	.word	0x001cc471
 800f884:	005db3d6 	.word	0x005db3d6
 800f888:	08012c2c 	.word	0x08012c2c
 800f88c:	fffff000 	.word	0xfffff000
 800f890:	3e6c3255 	.word	0x3e6c3255
 800f894:	3e53f142 	.word	0x3e53f142
 800f898:	3e8ba305 	.word	0x3e8ba305
 800f89c:	3edb6db7 	.word	0x3edb6db7
 800f8a0:	3f19999a 	.word	0x3f19999a
 800f8a4:	3f76384f 	.word	0x3f76384f
 800f8a8:	3f763800 	.word	0x3f763800
 800f8ac:	369dc3a0 	.word	0x369dc3a0
 800f8b0:	08012c3c 	.word	0x08012c3c
 800f8b4:	08012c34 	.word	0x08012c34
 800f8b8:	3338aa3c 	.word	0x3338aa3c
 800f8bc:	f040 8092 	bne.w	800f9e4 <__ieee754_powf+0x52c>
 800f8c0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800f8b8 <__ieee754_powf+0x400>
 800f8c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f8c8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800f8cc:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8d4:	f73f aef6 	bgt.w	800f6c4 <__ieee754_powf+0x20c>
 800f8d8:	15db      	asrs	r3, r3, #23
 800f8da:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800f8de:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f8e2:	4103      	asrs	r3, r0
 800f8e4:	4423      	add	r3, r4
 800f8e6:	4949      	ldr	r1, [pc, #292]	; (800fa0c <__ieee754_powf+0x554>)
 800f8e8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f8ec:	3a7f      	subs	r2, #127	; 0x7f
 800f8ee:	4111      	asrs	r1, r2
 800f8f0:	ea23 0101 	bic.w	r1, r3, r1
 800f8f4:	ee07 1a10 	vmov	s14, r1
 800f8f8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800f8fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800f900:	f1c2 0217 	rsb	r2, r2, #23
 800f904:	4110      	asrs	r0, r2
 800f906:	2c00      	cmp	r4, #0
 800f908:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f90c:	bfb8      	it	lt
 800f90e:	4240      	neglt	r0, r0
 800f910:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800f914:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800fa10 <__ieee754_powf+0x558>
 800f918:	ee17 3a10 	vmov	r3, s14
 800f91c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f920:	f023 030f 	bic.w	r3, r3, #15
 800f924:	ee07 3a10 	vmov	s14, r3
 800f928:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f92c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800f930:	eddf 7a38 	vldr	s15, [pc, #224]	; 800fa14 <__ieee754_powf+0x55c>
 800f934:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f938:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800f93c:	eddf 6a36 	vldr	s13, [pc, #216]	; 800fa18 <__ieee754_powf+0x560>
 800f940:	eeb0 0a67 	vmov.f32	s0, s15
 800f944:	eea7 0a26 	vfma.f32	s0, s14, s13
 800f948:	eeb0 6a40 	vmov.f32	s12, s0
 800f94c:	eea7 6a66 	vfms.f32	s12, s14, s13
 800f950:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f954:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f958:	eddf 6a30 	vldr	s13, [pc, #192]	; 800fa1c <__ieee754_powf+0x564>
 800f95c:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800fa20 <__ieee754_powf+0x568>
 800f960:	eea7 6a26 	vfma.f32	s12, s14, s13
 800f964:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800fa24 <__ieee754_powf+0x56c>
 800f968:	eee6 6a07 	vfma.f32	s13, s12, s14
 800f96c:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800fa28 <__ieee754_powf+0x570>
 800f970:	eea6 6a87 	vfma.f32	s12, s13, s14
 800f974:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800fa2c <__ieee754_powf+0x574>
 800f978:	eee6 6a07 	vfma.f32	s13, s12, s14
 800f97c:	eeb0 6a40 	vmov.f32	s12, s0
 800f980:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800f984:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f988:	eeb0 7a46 	vmov.f32	s14, s12
 800f98c:	ee77 6a66 	vsub.f32	s13, s14, s13
 800f990:	ee20 6a06 	vmul.f32	s12, s0, s12
 800f994:	eee0 7a27 	vfma.f32	s15, s0, s15
 800f998:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800f99c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f9a0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f9a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f9a8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f9ac:	ee10 3a10 	vmov	r3, s0
 800f9b0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800f9b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f9b8:	da1a      	bge.n	800f9f0 <__ieee754_powf+0x538>
 800f9ba:	f000 f8b7 	bl	800fb2c <scalbnf>
 800f9be:	ee20 0a08 	vmul.f32	s0, s0, s16
 800f9c2:	e5cd      	b.n	800f560 <__ieee754_powf+0xa8>
 800f9c4:	4a1a      	ldr	r2, [pc, #104]	; (800fa30 <__ieee754_powf+0x578>)
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	dd02      	ble.n	800f9d0 <__ieee754_powf+0x518>
 800f9ca:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800fa34 <__ieee754_powf+0x57c>
 800f9ce:	e67b      	b.n	800f6c8 <__ieee754_powf+0x210>
 800f9d0:	d108      	bne.n	800f9e4 <__ieee754_powf+0x52c>
 800f9d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f9d6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800f9da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9de:	f6ff af7b 	blt.w	800f8d8 <__ieee754_powf+0x420>
 800f9e2:	e7f2      	b.n	800f9ca <__ieee754_powf+0x512>
 800f9e4:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800f9e8:	f73f af76 	bgt.w	800f8d8 <__ieee754_powf+0x420>
 800f9ec:	2000      	movs	r0, #0
 800f9ee:	e78f      	b.n	800f910 <__ieee754_powf+0x458>
 800f9f0:	ee00 3a10 	vmov	s0, r3
 800f9f4:	e7e3      	b.n	800f9be <__ieee754_powf+0x506>
 800f9f6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f9fa:	e5b1      	b.n	800f560 <__ieee754_powf+0xa8>
 800f9fc:	eeb0 0a68 	vmov.f32	s0, s17
 800fa00:	e5ae      	b.n	800f560 <__ieee754_powf+0xa8>
 800fa02:	eeb0 0a48 	vmov.f32	s0, s16
 800fa06:	e5ab      	b.n	800f560 <__ieee754_powf+0xa8>
 800fa08:	2600      	movs	r6, #0
 800fa0a:	e590      	b.n	800f52e <__ieee754_powf+0x76>
 800fa0c:	007fffff 	.word	0x007fffff
 800fa10:	3f317218 	.word	0x3f317218
 800fa14:	35bfbe8c 	.word	0x35bfbe8c
 800fa18:	3f317200 	.word	0x3f317200
 800fa1c:	3331bb4c 	.word	0x3331bb4c
 800fa20:	b5ddea0e 	.word	0xb5ddea0e
 800fa24:	388ab355 	.word	0x388ab355
 800fa28:	bb360b61 	.word	0xbb360b61
 800fa2c:	3e2aaaab 	.word	0x3e2aaaab
 800fa30:	43160000 	.word	0x43160000
 800fa34:	0da24260 	.word	0x0da24260

0800fa38 <__ieee754_sqrtf>:
 800fa38:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fa3c:	4770      	bx	lr

0800fa3e <fabsf>:
 800fa3e:	ee10 3a10 	vmov	r3, s0
 800fa42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fa46:	ee00 3a10 	vmov	s0, r3
 800fa4a:	4770      	bx	lr

0800fa4c <finitef>:
 800fa4c:	b082      	sub	sp, #8
 800fa4e:	ed8d 0a01 	vstr	s0, [sp, #4]
 800fa52:	9801      	ldr	r0, [sp, #4]
 800fa54:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800fa58:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800fa5c:	bfac      	ite	ge
 800fa5e:	2000      	movge	r0, #0
 800fa60:	2001      	movlt	r0, #1
 800fa62:	b002      	add	sp, #8
 800fa64:	4770      	bx	lr
	...

0800fa68 <nanf>:
 800fa68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fa70 <nanf+0x8>
 800fa6c:	4770      	bx	lr
 800fa6e:	bf00      	nop
 800fa70:	7fc00000 	.word	0x7fc00000

0800fa74 <rintf>:
 800fa74:	ee10 2a10 	vmov	r2, s0
 800fa78:	b513      	push	{r0, r1, r4, lr}
 800fa7a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800fa7e:	397f      	subs	r1, #127	; 0x7f
 800fa80:	2916      	cmp	r1, #22
 800fa82:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800fa86:	dc47      	bgt.n	800fb18 <rintf+0xa4>
 800fa88:	b32b      	cbz	r3, 800fad6 <rintf+0x62>
 800fa8a:	2900      	cmp	r1, #0
 800fa8c:	ee10 3a10 	vmov	r3, s0
 800fa90:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 800fa94:	da21      	bge.n	800fada <rintf+0x66>
 800fa96:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800fa9a:	425b      	negs	r3, r3
 800fa9c:	4921      	ldr	r1, [pc, #132]	; (800fb24 <rintf+0xb0>)
 800fa9e:	0a5b      	lsrs	r3, r3, #9
 800faa0:	0d12      	lsrs	r2, r2, #20
 800faa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800faa6:	0512      	lsls	r2, r2, #20
 800faa8:	4313      	orrs	r3, r2
 800faaa:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800faae:	ee07 3a90 	vmov	s15, r3
 800fab2:	edd1 6a00 	vldr	s13, [r1]
 800fab6:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800faba:	ed8d 7a01 	vstr	s14, [sp, #4]
 800fabe:	eddd 7a01 	vldr	s15, [sp, #4]
 800fac2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fac6:	ee17 3a90 	vmov	r3, s15
 800faca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800face:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800fad2:	ee00 3a10 	vmov	s0, r3
 800fad6:	b002      	add	sp, #8
 800fad8:	bd10      	pop	{r4, pc}
 800fada:	4a13      	ldr	r2, [pc, #76]	; (800fb28 <rintf+0xb4>)
 800fadc:	410a      	asrs	r2, r1
 800fade:	4213      	tst	r3, r2
 800fae0:	d0f9      	beq.n	800fad6 <rintf+0x62>
 800fae2:	0854      	lsrs	r4, r2, #1
 800fae4:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 800fae8:	d006      	beq.n	800faf8 <rintf+0x84>
 800faea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800faee:	ea23 0304 	bic.w	r3, r3, r4
 800faf2:	fa42 f101 	asr.w	r1, r2, r1
 800faf6:	430b      	orrs	r3, r1
 800faf8:	4a0a      	ldr	r2, [pc, #40]	; (800fb24 <rintf+0xb0>)
 800fafa:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800fafe:	ed90 7a00 	vldr	s14, [r0]
 800fb02:	ee07 3a90 	vmov	s15, r3
 800fb06:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fb0a:	edcd 7a01 	vstr	s15, [sp, #4]
 800fb0e:	ed9d 0a01 	vldr	s0, [sp, #4]
 800fb12:	ee30 0a47 	vsub.f32	s0, s0, s14
 800fb16:	e7de      	b.n	800fad6 <rintf+0x62>
 800fb18:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fb1c:	d3db      	bcc.n	800fad6 <rintf+0x62>
 800fb1e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fb22:	e7d8      	b.n	800fad6 <rintf+0x62>
 800fb24:	08012c44 	.word	0x08012c44
 800fb28:	007fffff 	.word	0x007fffff

0800fb2c <scalbnf>:
 800fb2c:	ee10 3a10 	vmov	r3, s0
 800fb30:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800fb34:	d025      	beq.n	800fb82 <scalbnf+0x56>
 800fb36:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800fb3a:	d302      	bcc.n	800fb42 <scalbnf+0x16>
 800fb3c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fb40:	4770      	bx	lr
 800fb42:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800fb46:	d122      	bne.n	800fb8e <scalbnf+0x62>
 800fb48:	4b2a      	ldr	r3, [pc, #168]	; (800fbf4 <scalbnf+0xc8>)
 800fb4a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800fbf8 <scalbnf+0xcc>
 800fb4e:	4298      	cmp	r0, r3
 800fb50:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fb54:	db16      	blt.n	800fb84 <scalbnf+0x58>
 800fb56:	ee10 3a10 	vmov	r3, s0
 800fb5a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fb5e:	3a19      	subs	r2, #25
 800fb60:	4402      	add	r2, r0
 800fb62:	2afe      	cmp	r2, #254	; 0xfe
 800fb64:	dd15      	ble.n	800fb92 <scalbnf+0x66>
 800fb66:	ee10 3a10 	vmov	r3, s0
 800fb6a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800fbfc <scalbnf+0xd0>
 800fb6e:	eddf 6a24 	vldr	s13, [pc, #144]	; 800fc00 <scalbnf+0xd4>
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	eeb0 7a67 	vmov.f32	s14, s15
 800fb78:	bfb8      	it	lt
 800fb7a:	eef0 7a66 	vmovlt.f32	s15, s13
 800fb7e:	ee27 0a27 	vmul.f32	s0, s14, s15
 800fb82:	4770      	bx	lr
 800fb84:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800fc04 <scalbnf+0xd8>
 800fb88:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fb8c:	4770      	bx	lr
 800fb8e:	0dd2      	lsrs	r2, r2, #23
 800fb90:	e7e6      	b.n	800fb60 <scalbnf+0x34>
 800fb92:	2a00      	cmp	r2, #0
 800fb94:	dd06      	ble.n	800fba4 <scalbnf+0x78>
 800fb96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fb9a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800fb9e:	ee00 3a10 	vmov	s0, r3
 800fba2:	4770      	bx	lr
 800fba4:	f112 0f16 	cmn.w	r2, #22
 800fba8:	da1a      	bge.n	800fbe0 <scalbnf+0xb4>
 800fbaa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fbae:	4298      	cmp	r0, r3
 800fbb0:	ee10 3a10 	vmov	r3, s0
 800fbb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fbb8:	dd0a      	ble.n	800fbd0 <scalbnf+0xa4>
 800fbba:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800fbfc <scalbnf+0xd0>
 800fbbe:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800fc00 <scalbnf+0xd4>
 800fbc2:	eef0 7a40 	vmov.f32	s15, s0
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	bf18      	it	ne
 800fbca:	eeb0 0a47 	vmovne.f32	s0, s14
 800fbce:	e7db      	b.n	800fb88 <scalbnf+0x5c>
 800fbd0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800fc04 <scalbnf+0xd8>
 800fbd4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800fc08 <scalbnf+0xdc>
 800fbd8:	eef0 7a40 	vmov.f32	s15, s0
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	e7f3      	b.n	800fbc8 <scalbnf+0x9c>
 800fbe0:	3219      	adds	r2, #25
 800fbe2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fbe6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800fbea:	eddf 7a08 	vldr	s15, [pc, #32]	; 800fc0c <scalbnf+0xe0>
 800fbee:	ee07 3a10 	vmov	s14, r3
 800fbf2:	e7c4      	b.n	800fb7e <scalbnf+0x52>
 800fbf4:	ffff3cb0 	.word	0xffff3cb0
 800fbf8:	4c000000 	.word	0x4c000000
 800fbfc:	7149f2ca 	.word	0x7149f2ca
 800fc00:	f149f2ca 	.word	0xf149f2ca
 800fc04:	0da24260 	.word	0x0da24260
 800fc08:	8da24260 	.word	0x8da24260
 800fc0c:	33000000 	.word	0x33000000

0800fc10 <__errno>:
 800fc10:	4b01      	ldr	r3, [pc, #4]	; (800fc18 <__errno+0x8>)
 800fc12:	6818      	ldr	r0, [r3, #0]
 800fc14:	4770      	bx	lr
 800fc16:	bf00      	nop
 800fc18:	20000180 	.word	0x20000180

0800fc1c <__libc_init_array>:
 800fc1c:	b570      	push	{r4, r5, r6, lr}
 800fc1e:	4d0d      	ldr	r5, [pc, #52]	; (800fc54 <__libc_init_array+0x38>)
 800fc20:	4c0d      	ldr	r4, [pc, #52]	; (800fc58 <__libc_init_array+0x3c>)
 800fc22:	1b64      	subs	r4, r4, r5
 800fc24:	10a4      	asrs	r4, r4, #2
 800fc26:	2600      	movs	r6, #0
 800fc28:	42a6      	cmp	r6, r4
 800fc2a:	d109      	bne.n	800fc40 <__libc_init_array+0x24>
 800fc2c:	4d0b      	ldr	r5, [pc, #44]	; (800fc5c <__libc_init_array+0x40>)
 800fc2e:	4c0c      	ldr	r4, [pc, #48]	; (800fc60 <__libc_init_array+0x44>)
 800fc30:	f002 fec4 	bl	80129bc <_init>
 800fc34:	1b64      	subs	r4, r4, r5
 800fc36:	10a4      	asrs	r4, r4, #2
 800fc38:	2600      	movs	r6, #0
 800fc3a:	42a6      	cmp	r6, r4
 800fc3c:	d105      	bne.n	800fc4a <__libc_init_array+0x2e>
 800fc3e:	bd70      	pop	{r4, r5, r6, pc}
 800fc40:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc44:	4798      	blx	r3
 800fc46:	3601      	adds	r6, #1
 800fc48:	e7ee      	b.n	800fc28 <__libc_init_array+0xc>
 800fc4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc4e:	4798      	blx	r3
 800fc50:	3601      	adds	r6, #1
 800fc52:	e7f2      	b.n	800fc3a <__libc_init_array+0x1e>
 800fc54:	08013034 	.word	0x08013034
 800fc58:	08013034 	.word	0x08013034
 800fc5c:	08013034 	.word	0x08013034
 800fc60:	08013038 	.word	0x08013038

0800fc64 <memset>:
 800fc64:	4402      	add	r2, r0
 800fc66:	4603      	mov	r3, r0
 800fc68:	4293      	cmp	r3, r2
 800fc6a:	d100      	bne.n	800fc6e <memset+0xa>
 800fc6c:	4770      	bx	lr
 800fc6e:	f803 1b01 	strb.w	r1, [r3], #1
 800fc72:	e7f9      	b.n	800fc68 <memset+0x4>

0800fc74 <__cvt>:
 800fc74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc78:	ec55 4b10 	vmov	r4, r5, d0
 800fc7c:	2d00      	cmp	r5, #0
 800fc7e:	460e      	mov	r6, r1
 800fc80:	4619      	mov	r1, r3
 800fc82:	462b      	mov	r3, r5
 800fc84:	bfbb      	ittet	lt
 800fc86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fc8a:	461d      	movlt	r5, r3
 800fc8c:	2300      	movge	r3, #0
 800fc8e:	232d      	movlt	r3, #45	; 0x2d
 800fc90:	700b      	strb	r3, [r1, #0]
 800fc92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc94:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fc98:	4691      	mov	r9, r2
 800fc9a:	f023 0820 	bic.w	r8, r3, #32
 800fc9e:	bfbc      	itt	lt
 800fca0:	4622      	movlt	r2, r4
 800fca2:	4614      	movlt	r4, r2
 800fca4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fca8:	d005      	beq.n	800fcb6 <__cvt+0x42>
 800fcaa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fcae:	d100      	bne.n	800fcb2 <__cvt+0x3e>
 800fcb0:	3601      	adds	r6, #1
 800fcb2:	2102      	movs	r1, #2
 800fcb4:	e000      	b.n	800fcb8 <__cvt+0x44>
 800fcb6:	2103      	movs	r1, #3
 800fcb8:	ab03      	add	r3, sp, #12
 800fcba:	9301      	str	r3, [sp, #4]
 800fcbc:	ab02      	add	r3, sp, #8
 800fcbe:	9300      	str	r3, [sp, #0]
 800fcc0:	ec45 4b10 	vmov	d0, r4, r5
 800fcc4:	4653      	mov	r3, sl
 800fcc6:	4632      	mov	r2, r6
 800fcc8:	f000 fcfa 	bl	80106c0 <_dtoa_r>
 800fccc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fcd0:	4607      	mov	r7, r0
 800fcd2:	d102      	bne.n	800fcda <__cvt+0x66>
 800fcd4:	f019 0f01 	tst.w	r9, #1
 800fcd8:	d022      	beq.n	800fd20 <__cvt+0xac>
 800fcda:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fcde:	eb07 0906 	add.w	r9, r7, r6
 800fce2:	d110      	bne.n	800fd06 <__cvt+0x92>
 800fce4:	783b      	ldrb	r3, [r7, #0]
 800fce6:	2b30      	cmp	r3, #48	; 0x30
 800fce8:	d10a      	bne.n	800fd00 <__cvt+0x8c>
 800fcea:	2200      	movs	r2, #0
 800fcec:	2300      	movs	r3, #0
 800fcee:	4620      	mov	r0, r4
 800fcf0:	4629      	mov	r1, r5
 800fcf2:	f7f0 fef1 	bl	8000ad8 <__aeabi_dcmpeq>
 800fcf6:	b918      	cbnz	r0, 800fd00 <__cvt+0x8c>
 800fcf8:	f1c6 0601 	rsb	r6, r6, #1
 800fcfc:	f8ca 6000 	str.w	r6, [sl]
 800fd00:	f8da 3000 	ldr.w	r3, [sl]
 800fd04:	4499      	add	r9, r3
 800fd06:	2200      	movs	r2, #0
 800fd08:	2300      	movs	r3, #0
 800fd0a:	4620      	mov	r0, r4
 800fd0c:	4629      	mov	r1, r5
 800fd0e:	f7f0 fee3 	bl	8000ad8 <__aeabi_dcmpeq>
 800fd12:	b108      	cbz	r0, 800fd18 <__cvt+0xa4>
 800fd14:	f8cd 900c 	str.w	r9, [sp, #12]
 800fd18:	2230      	movs	r2, #48	; 0x30
 800fd1a:	9b03      	ldr	r3, [sp, #12]
 800fd1c:	454b      	cmp	r3, r9
 800fd1e:	d307      	bcc.n	800fd30 <__cvt+0xbc>
 800fd20:	9b03      	ldr	r3, [sp, #12]
 800fd22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fd24:	1bdb      	subs	r3, r3, r7
 800fd26:	4638      	mov	r0, r7
 800fd28:	6013      	str	r3, [r2, #0]
 800fd2a:	b004      	add	sp, #16
 800fd2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd30:	1c59      	adds	r1, r3, #1
 800fd32:	9103      	str	r1, [sp, #12]
 800fd34:	701a      	strb	r2, [r3, #0]
 800fd36:	e7f0      	b.n	800fd1a <__cvt+0xa6>

0800fd38 <__exponent>:
 800fd38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	2900      	cmp	r1, #0
 800fd3e:	bfb8      	it	lt
 800fd40:	4249      	neglt	r1, r1
 800fd42:	f803 2b02 	strb.w	r2, [r3], #2
 800fd46:	bfb4      	ite	lt
 800fd48:	222d      	movlt	r2, #45	; 0x2d
 800fd4a:	222b      	movge	r2, #43	; 0x2b
 800fd4c:	2909      	cmp	r1, #9
 800fd4e:	7042      	strb	r2, [r0, #1]
 800fd50:	dd2a      	ble.n	800fda8 <__exponent+0x70>
 800fd52:	f10d 0407 	add.w	r4, sp, #7
 800fd56:	46a4      	mov	ip, r4
 800fd58:	270a      	movs	r7, #10
 800fd5a:	46a6      	mov	lr, r4
 800fd5c:	460a      	mov	r2, r1
 800fd5e:	fb91 f6f7 	sdiv	r6, r1, r7
 800fd62:	fb07 1516 	mls	r5, r7, r6, r1
 800fd66:	3530      	adds	r5, #48	; 0x30
 800fd68:	2a63      	cmp	r2, #99	; 0x63
 800fd6a:	f104 34ff 	add.w	r4, r4, #4294967295
 800fd6e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fd72:	4631      	mov	r1, r6
 800fd74:	dcf1      	bgt.n	800fd5a <__exponent+0x22>
 800fd76:	3130      	adds	r1, #48	; 0x30
 800fd78:	f1ae 0502 	sub.w	r5, lr, #2
 800fd7c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fd80:	1c44      	adds	r4, r0, #1
 800fd82:	4629      	mov	r1, r5
 800fd84:	4561      	cmp	r1, ip
 800fd86:	d30a      	bcc.n	800fd9e <__exponent+0x66>
 800fd88:	f10d 0209 	add.w	r2, sp, #9
 800fd8c:	eba2 020e 	sub.w	r2, r2, lr
 800fd90:	4565      	cmp	r5, ip
 800fd92:	bf88      	it	hi
 800fd94:	2200      	movhi	r2, #0
 800fd96:	4413      	add	r3, r2
 800fd98:	1a18      	subs	r0, r3, r0
 800fd9a:	b003      	add	sp, #12
 800fd9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fda2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fda6:	e7ed      	b.n	800fd84 <__exponent+0x4c>
 800fda8:	2330      	movs	r3, #48	; 0x30
 800fdaa:	3130      	adds	r1, #48	; 0x30
 800fdac:	7083      	strb	r3, [r0, #2]
 800fdae:	70c1      	strb	r1, [r0, #3]
 800fdb0:	1d03      	adds	r3, r0, #4
 800fdb2:	e7f1      	b.n	800fd98 <__exponent+0x60>

0800fdb4 <_printf_float>:
 800fdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdb8:	ed2d 8b02 	vpush	{d8}
 800fdbc:	b08d      	sub	sp, #52	; 0x34
 800fdbe:	460c      	mov	r4, r1
 800fdc0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fdc4:	4616      	mov	r6, r2
 800fdc6:	461f      	mov	r7, r3
 800fdc8:	4605      	mov	r5, r0
 800fdca:	f001 fa65 	bl	8011298 <_localeconv_r>
 800fdce:	f8d0 a000 	ldr.w	sl, [r0]
 800fdd2:	4650      	mov	r0, sl
 800fdd4:	f7f0 fa04 	bl	80001e0 <strlen>
 800fdd8:	2300      	movs	r3, #0
 800fdda:	930a      	str	r3, [sp, #40]	; 0x28
 800fddc:	6823      	ldr	r3, [r4, #0]
 800fdde:	9305      	str	r3, [sp, #20]
 800fde0:	f8d8 3000 	ldr.w	r3, [r8]
 800fde4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fde8:	3307      	adds	r3, #7
 800fdea:	f023 0307 	bic.w	r3, r3, #7
 800fdee:	f103 0208 	add.w	r2, r3, #8
 800fdf2:	f8c8 2000 	str.w	r2, [r8]
 800fdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdfa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fdfe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fe02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fe06:	9307      	str	r3, [sp, #28]
 800fe08:	f8cd 8018 	str.w	r8, [sp, #24]
 800fe0c:	ee08 0a10 	vmov	s16, r0
 800fe10:	4b9f      	ldr	r3, [pc, #636]	; (8010090 <_printf_float+0x2dc>)
 800fe12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fe16:	f04f 32ff 	mov.w	r2, #4294967295
 800fe1a:	f7f0 fe8f 	bl	8000b3c <__aeabi_dcmpun>
 800fe1e:	bb88      	cbnz	r0, 800fe84 <_printf_float+0xd0>
 800fe20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fe24:	4b9a      	ldr	r3, [pc, #616]	; (8010090 <_printf_float+0x2dc>)
 800fe26:	f04f 32ff 	mov.w	r2, #4294967295
 800fe2a:	f7f0 fe69 	bl	8000b00 <__aeabi_dcmple>
 800fe2e:	bb48      	cbnz	r0, 800fe84 <_printf_float+0xd0>
 800fe30:	2200      	movs	r2, #0
 800fe32:	2300      	movs	r3, #0
 800fe34:	4640      	mov	r0, r8
 800fe36:	4649      	mov	r1, r9
 800fe38:	f7f0 fe58 	bl	8000aec <__aeabi_dcmplt>
 800fe3c:	b110      	cbz	r0, 800fe44 <_printf_float+0x90>
 800fe3e:	232d      	movs	r3, #45	; 0x2d
 800fe40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe44:	4b93      	ldr	r3, [pc, #588]	; (8010094 <_printf_float+0x2e0>)
 800fe46:	4894      	ldr	r0, [pc, #592]	; (8010098 <_printf_float+0x2e4>)
 800fe48:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fe4c:	bf94      	ite	ls
 800fe4e:	4698      	movls	r8, r3
 800fe50:	4680      	movhi	r8, r0
 800fe52:	2303      	movs	r3, #3
 800fe54:	6123      	str	r3, [r4, #16]
 800fe56:	9b05      	ldr	r3, [sp, #20]
 800fe58:	f023 0204 	bic.w	r2, r3, #4
 800fe5c:	6022      	str	r2, [r4, #0]
 800fe5e:	f04f 0900 	mov.w	r9, #0
 800fe62:	9700      	str	r7, [sp, #0]
 800fe64:	4633      	mov	r3, r6
 800fe66:	aa0b      	add	r2, sp, #44	; 0x2c
 800fe68:	4621      	mov	r1, r4
 800fe6a:	4628      	mov	r0, r5
 800fe6c:	f000 f9d8 	bl	8010220 <_printf_common>
 800fe70:	3001      	adds	r0, #1
 800fe72:	f040 8090 	bne.w	800ff96 <_printf_float+0x1e2>
 800fe76:	f04f 30ff 	mov.w	r0, #4294967295
 800fe7a:	b00d      	add	sp, #52	; 0x34
 800fe7c:	ecbd 8b02 	vpop	{d8}
 800fe80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe84:	4642      	mov	r2, r8
 800fe86:	464b      	mov	r3, r9
 800fe88:	4640      	mov	r0, r8
 800fe8a:	4649      	mov	r1, r9
 800fe8c:	f7f0 fe56 	bl	8000b3c <__aeabi_dcmpun>
 800fe90:	b140      	cbz	r0, 800fea4 <_printf_float+0xf0>
 800fe92:	464b      	mov	r3, r9
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	bfbc      	itt	lt
 800fe98:	232d      	movlt	r3, #45	; 0x2d
 800fe9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fe9e:	487f      	ldr	r0, [pc, #508]	; (801009c <_printf_float+0x2e8>)
 800fea0:	4b7f      	ldr	r3, [pc, #508]	; (80100a0 <_printf_float+0x2ec>)
 800fea2:	e7d1      	b.n	800fe48 <_printf_float+0x94>
 800fea4:	6863      	ldr	r3, [r4, #4]
 800fea6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800feaa:	9206      	str	r2, [sp, #24]
 800feac:	1c5a      	adds	r2, r3, #1
 800feae:	d13f      	bne.n	800ff30 <_printf_float+0x17c>
 800feb0:	2306      	movs	r3, #6
 800feb2:	6063      	str	r3, [r4, #4]
 800feb4:	9b05      	ldr	r3, [sp, #20]
 800feb6:	6861      	ldr	r1, [r4, #4]
 800feb8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800febc:	2300      	movs	r3, #0
 800febe:	9303      	str	r3, [sp, #12]
 800fec0:	ab0a      	add	r3, sp, #40	; 0x28
 800fec2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fec6:	ab09      	add	r3, sp, #36	; 0x24
 800fec8:	ec49 8b10 	vmov	d0, r8, r9
 800fecc:	9300      	str	r3, [sp, #0]
 800fece:	6022      	str	r2, [r4, #0]
 800fed0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fed4:	4628      	mov	r0, r5
 800fed6:	f7ff fecd 	bl	800fc74 <__cvt>
 800feda:	9b06      	ldr	r3, [sp, #24]
 800fedc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fede:	2b47      	cmp	r3, #71	; 0x47
 800fee0:	4680      	mov	r8, r0
 800fee2:	d108      	bne.n	800fef6 <_printf_float+0x142>
 800fee4:	1cc8      	adds	r0, r1, #3
 800fee6:	db02      	blt.n	800feee <_printf_float+0x13a>
 800fee8:	6863      	ldr	r3, [r4, #4]
 800feea:	4299      	cmp	r1, r3
 800feec:	dd41      	ble.n	800ff72 <_printf_float+0x1be>
 800feee:	f1ab 0b02 	sub.w	fp, fp, #2
 800fef2:	fa5f fb8b 	uxtb.w	fp, fp
 800fef6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fefa:	d820      	bhi.n	800ff3e <_printf_float+0x18a>
 800fefc:	3901      	subs	r1, #1
 800fefe:	465a      	mov	r2, fp
 800ff00:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ff04:	9109      	str	r1, [sp, #36]	; 0x24
 800ff06:	f7ff ff17 	bl	800fd38 <__exponent>
 800ff0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ff0c:	1813      	adds	r3, r2, r0
 800ff0e:	2a01      	cmp	r2, #1
 800ff10:	4681      	mov	r9, r0
 800ff12:	6123      	str	r3, [r4, #16]
 800ff14:	dc02      	bgt.n	800ff1c <_printf_float+0x168>
 800ff16:	6822      	ldr	r2, [r4, #0]
 800ff18:	07d2      	lsls	r2, r2, #31
 800ff1a:	d501      	bpl.n	800ff20 <_printf_float+0x16c>
 800ff1c:	3301      	adds	r3, #1
 800ff1e:	6123      	str	r3, [r4, #16]
 800ff20:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d09c      	beq.n	800fe62 <_printf_float+0xae>
 800ff28:	232d      	movs	r3, #45	; 0x2d
 800ff2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff2e:	e798      	b.n	800fe62 <_printf_float+0xae>
 800ff30:	9a06      	ldr	r2, [sp, #24]
 800ff32:	2a47      	cmp	r2, #71	; 0x47
 800ff34:	d1be      	bne.n	800feb4 <_printf_float+0x100>
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d1bc      	bne.n	800feb4 <_printf_float+0x100>
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	e7b9      	b.n	800feb2 <_printf_float+0xfe>
 800ff3e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ff42:	d118      	bne.n	800ff76 <_printf_float+0x1c2>
 800ff44:	2900      	cmp	r1, #0
 800ff46:	6863      	ldr	r3, [r4, #4]
 800ff48:	dd0b      	ble.n	800ff62 <_printf_float+0x1ae>
 800ff4a:	6121      	str	r1, [r4, #16]
 800ff4c:	b913      	cbnz	r3, 800ff54 <_printf_float+0x1a0>
 800ff4e:	6822      	ldr	r2, [r4, #0]
 800ff50:	07d0      	lsls	r0, r2, #31
 800ff52:	d502      	bpl.n	800ff5a <_printf_float+0x1a6>
 800ff54:	3301      	adds	r3, #1
 800ff56:	440b      	add	r3, r1
 800ff58:	6123      	str	r3, [r4, #16]
 800ff5a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ff5c:	f04f 0900 	mov.w	r9, #0
 800ff60:	e7de      	b.n	800ff20 <_printf_float+0x16c>
 800ff62:	b913      	cbnz	r3, 800ff6a <_printf_float+0x1b6>
 800ff64:	6822      	ldr	r2, [r4, #0]
 800ff66:	07d2      	lsls	r2, r2, #31
 800ff68:	d501      	bpl.n	800ff6e <_printf_float+0x1ba>
 800ff6a:	3302      	adds	r3, #2
 800ff6c:	e7f4      	b.n	800ff58 <_printf_float+0x1a4>
 800ff6e:	2301      	movs	r3, #1
 800ff70:	e7f2      	b.n	800ff58 <_printf_float+0x1a4>
 800ff72:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ff76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff78:	4299      	cmp	r1, r3
 800ff7a:	db05      	blt.n	800ff88 <_printf_float+0x1d4>
 800ff7c:	6823      	ldr	r3, [r4, #0]
 800ff7e:	6121      	str	r1, [r4, #16]
 800ff80:	07d8      	lsls	r0, r3, #31
 800ff82:	d5ea      	bpl.n	800ff5a <_printf_float+0x1a6>
 800ff84:	1c4b      	adds	r3, r1, #1
 800ff86:	e7e7      	b.n	800ff58 <_printf_float+0x1a4>
 800ff88:	2900      	cmp	r1, #0
 800ff8a:	bfd4      	ite	le
 800ff8c:	f1c1 0202 	rsble	r2, r1, #2
 800ff90:	2201      	movgt	r2, #1
 800ff92:	4413      	add	r3, r2
 800ff94:	e7e0      	b.n	800ff58 <_printf_float+0x1a4>
 800ff96:	6823      	ldr	r3, [r4, #0]
 800ff98:	055a      	lsls	r2, r3, #21
 800ff9a:	d407      	bmi.n	800ffac <_printf_float+0x1f8>
 800ff9c:	6923      	ldr	r3, [r4, #16]
 800ff9e:	4642      	mov	r2, r8
 800ffa0:	4631      	mov	r1, r6
 800ffa2:	4628      	mov	r0, r5
 800ffa4:	47b8      	blx	r7
 800ffa6:	3001      	adds	r0, #1
 800ffa8:	d12c      	bne.n	8010004 <_printf_float+0x250>
 800ffaa:	e764      	b.n	800fe76 <_printf_float+0xc2>
 800ffac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ffb0:	f240 80e0 	bls.w	8010174 <_printf_float+0x3c0>
 800ffb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ffb8:	2200      	movs	r2, #0
 800ffba:	2300      	movs	r3, #0
 800ffbc:	f7f0 fd8c 	bl	8000ad8 <__aeabi_dcmpeq>
 800ffc0:	2800      	cmp	r0, #0
 800ffc2:	d034      	beq.n	801002e <_printf_float+0x27a>
 800ffc4:	4a37      	ldr	r2, [pc, #220]	; (80100a4 <_printf_float+0x2f0>)
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	4631      	mov	r1, r6
 800ffca:	4628      	mov	r0, r5
 800ffcc:	47b8      	blx	r7
 800ffce:	3001      	adds	r0, #1
 800ffd0:	f43f af51 	beq.w	800fe76 <_printf_float+0xc2>
 800ffd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	db02      	blt.n	800ffe2 <_printf_float+0x22e>
 800ffdc:	6823      	ldr	r3, [r4, #0]
 800ffde:	07d8      	lsls	r0, r3, #31
 800ffe0:	d510      	bpl.n	8010004 <_printf_float+0x250>
 800ffe2:	ee18 3a10 	vmov	r3, s16
 800ffe6:	4652      	mov	r2, sl
 800ffe8:	4631      	mov	r1, r6
 800ffea:	4628      	mov	r0, r5
 800ffec:	47b8      	blx	r7
 800ffee:	3001      	adds	r0, #1
 800fff0:	f43f af41 	beq.w	800fe76 <_printf_float+0xc2>
 800fff4:	f04f 0800 	mov.w	r8, #0
 800fff8:	f104 091a 	add.w	r9, r4, #26
 800fffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fffe:	3b01      	subs	r3, #1
 8010000:	4543      	cmp	r3, r8
 8010002:	dc09      	bgt.n	8010018 <_printf_float+0x264>
 8010004:	6823      	ldr	r3, [r4, #0]
 8010006:	079b      	lsls	r3, r3, #30
 8010008:	f100 8105 	bmi.w	8010216 <_printf_float+0x462>
 801000c:	68e0      	ldr	r0, [r4, #12]
 801000e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010010:	4298      	cmp	r0, r3
 8010012:	bfb8      	it	lt
 8010014:	4618      	movlt	r0, r3
 8010016:	e730      	b.n	800fe7a <_printf_float+0xc6>
 8010018:	2301      	movs	r3, #1
 801001a:	464a      	mov	r2, r9
 801001c:	4631      	mov	r1, r6
 801001e:	4628      	mov	r0, r5
 8010020:	47b8      	blx	r7
 8010022:	3001      	adds	r0, #1
 8010024:	f43f af27 	beq.w	800fe76 <_printf_float+0xc2>
 8010028:	f108 0801 	add.w	r8, r8, #1
 801002c:	e7e6      	b.n	800fffc <_printf_float+0x248>
 801002e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010030:	2b00      	cmp	r3, #0
 8010032:	dc39      	bgt.n	80100a8 <_printf_float+0x2f4>
 8010034:	4a1b      	ldr	r2, [pc, #108]	; (80100a4 <_printf_float+0x2f0>)
 8010036:	2301      	movs	r3, #1
 8010038:	4631      	mov	r1, r6
 801003a:	4628      	mov	r0, r5
 801003c:	47b8      	blx	r7
 801003e:	3001      	adds	r0, #1
 8010040:	f43f af19 	beq.w	800fe76 <_printf_float+0xc2>
 8010044:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010048:	4313      	orrs	r3, r2
 801004a:	d102      	bne.n	8010052 <_printf_float+0x29e>
 801004c:	6823      	ldr	r3, [r4, #0]
 801004e:	07d9      	lsls	r1, r3, #31
 8010050:	d5d8      	bpl.n	8010004 <_printf_float+0x250>
 8010052:	ee18 3a10 	vmov	r3, s16
 8010056:	4652      	mov	r2, sl
 8010058:	4631      	mov	r1, r6
 801005a:	4628      	mov	r0, r5
 801005c:	47b8      	blx	r7
 801005e:	3001      	adds	r0, #1
 8010060:	f43f af09 	beq.w	800fe76 <_printf_float+0xc2>
 8010064:	f04f 0900 	mov.w	r9, #0
 8010068:	f104 0a1a 	add.w	sl, r4, #26
 801006c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801006e:	425b      	negs	r3, r3
 8010070:	454b      	cmp	r3, r9
 8010072:	dc01      	bgt.n	8010078 <_printf_float+0x2c4>
 8010074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010076:	e792      	b.n	800ff9e <_printf_float+0x1ea>
 8010078:	2301      	movs	r3, #1
 801007a:	4652      	mov	r2, sl
 801007c:	4631      	mov	r1, r6
 801007e:	4628      	mov	r0, r5
 8010080:	47b8      	blx	r7
 8010082:	3001      	adds	r0, #1
 8010084:	f43f aef7 	beq.w	800fe76 <_printf_float+0xc2>
 8010088:	f109 0901 	add.w	r9, r9, #1
 801008c:	e7ee      	b.n	801006c <_printf_float+0x2b8>
 801008e:	bf00      	nop
 8010090:	7fefffff 	.word	0x7fefffff
 8010094:	08012c50 	.word	0x08012c50
 8010098:	08012c54 	.word	0x08012c54
 801009c:	08012c5c 	.word	0x08012c5c
 80100a0:	08012c58 	.word	0x08012c58
 80100a4:	08012c60 	.word	0x08012c60
 80100a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80100aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80100ac:	429a      	cmp	r2, r3
 80100ae:	bfa8      	it	ge
 80100b0:	461a      	movge	r2, r3
 80100b2:	2a00      	cmp	r2, #0
 80100b4:	4691      	mov	r9, r2
 80100b6:	dc37      	bgt.n	8010128 <_printf_float+0x374>
 80100b8:	f04f 0b00 	mov.w	fp, #0
 80100bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80100c0:	f104 021a 	add.w	r2, r4, #26
 80100c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80100c6:	9305      	str	r3, [sp, #20]
 80100c8:	eba3 0309 	sub.w	r3, r3, r9
 80100cc:	455b      	cmp	r3, fp
 80100ce:	dc33      	bgt.n	8010138 <_printf_float+0x384>
 80100d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80100d4:	429a      	cmp	r2, r3
 80100d6:	db3b      	blt.n	8010150 <_printf_float+0x39c>
 80100d8:	6823      	ldr	r3, [r4, #0]
 80100da:	07da      	lsls	r2, r3, #31
 80100dc:	d438      	bmi.n	8010150 <_printf_float+0x39c>
 80100de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80100e0:	9b05      	ldr	r3, [sp, #20]
 80100e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80100e4:	1ad3      	subs	r3, r2, r3
 80100e6:	eba2 0901 	sub.w	r9, r2, r1
 80100ea:	4599      	cmp	r9, r3
 80100ec:	bfa8      	it	ge
 80100ee:	4699      	movge	r9, r3
 80100f0:	f1b9 0f00 	cmp.w	r9, #0
 80100f4:	dc35      	bgt.n	8010162 <_printf_float+0x3ae>
 80100f6:	f04f 0800 	mov.w	r8, #0
 80100fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80100fe:	f104 0a1a 	add.w	sl, r4, #26
 8010102:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010106:	1a9b      	subs	r3, r3, r2
 8010108:	eba3 0309 	sub.w	r3, r3, r9
 801010c:	4543      	cmp	r3, r8
 801010e:	f77f af79 	ble.w	8010004 <_printf_float+0x250>
 8010112:	2301      	movs	r3, #1
 8010114:	4652      	mov	r2, sl
 8010116:	4631      	mov	r1, r6
 8010118:	4628      	mov	r0, r5
 801011a:	47b8      	blx	r7
 801011c:	3001      	adds	r0, #1
 801011e:	f43f aeaa 	beq.w	800fe76 <_printf_float+0xc2>
 8010122:	f108 0801 	add.w	r8, r8, #1
 8010126:	e7ec      	b.n	8010102 <_printf_float+0x34e>
 8010128:	4613      	mov	r3, r2
 801012a:	4631      	mov	r1, r6
 801012c:	4642      	mov	r2, r8
 801012e:	4628      	mov	r0, r5
 8010130:	47b8      	blx	r7
 8010132:	3001      	adds	r0, #1
 8010134:	d1c0      	bne.n	80100b8 <_printf_float+0x304>
 8010136:	e69e      	b.n	800fe76 <_printf_float+0xc2>
 8010138:	2301      	movs	r3, #1
 801013a:	4631      	mov	r1, r6
 801013c:	4628      	mov	r0, r5
 801013e:	9205      	str	r2, [sp, #20]
 8010140:	47b8      	blx	r7
 8010142:	3001      	adds	r0, #1
 8010144:	f43f ae97 	beq.w	800fe76 <_printf_float+0xc2>
 8010148:	9a05      	ldr	r2, [sp, #20]
 801014a:	f10b 0b01 	add.w	fp, fp, #1
 801014e:	e7b9      	b.n	80100c4 <_printf_float+0x310>
 8010150:	ee18 3a10 	vmov	r3, s16
 8010154:	4652      	mov	r2, sl
 8010156:	4631      	mov	r1, r6
 8010158:	4628      	mov	r0, r5
 801015a:	47b8      	blx	r7
 801015c:	3001      	adds	r0, #1
 801015e:	d1be      	bne.n	80100de <_printf_float+0x32a>
 8010160:	e689      	b.n	800fe76 <_printf_float+0xc2>
 8010162:	9a05      	ldr	r2, [sp, #20]
 8010164:	464b      	mov	r3, r9
 8010166:	4442      	add	r2, r8
 8010168:	4631      	mov	r1, r6
 801016a:	4628      	mov	r0, r5
 801016c:	47b8      	blx	r7
 801016e:	3001      	adds	r0, #1
 8010170:	d1c1      	bne.n	80100f6 <_printf_float+0x342>
 8010172:	e680      	b.n	800fe76 <_printf_float+0xc2>
 8010174:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010176:	2a01      	cmp	r2, #1
 8010178:	dc01      	bgt.n	801017e <_printf_float+0x3ca>
 801017a:	07db      	lsls	r3, r3, #31
 801017c:	d538      	bpl.n	80101f0 <_printf_float+0x43c>
 801017e:	2301      	movs	r3, #1
 8010180:	4642      	mov	r2, r8
 8010182:	4631      	mov	r1, r6
 8010184:	4628      	mov	r0, r5
 8010186:	47b8      	blx	r7
 8010188:	3001      	adds	r0, #1
 801018a:	f43f ae74 	beq.w	800fe76 <_printf_float+0xc2>
 801018e:	ee18 3a10 	vmov	r3, s16
 8010192:	4652      	mov	r2, sl
 8010194:	4631      	mov	r1, r6
 8010196:	4628      	mov	r0, r5
 8010198:	47b8      	blx	r7
 801019a:	3001      	adds	r0, #1
 801019c:	f43f ae6b 	beq.w	800fe76 <_printf_float+0xc2>
 80101a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80101a4:	2200      	movs	r2, #0
 80101a6:	2300      	movs	r3, #0
 80101a8:	f7f0 fc96 	bl	8000ad8 <__aeabi_dcmpeq>
 80101ac:	b9d8      	cbnz	r0, 80101e6 <_printf_float+0x432>
 80101ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101b0:	f108 0201 	add.w	r2, r8, #1
 80101b4:	3b01      	subs	r3, #1
 80101b6:	4631      	mov	r1, r6
 80101b8:	4628      	mov	r0, r5
 80101ba:	47b8      	blx	r7
 80101bc:	3001      	adds	r0, #1
 80101be:	d10e      	bne.n	80101de <_printf_float+0x42a>
 80101c0:	e659      	b.n	800fe76 <_printf_float+0xc2>
 80101c2:	2301      	movs	r3, #1
 80101c4:	4652      	mov	r2, sl
 80101c6:	4631      	mov	r1, r6
 80101c8:	4628      	mov	r0, r5
 80101ca:	47b8      	blx	r7
 80101cc:	3001      	adds	r0, #1
 80101ce:	f43f ae52 	beq.w	800fe76 <_printf_float+0xc2>
 80101d2:	f108 0801 	add.w	r8, r8, #1
 80101d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101d8:	3b01      	subs	r3, #1
 80101da:	4543      	cmp	r3, r8
 80101dc:	dcf1      	bgt.n	80101c2 <_printf_float+0x40e>
 80101de:	464b      	mov	r3, r9
 80101e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80101e4:	e6dc      	b.n	800ffa0 <_printf_float+0x1ec>
 80101e6:	f04f 0800 	mov.w	r8, #0
 80101ea:	f104 0a1a 	add.w	sl, r4, #26
 80101ee:	e7f2      	b.n	80101d6 <_printf_float+0x422>
 80101f0:	2301      	movs	r3, #1
 80101f2:	4642      	mov	r2, r8
 80101f4:	e7df      	b.n	80101b6 <_printf_float+0x402>
 80101f6:	2301      	movs	r3, #1
 80101f8:	464a      	mov	r2, r9
 80101fa:	4631      	mov	r1, r6
 80101fc:	4628      	mov	r0, r5
 80101fe:	47b8      	blx	r7
 8010200:	3001      	adds	r0, #1
 8010202:	f43f ae38 	beq.w	800fe76 <_printf_float+0xc2>
 8010206:	f108 0801 	add.w	r8, r8, #1
 801020a:	68e3      	ldr	r3, [r4, #12]
 801020c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801020e:	1a5b      	subs	r3, r3, r1
 8010210:	4543      	cmp	r3, r8
 8010212:	dcf0      	bgt.n	80101f6 <_printf_float+0x442>
 8010214:	e6fa      	b.n	801000c <_printf_float+0x258>
 8010216:	f04f 0800 	mov.w	r8, #0
 801021a:	f104 0919 	add.w	r9, r4, #25
 801021e:	e7f4      	b.n	801020a <_printf_float+0x456>

08010220 <_printf_common>:
 8010220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010224:	4616      	mov	r6, r2
 8010226:	4699      	mov	r9, r3
 8010228:	688a      	ldr	r2, [r1, #8]
 801022a:	690b      	ldr	r3, [r1, #16]
 801022c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010230:	4293      	cmp	r3, r2
 8010232:	bfb8      	it	lt
 8010234:	4613      	movlt	r3, r2
 8010236:	6033      	str	r3, [r6, #0]
 8010238:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801023c:	4607      	mov	r7, r0
 801023e:	460c      	mov	r4, r1
 8010240:	b10a      	cbz	r2, 8010246 <_printf_common+0x26>
 8010242:	3301      	adds	r3, #1
 8010244:	6033      	str	r3, [r6, #0]
 8010246:	6823      	ldr	r3, [r4, #0]
 8010248:	0699      	lsls	r1, r3, #26
 801024a:	bf42      	ittt	mi
 801024c:	6833      	ldrmi	r3, [r6, #0]
 801024e:	3302      	addmi	r3, #2
 8010250:	6033      	strmi	r3, [r6, #0]
 8010252:	6825      	ldr	r5, [r4, #0]
 8010254:	f015 0506 	ands.w	r5, r5, #6
 8010258:	d106      	bne.n	8010268 <_printf_common+0x48>
 801025a:	f104 0a19 	add.w	sl, r4, #25
 801025e:	68e3      	ldr	r3, [r4, #12]
 8010260:	6832      	ldr	r2, [r6, #0]
 8010262:	1a9b      	subs	r3, r3, r2
 8010264:	42ab      	cmp	r3, r5
 8010266:	dc26      	bgt.n	80102b6 <_printf_common+0x96>
 8010268:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801026c:	1e13      	subs	r3, r2, #0
 801026e:	6822      	ldr	r2, [r4, #0]
 8010270:	bf18      	it	ne
 8010272:	2301      	movne	r3, #1
 8010274:	0692      	lsls	r2, r2, #26
 8010276:	d42b      	bmi.n	80102d0 <_printf_common+0xb0>
 8010278:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801027c:	4649      	mov	r1, r9
 801027e:	4638      	mov	r0, r7
 8010280:	47c0      	blx	r8
 8010282:	3001      	adds	r0, #1
 8010284:	d01e      	beq.n	80102c4 <_printf_common+0xa4>
 8010286:	6823      	ldr	r3, [r4, #0]
 8010288:	68e5      	ldr	r5, [r4, #12]
 801028a:	6832      	ldr	r2, [r6, #0]
 801028c:	f003 0306 	and.w	r3, r3, #6
 8010290:	2b04      	cmp	r3, #4
 8010292:	bf08      	it	eq
 8010294:	1aad      	subeq	r5, r5, r2
 8010296:	68a3      	ldr	r3, [r4, #8]
 8010298:	6922      	ldr	r2, [r4, #16]
 801029a:	bf0c      	ite	eq
 801029c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80102a0:	2500      	movne	r5, #0
 80102a2:	4293      	cmp	r3, r2
 80102a4:	bfc4      	itt	gt
 80102a6:	1a9b      	subgt	r3, r3, r2
 80102a8:	18ed      	addgt	r5, r5, r3
 80102aa:	2600      	movs	r6, #0
 80102ac:	341a      	adds	r4, #26
 80102ae:	42b5      	cmp	r5, r6
 80102b0:	d11a      	bne.n	80102e8 <_printf_common+0xc8>
 80102b2:	2000      	movs	r0, #0
 80102b4:	e008      	b.n	80102c8 <_printf_common+0xa8>
 80102b6:	2301      	movs	r3, #1
 80102b8:	4652      	mov	r2, sl
 80102ba:	4649      	mov	r1, r9
 80102bc:	4638      	mov	r0, r7
 80102be:	47c0      	blx	r8
 80102c0:	3001      	adds	r0, #1
 80102c2:	d103      	bne.n	80102cc <_printf_common+0xac>
 80102c4:	f04f 30ff 	mov.w	r0, #4294967295
 80102c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102cc:	3501      	adds	r5, #1
 80102ce:	e7c6      	b.n	801025e <_printf_common+0x3e>
 80102d0:	18e1      	adds	r1, r4, r3
 80102d2:	1c5a      	adds	r2, r3, #1
 80102d4:	2030      	movs	r0, #48	; 0x30
 80102d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80102da:	4422      	add	r2, r4
 80102dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80102e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80102e4:	3302      	adds	r3, #2
 80102e6:	e7c7      	b.n	8010278 <_printf_common+0x58>
 80102e8:	2301      	movs	r3, #1
 80102ea:	4622      	mov	r2, r4
 80102ec:	4649      	mov	r1, r9
 80102ee:	4638      	mov	r0, r7
 80102f0:	47c0      	blx	r8
 80102f2:	3001      	adds	r0, #1
 80102f4:	d0e6      	beq.n	80102c4 <_printf_common+0xa4>
 80102f6:	3601      	adds	r6, #1
 80102f8:	e7d9      	b.n	80102ae <_printf_common+0x8e>
	...

080102fc <_printf_i>:
 80102fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010300:	460c      	mov	r4, r1
 8010302:	4691      	mov	r9, r2
 8010304:	7e27      	ldrb	r7, [r4, #24]
 8010306:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010308:	2f78      	cmp	r7, #120	; 0x78
 801030a:	4680      	mov	r8, r0
 801030c:	469a      	mov	sl, r3
 801030e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010312:	d807      	bhi.n	8010324 <_printf_i+0x28>
 8010314:	2f62      	cmp	r7, #98	; 0x62
 8010316:	d80a      	bhi.n	801032e <_printf_i+0x32>
 8010318:	2f00      	cmp	r7, #0
 801031a:	f000 80d8 	beq.w	80104ce <_printf_i+0x1d2>
 801031e:	2f58      	cmp	r7, #88	; 0x58
 8010320:	f000 80a3 	beq.w	801046a <_printf_i+0x16e>
 8010324:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010328:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801032c:	e03a      	b.n	80103a4 <_printf_i+0xa8>
 801032e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010332:	2b15      	cmp	r3, #21
 8010334:	d8f6      	bhi.n	8010324 <_printf_i+0x28>
 8010336:	a001      	add	r0, pc, #4	; (adr r0, 801033c <_printf_i+0x40>)
 8010338:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801033c:	08010395 	.word	0x08010395
 8010340:	080103a9 	.word	0x080103a9
 8010344:	08010325 	.word	0x08010325
 8010348:	08010325 	.word	0x08010325
 801034c:	08010325 	.word	0x08010325
 8010350:	08010325 	.word	0x08010325
 8010354:	080103a9 	.word	0x080103a9
 8010358:	08010325 	.word	0x08010325
 801035c:	08010325 	.word	0x08010325
 8010360:	08010325 	.word	0x08010325
 8010364:	08010325 	.word	0x08010325
 8010368:	080104b5 	.word	0x080104b5
 801036c:	080103d9 	.word	0x080103d9
 8010370:	08010497 	.word	0x08010497
 8010374:	08010325 	.word	0x08010325
 8010378:	08010325 	.word	0x08010325
 801037c:	080104d7 	.word	0x080104d7
 8010380:	08010325 	.word	0x08010325
 8010384:	080103d9 	.word	0x080103d9
 8010388:	08010325 	.word	0x08010325
 801038c:	08010325 	.word	0x08010325
 8010390:	0801049f 	.word	0x0801049f
 8010394:	680b      	ldr	r3, [r1, #0]
 8010396:	1d1a      	adds	r2, r3, #4
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	600a      	str	r2, [r1, #0]
 801039c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80103a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80103a4:	2301      	movs	r3, #1
 80103a6:	e0a3      	b.n	80104f0 <_printf_i+0x1f4>
 80103a8:	6825      	ldr	r5, [r4, #0]
 80103aa:	6808      	ldr	r0, [r1, #0]
 80103ac:	062e      	lsls	r6, r5, #24
 80103ae:	f100 0304 	add.w	r3, r0, #4
 80103b2:	d50a      	bpl.n	80103ca <_printf_i+0xce>
 80103b4:	6805      	ldr	r5, [r0, #0]
 80103b6:	600b      	str	r3, [r1, #0]
 80103b8:	2d00      	cmp	r5, #0
 80103ba:	da03      	bge.n	80103c4 <_printf_i+0xc8>
 80103bc:	232d      	movs	r3, #45	; 0x2d
 80103be:	426d      	negs	r5, r5
 80103c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80103c4:	485e      	ldr	r0, [pc, #376]	; (8010540 <_printf_i+0x244>)
 80103c6:	230a      	movs	r3, #10
 80103c8:	e019      	b.n	80103fe <_printf_i+0x102>
 80103ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80103ce:	6805      	ldr	r5, [r0, #0]
 80103d0:	600b      	str	r3, [r1, #0]
 80103d2:	bf18      	it	ne
 80103d4:	b22d      	sxthne	r5, r5
 80103d6:	e7ef      	b.n	80103b8 <_printf_i+0xbc>
 80103d8:	680b      	ldr	r3, [r1, #0]
 80103da:	6825      	ldr	r5, [r4, #0]
 80103dc:	1d18      	adds	r0, r3, #4
 80103de:	6008      	str	r0, [r1, #0]
 80103e0:	0628      	lsls	r0, r5, #24
 80103e2:	d501      	bpl.n	80103e8 <_printf_i+0xec>
 80103e4:	681d      	ldr	r5, [r3, #0]
 80103e6:	e002      	b.n	80103ee <_printf_i+0xf2>
 80103e8:	0669      	lsls	r1, r5, #25
 80103ea:	d5fb      	bpl.n	80103e4 <_printf_i+0xe8>
 80103ec:	881d      	ldrh	r5, [r3, #0]
 80103ee:	4854      	ldr	r0, [pc, #336]	; (8010540 <_printf_i+0x244>)
 80103f0:	2f6f      	cmp	r7, #111	; 0x6f
 80103f2:	bf0c      	ite	eq
 80103f4:	2308      	moveq	r3, #8
 80103f6:	230a      	movne	r3, #10
 80103f8:	2100      	movs	r1, #0
 80103fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80103fe:	6866      	ldr	r6, [r4, #4]
 8010400:	60a6      	str	r6, [r4, #8]
 8010402:	2e00      	cmp	r6, #0
 8010404:	bfa2      	ittt	ge
 8010406:	6821      	ldrge	r1, [r4, #0]
 8010408:	f021 0104 	bicge.w	r1, r1, #4
 801040c:	6021      	strge	r1, [r4, #0]
 801040e:	b90d      	cbnz	r5, 8010414 <_printf_i+0x118>
 8010410:	2e00      	cmp	r6, #0
 8010412:	d04d      	beq.n	80104b0 <_printf_i+0x1b4>
 8010414:	4616      	mov	r6, r2
 8010416:	fbb5 f1f3 	udiv	r1, r5, r3
 801041a:	fb03 5711 	mls	r7, r3, r1, r5
 801041e:	5dc7      	ldrb	r7, [r0, r7]
 8010420:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010424:	462f      	mov	r7, r5
 8010426:	42bb      	cmp	r3, r7
 8010428:	460d      	mov	r5, r1
 801042a:	d9f4      	bls.n	8010416 <_printf_i+0x11a>
 801042c:	2b08      	cmp	r3, #8
 801042e:	d10b      	bne.n	8010448 <_printf_i+0x14c>
 8010430:	6823      	ldr	r3, [r4, #0]
 8010432:	07df      	lsls	r7, r3, #31
 8010434:	d508      	bpl.n	8010448 <_printf_i+0x14c>
 8010436:	6923      	ldr	r3, [r4, #16]
 8010438:	6861      	ldr	r1, [r4, #4]
 801043a:	4299      	cmp	r1, r3
 801043c:	bfde      	ittt	le
 801043e:	2330      	movle	r3, #48	; 0x30
 8010440:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010444:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010448:	1b92      	subs	r2, r2, r6
 801044a:	6122      	str	r2, [r4, #16]
 801044c:	f8cd a000 	str.w	sl, [sp]
 8010450:	464b      	mov	r3, r9
 8010452:	aa03      	add	r2, sp, #12
 8010454:	4621      	mov	r1, r4
 8010456:	4640      	mov	r0, r8
 8010458:	f7ff fee2 	bl	8010220 <_printf_common>
 801045c:	3001      	adds	r0, #1
 801045e:	d14c      	bne.n	80104fa <_printf_i+0x1fe>
 8010460:	f04f 30ff 	mov.w	r0, #4294967295
 8010464:	b004      	add	sp, #16
 8010466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801046a:	4835      	ldr	r0, [pc, #212]	; (8010540 <_printf_i+0x244>)
 801046c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010470:	6823      	ldr	r3, [r4, #0]
 8010472:	680e      	ldr	r6, [r1, #0]
 8010474:	061f      	lsls	r7, r3, #24
 8010476:	f856 5b04 	ldr.w	r5, [r6], #4
 801047a:	600e      	str	r6, [r1, #0]
 801047c:	d514      	bpl.n	80104a8 <_printf_i+0x1ac>
 801047e:	07d9      	lsls	r1, r3, #31
 8010480:	bf44      	itt	mi
 8010482:	f043 0320 	orrmi.w	r3, r3, #32
 8010486:	6023      	strmi	r3, [r4, #0]
 8010488:	b91d      	cbnz	r5, 8010492 <_printf_i+0x196>
 801048a:	6823      	ldr	r3, [r4, #0]
 801048c:	f023 0320 	bic.w	r3, r3, #32
 8010490:	6023      	str	r3, [r4, #0]
 8010492:	2310      	movs	r3, #16
 8010494:	e7b0      	b.n	80103f8 <_printf_i+0xfc>
 8010496:	6823      	ldr	r3, [r4, #0]
 8010498:	f043 0320 	orr.w	r3, r3, #32
 801049c:	6023      	str	r3, [r4, #0]
 801049e:	2378      	movs	r3, #120	; 0x78
 80104a0:	4828      	ldr	r0, [pc, #160]	; (8010544 <_printf_i+0x248>)
 80104a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80104a6:	e7e3      	b.n	8010470 <_printf_i+0x174>
 80104a8:	065e      	lsls	r6, r3, #25
 80104aa:	bf48      	it	mi
 80104ac:	b2ad      	uxthmi	r5, r5
 80104ae:	e7e6      	b.n	801047e <_printf_i+0x182>
 80104b0:	4616      	mov	r6, r2
 80104b2:	e7bb      	b.n	801042c <_printf_i+0x130>
 80104b4:	680b      	ldr	r3, [r1, #0]
 80104b6:	6826      	ldr	r6, [r4, #0]
 80104b8:	6960      	ldr	r0, [r4, #20]
 80104ba:	1d1d      	adds	r5, r3, #4
 80104bc:	600d      	str	r5, [r1, #0]
 80104be:	0635      	lsls	r5, r6, #24
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	d501      	bpl.n	80104c8 <_printf_i+0x1cc>
 80104c4:	6018      	str	r0, [r3, #0]
 80104c6:	e002      	b.n	80104ce <_printf_i+0x1d2>
 80104c8:	0671      	lsls	r1, r6, #25
 80104ca:	d5fb      	bpl.n	80104c4 <_printf_i+0x1c8>
 80104cc:	8018      	strh	r0, [r3, #0]
 80104ce:	2300      	movs	r3, #0
 80104d0:	6123      	str	r3, [r4, #16]
 80104d2:	4616      	mov	r6, r2
 80104d4:	e7ba      	b.n	801044c <_printf_i+0x150>
 80104d6:	680b      	ldr	r3, [r1, #0]
 80104d8:	1d1a      	adds	r2, r3, #4
 80104da:	600a      	str	r2, [r1, #0]
 80104dc:	681e      	ldr	r6, [r3, #0]
 80104de:	6862      	ldr	r2, [r4, #4]
 80104e0:	2100      	movs	r1, #0
 80104e2:	4630      	mov	r0, r6
 80104e4:	f7ef fe84 	bl	80001f0 <memchr>
 80104e8:	b108      	cbz	r0, 80104ee <_printf_i+0x1f2>
 80104ea:	1b80      	subs	r0, r0, r6
 80104ec:	6060      	str	r0, [r4, #4]
 80104ee:	6863      	ldr	r3, [r4, #4]
 80104f0:	6123      	str	r3, [r4, #16]
 80104f2:	2300      	movs	r3, #0
 80104f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104f8:	e7a8      	b.n	801044c <_printf_i+0x150>
 80104fa:	6923      	ldr	r3, [r4, #16]
 80104fc:	4632      	mov	r2, r6
 80104fe:	4649      	mov	r1, r9
 8010500:	4640      	mov	r0, r8
 8010502:	47d0      	blx	sl
 8010504:	3001      	adds	r0, #1
 8010506:	d0ab      	beq.n	8010460 <_printf_i+0x164>
 8010508:	6823      	ldr	r3, [r4, #0]
 801050a:	079b      	lsls	r3, r3, #30
 801050c:	d413      	bmi.n	8010536 <_printf_i+0x23a>
 801050e:	68e0      	ldr	r0, [r4, #12]
 8010510:	9b03      	ldr	r3, [sp, #12]
 8010512:	4298      	cmp	r0, r3
 8010514:	bfb8      	it	lt
 8010516:	4618      	movlt	r0, r3
 8010518:	e7a4      	b.n	8010464 <_printf_i+0x168>
 801051a:	2301      	movs	r3, #1
 801051c:	4632      	mov	r2, r6
 801051e:	4649      	mov	r1, r9
 8010520:	4640      	mov	r0, r8
 8010522:	47d0      	blx	sl
 8010524:	3001      	adds	r0, #1
 8010526:	d09b      	beq.n	8010460 <_printf_i+0x164>
 8010528:	3501      	adds	r5, #1
 801052a:	68e3      	ldr	r3, [r4, #12]
 801052c:	9903      	ldr	r1, [sp, #12]
 801052e:	1a5b      	subs	r3, r3, r1
 8010530:	42ab      	cmp	r3, r5
 8010532:	dcf2      	bgt.n	801051a <_printf_i+0x21e>
 8010534:	e7eb      	b.n	801050e <_printf_i+0x212>
 8010536:	2500      	movs	r5, #0
 8010538:	f104 0619 	add.w	r6, r4, #25
 801053c:	e7f5      	b.n	801052a <_printf_i+0x22e>
 801053e:	bf00      	nop
 8010540:	08012c62 	.word	0x08012c62
 8010544:	08012c73 	.word	0x08012c73

08010548 <siprintf>:
 8010548:	b40e      	push	{r1, r2, r3}
 801054a:	b500      	push	{lr}
 801054c:	b09c      	sub	sp, #112	; 0x70
 801054e:	ab1d      	add	r3, sp, #116	; 0x74
 8010550:	9002      	str	r0, [sp, #8]
 8010552:	9006      	str	r0, [sp, #24]
 8010554:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010558:	4809      	ldr	r0, [pc, #36]	; (8010580 <siprintf+0x38>)
 801055a:	9107      	str	r1, [sp, #28]
 801055c:	9104      	str	r1, [sp, #16]
 801055e:	4909      	ldr	r1, [pc, #36]	; (8010584 <siprintf+0x3c>)
 8010560:	f853 2b04 	ldr.w	r2, [r3], #4
 8010564:	9105      	str	r1, [sp, #20]
 8010566:	6800      	ldr	r0, [r0, #0]
 8010568:	9301      	str	r3, [sp, #4]
 801056a:	a902      	add	r1, sp, #8
 801056c:	f001 fb42 	bl	8011bf4 <_svfiprintf_r>
 8010570:	9b02      	ldr	r3, [sp, #8]
 8010572:	2200      	movs	r2, #0
 8010574:	701a      	strb	r2, [r3, #0]
 8010576:	b01c      	add	sp, #112	; 0x70
 8010578:	f85d eb04 	ldr.w	lr, [sp], #4
 801057c:	b003      	add	sp, #12
 801057e:	4770      	bx	lr
 8010580:	20000180 	.word	0x20000180
 8010584:	ffff0208 	.word	0xffff0208

08010588 <strcat>:
 8010588:	b510      	push	{r4, lr}
 801058a:	4602      	mov	r2, r0
 801058c:	7814      	ldrb	r4, [r2, #0]
 801058e:	4613      	mov	r3, r2
 8010590:	3201      	adds	r2, #1
 8010592:	2c00      	cmp	r4, #0
 8010594:	d1fa      	bne.n	801058c <strcat+0x4>
 8010596:	3b01      	subs	r3, #1
 8010598:	f811 2b01 	ldrb.w	r2, [r1], #1
 801059c:	f803 2f01 	strb.w	r2, [r3, #1]!
 80105a0:	2a00      	cmp	r2, #0
 80105a2:	d1f9      	bne.n	8010598 <strcat+0x10>
 80105a4:	bd10      	pop	{r4, pc}

080105a6 <quorem>:
 80105a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105aa:	6903      	ldr	r3, [r0, #16]
 80105ac:	690c      	ldr	r4, [r1, #16]
 80105ae:	42a3      	cmp	r3, r4
 80105b0:	4607      	mov	r7, r0
 80105b2:	f2c0 8081 	blt.w	80106b8 <quorem+0x112>
 80105b6:	3c01      	subs	r4, #1
 80105b8:	f101 0814 	add.w	r8, r1, #20
 80105bc:	f100 0514 	add.w	r5, r0, #20
 80105c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80105c4:	9301      	str	r3, [sp, #4]
 80105c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80105ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80105ce:	3301      	adds	r3, #1
 80105d0:	429a      	cmp	r2, r3
 80105d2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80105d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80105da:	fbb2 f6f3 	udiv	r6, r2, r3
 80105de:	d331      	bcc.n	8010644 <quorem+0x9e>
 80105e0:	f04f 0e00 	mov.w	lr, #0
 80105e4:	4640      	mov	r0, r8
 80105e6:	46ac      	mov	ip, r5
 80105e8:	46f2      	mov	sl, lr
 80105ea:	f850 2b04 	ldr.w	r2, [r0], #4
 80105ee:	b293      	uxth	r3, r2
 80105f0:	fb06 e303 	mla	r3, r6, r3, lr
 80105f4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80105f8:	b29b      	uxth	r3, r3
 80105fa:	ebaa 0303 	sub.w	r3, sl, r3
 80105fe:	0c12      	lsrs	r2, r2, #16
 8010600:	f8dc a000 	ldr.w	sl, [ip]
 8010604:	fb06 e202 	mla	r2, r6, r2, lr
 8010608:	fa13 f38a 	uxtah	r3, r3, sl
 801060c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010610:	fa1f fa82 	uxth.w	sl, r2
 8010614:	f8dc 2000 	ldr.w	r2, [ip]
 8010618:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801061c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010620:	b29b      	uxth	r3, r3
 8010622:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010626:	4581      	cmp	r9, r0
 8010628:	f84c 3b04 	str.w	r3, [ip], #4
 801062c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010630:	d2db      	bcs.n	80105ea <quorem+0x44>
 8010632:	f855 300b 	ldr.w	r3, [r5, fp]
 8010636:	b92b      	cbnz	r3, 8010644 <quorem+0x9e>
 8010638:	9b01      	ldr	r3, [sp, #4]
 801063a:	3b04      	subs	r3, #4
 801063c:	429d      	cmp	r5, r3
 801063e:	461a      	mov	r2, r3
 8010640:	d32e      	bcc.n	80106a0 <quorem+0xfa>
 8010642:	613c      	str	r4, [r7, #16]
 8010644:	4638      	mov	r0, r7
 8010646:	f001 f8bf 	bl	80117c8 <__mcmp>
 801064a:	2800      	cmp	r0, #0
 801064c:	db24      	blt.n	8010698 <quorem+0xf2>
 801064e:	3601      	adds	r6, #1
 8010650:	4628      	mov	r0, r5
 8010652:	f04f 0c00 	mov.w	ip, #0
 8010656:	f858 2b04 	ldr.w	r2, [r8], #4
 801065a:	f8d0 e000 	ldr.w	lr, [r0]
 801065e:	b293      	uxth	r3, r2
 8010660:	ebac 0303 	sub.w	r3, ip, r3
 8010664:	0c12      	lsrs	r2, r2, #16
 8010666:	fa13 f38e 	uxtah	r3, r3, lr
 801066a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801066e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010672:	b29b      	uxth	r3, r3
 8010674:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010678:	45c1      	cmp	r9, r8
 801067a:	f840 3b04 	str.w	r3, [r0], #4
 801067e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010682:	d2e8      	bcs.n	8010656 <quorem+0xb0>
 8010684:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010688:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801068c:	b922      	cbnz	r2, 8010698 <quorem+0xf2>
 801068e:	3b04      	subs	r3, #4
 8010690:	429d      	cmp	r5, r3
 8010692:	461a      	mov	r2, r3
 8010694:	d30a      	bcc.n	80106ac <quorem+0x106>
 8010696:	613c      	str	r4, [r7, #16]
 8010698:	4630      	mov	r0, r6
 801069a:	b003      	add	sp, #12
 801069c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106a0:	6812      	ldr	r2, [r2, #0]
 80106a2:	3b04      	subs	r3, #4
 80106a4:	2a00      	cmp	r2, #0
 80106a6:	d1cc      	bne.n	8010642 <quorem+0x9c>
 80106a8:	3c01      	subs	r4, #1
 80106aa:	e7c7      	b.n	801063c <quorem+0x96>
 80106ac:	6812      	ldr	r2, [r2, #0]
 80106ae:	3b04      	subs	r3, #4
 80106b0:	2a00      	cmp	r2, #0
 80106b2:	d1f0      	bne.n	8010696 <quorem+0xf0>
 80106b4:	3c01      	subs	r4, #1
 80106b6:	e7eb      	b.n	8010690 <quorem+0xea>
 80106b8:	2000      	movs	r0, #0
 80106ba:	e7ee      	b.n	801069a <quorem+0xf4>
 80106bc:	0000      	movs	r0, r0
	...

080106c0 <_dtoa_r>:
 80106c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106c4:	ed2d 8b02 	vpush	{d8}
 80106c8:	ec57 6b10 	vmov	r6, r7, d0
 80106cc:	b095      	sub	sp, #84	; 0x54
 80106ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80106d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80106d4:	9105      	str	r1, [sp, #20]
 80106d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80106da:	4604      	mov	r4, r0
 80106dc:	9209      	str	r2, [sp, #36]	; 0x24
 80106de:	930f      	str	r3, [sp, #60]	; 0x3c
 80106e0:	b975      	cbnz	r5, 8010700 <_dtoa_r+0x40>
 80106e2:	2010      	movs	r0, #16
 80106e4:	f000 fddc 	bl	80112a0 <malloc>
 80106e8:	4602      	mov	r2, r0
 80106ea:	6260      	str	r0, [r4, #36]	; 0x24
 80106ec:	b920      	cbnz	r0, 80106f8 <_dtoa_r+0x38>
 80106ee:	4bb2      	ldr	r3, [pc, #712]	; (80109b8 <_dtoa_r+0x2f8>)
 80106f0:	21ea      	movs	r1, #234	; 0xea
 80106f2:	48b2      	ldr	r0, [pc, #712]	; (80109bc <_dtoa_r+0x2fc>)
 80106f4:	f001 fb8e 	bl	8011e14 <__assert_func>
 80106f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80106fc:	6005      	str	r5, [r0, #0]
 80106fe:	60c5      	str	r5, [r0, #12]
 8010700:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010702:	6819      	ldr	r1, [r3, #0]
 8010704:	b151      	cbz	r1, 801071c <_dtoa_r+0x5c>
 8010706:	685a      	ldr	r2, [r3, #4]
 8010708:	604a      	str	r2, [r1, #4]
 801070a:	2301      	movs	r3, #1
 801070c:	4093      	lsls	r3, r2
 801070e:	608b      	str	r3, [r1, #8]
 8010710:	4620      	mov	r0, r4
 8010712:	f000 fe1b 	bl	801134c <_Bfree>
 8010716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010718:	2200      	movs	r2, #0
 801071a:	601a      	str	r2, [r3, #0]
 801071c:	1e3b      	subs	r3, r7, #0
 801071e:	bfb9      	ittee	lt
 8010720:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010724:	9303      	strlt	r3, [sp, #12]
 8010726:	2300      	movge	r3, #0
 8010728:	f8c8 3000 	strge.w	r3, [r8]
 801072c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010730:	4ba3      	ldr	r3, [pc, #652]	; (80109c0 <_dtoa_r+0x300>)
 8010732:	bfbc      	itt	lt
 8010734:	2201      	movlt	r2, #1
 8010736:	f8c8 2000 	strlt.w	r2, [r8]
 801073a:	ea33 0309 	bics.w	r3, r3, r9
 801073e:	d11b      	bne.n	8010778 <_dtoa_r+0xb8>
 8010740:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010742:	f242 730f 	movw	r3, #9999	; 0x270f
 8010746:	6013      	str	r3, [r2, #0]
 8010748:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801074c:	4333      	orrs	r3, r6
 801074e:	f000 857a 	beq.w	8011246 <_dtoa_r+0xb86>
 8010752:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010754:	b963      	cbnz	r3, 8010770 <_dtoa_r+0xb0>
 8010756:	4b9b      	ldr	r3, [pc, #620]	; (80109c4 <_dtoa_r+0x304>)
 8010758:	e024      	b.n	80107a4 <_dtoa_r+0xe4>
 801075a:	4b9b      	ldr	r3, [pc, #620]	; (80109c8 <_dtoa_r+0x308>)
 801075c:	9300      	str	r3, [sp, #0]
 801075e:	3308      	adds	r3, #8
 8010760:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010762:	6013      	str	r3, [r2, #0]
 8010764:	9800      	ldr	r0, [sp, #0]
 8010766:	b015      	add	sp, #84	; 0x54
 8010768:	ecbd 8b02 	vpop	{d8}
 801076c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010770:	4b94      	ldr	r3, [pc, #592]	; (80109c4 <_dtoa_r+0x304>)
 8010772:	9300      	str	r3, [sp, #0]
 8010774:	3303      	adds	r3, #3
 8010776:	e7f3      	b.n	8010760 <_dtoa_r+0xa0>
 8010778:	ed9d 7b02 	vldr	d7, [sp, #8]
 801077c:	2200      	movs	r2, #0
 801077e:	ec51 0b17 	vmov	r0, r1, d7
 8010782:	2300      	movs	r3, #0
 8010784:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010788:	f7f0 f9a6 	bl	8000ad8 <__aeabi_dcmpeq>
 801078c:	4680      	mov	r8, r0
 801078e:	b158      	cbz	r0, 80107a8 <_dtoa_r+0xe8>
 8010790:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010792:	2301      	movs	r3, #1
 8010794:	6013      	str	r3, [r2, #0]
 8010796:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010798:	2b00      	cmp	r3, #0
 801079a:	f000 8551 	beq.w	8011240 <_dtoa_r+0xb80>
 801079e:	488b      	ldr	r0, [pc, #556]	; (80109cc <_dtoa_r+0x30c>)
 80107a0:	6018      	str	r0, [r3, #0]
 80107a2:	1e43      	subs	r3, r0, #1
 80107a4:	9300      	str	r3, [sp, #0]
 80107a6:	e7dd      	b.n	8010764 <_dtoa_r+0xa4>
 80107a8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80107ac:	aa12      	add	r2, sp, #72	; 0x48
 80107ae:	a913      	add	r1, sp, #76	; 0x4c
 80107b0:	4620      	mov	r0, r4
 80107b2:	f001 f8ad 	bl	8011910 <__d2b>
 80107b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80107ba:	4683      	mov	fp, r0
 80107bc:	2d00      	cmp	r5, #0
 80107be:	d07c      	beq.n	80108ba <_dtoa_r+0x1fa>
 80107c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80107c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80107ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80107ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80107d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80107d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80107da:	4b7d      	ldr	r3, [pc, #500]	; (80109d0 <_dtoa_r+0x310>)
 80107dc:	2200      	movs	r2, #0
 80107de:	4630      	mov	r0, r6
 80107e0:	4639      	mov	r1, r7
 80107e2:	f7ef fd59 	bl	8000298 <__aeabi_dsub>
 80107e6:	a36e      	add	r3, pc, #440	; (adr r3, 80109a0 <_dtoa_r+0x2e0>)
 80107e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ec:	f7ef ff0c 	bl	8000608 <__aeabi_dmul>
 80107f0:	a36d      	add	r3, pc, #436	; (adr r3, 80109a8 <_dtoa_r+0x2e8>)
 80107f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f6:	f7ef fd51 	bl	800029c <__adddf3>
 80107fa:	4606      	mov	r6, r0
 80107fc:	4628      	mov	r0, r5
 80107fe:	460f      	mov	r7, r1
 8010800:	f7ef fe98 	bl	8000534 <__aeabi_i2d>
 8010804:	a36a      	add	r3, pc, #424	; (adr r3, 80109b0 <_dtoa_r+0x2f0>)
 8010806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801080a:	f7ef fefd 	bl	8000608 <__aeabi_dmul>
 801080e:	4602      	mov	r2, r0
 8010810:	460b      	mov	r3, r1
 8010812:	4630      	mov	r0, r6
 8010814:	4639      	mov	r1, r7
 8010816:	f7ef fd41 	bl	800029c <__adddf3>
 801081a:	4606      	mov	r6, r0
 801081c:	460f      	mov	r7, r1
 801081e:	f7f0 f9a3 	bl	8000b68 <__aeabi_d2iz>
 8010822:	2200      	movs	r2, #0
 8010824:	4682      	mov	sl, r0
 8010826:	2300      	movs	r3, #0
 8010828:	4630      	mov	r0, r6
 801082a:	4639      	mov	r1, r7
 801082c:	f7f0 f95e 	bl	8000aec <__aeabi_dcmplt>
 8010830:	b148      	cbz	r0, 8010846 <_dtoa_r+0x186>
 8010832:	4650      	mov	r0, sl
 8010834:	f7ef fe7e 	bl	8000534 <__aeabi_i2d>
 8010838:	4632      	mov	r2, r6
 801083a:	463b      	mov	r3, r7
 801083c:	f7f0 f94c 	bl	8000ad8 <__aeabi_dcmpeq>
 8010840:	b908      	cbnz	r0, 8010846 <_dtoa_r+0x186>
 8010842:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010846:	f1ba 0f16 	cmp.w	sl, #22
 801084a:	d854      	bhi.n	80108f6 <_dtoa_r+0x236>
 801084c:	4b61      	ldr	r3, [pc, #388]	; (80109d4 <_dtoa_r+0x314>)
 801084e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010856:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801085a:	f7f0 f947 	bl	8000aec <__aeabi_dcmplt>
 801085e:	2800      	cmp	r0, #0
 8010860:	d04b      	beq.n	80108fa <_dtoa_r+0x23a>
 8010862:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010866:	2300      	movs	r3, #0
 8010868:	930e      	str	r3, [sp, #56]	; 0x38
 801086a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801086c:	1b5d      	subs	r5, r3, r5
 801086e:	1e6b      	subs	r3, r5, #1
 8010870:	9304      	str	r3, [sp, #16]
 8010872:	bf43      	ittte	mi
 8010874:	2300      	movmi	r3, #0
 8010876:	f1c5 0801 	rsbmi	r8, r5, #1
 801087a:	9304      	strmi	r3, [sp, #16]
 801087c:	f04f 0800 	movpl.w	r8, #0
 8010880:	f1ba 0f00 	cmp.w	sl, #0
 8010884:	db3b      	blt.n	80108fe <_dtoa_r+0x23e>
 8010886:	9b04      	ldr	r3, [sp, #16]
 8010888:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801088c:	4453      	add	r3, sl
 801088e:	9304      	str	r3, [sp, #16]
 8010890:	2300      	movs	r3, #0
 8010892:	9306      	str	r3, [sp, #24]
 8010894:	9b05      	ldr	r3, [sp, #20]
 8010896:	2b09      	cmp	r3, #9
 8010898:	d869      	bhi.n	801096e <_dtoa_r+0x2ae>
 801089a:	2b05      	cmp	r3, #5
 801089c:	bfc4      	itt	gt
 801089e:	3b04      	subgt	r3, #4
 80108a0:	9305      	strgt	r3, [sp, #20]
 80108a2:	9b05      	ldr	r3, [sp, #20]
 80108a4:	f1a3 0302 	sub.w	r3, r3, #2
 80108a8:	bfcc      	ite	gt
 80108aa:	2500      	movgt	r5, #0
 80108ac:	2501      	movle	r5, #1
 80108ae:	2b03      	cmp	r3, #3
 80108b0:	d869      	bhi.n	8010986 <_dtoa_r+0x2c6>
 80108b2:	e8df f003 	tbb	[pc, r3]
 80108b6:	4e2c      	.short	0x4e2c
 80108b8:	5a4c      	.short	0x5a4c
 80108ba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80108be:	441d      	add	r5, r3
 80108c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80108c4:	2b20      	cmp	r3, #32
 80108c6:	bfc1      	itttt	gt
 80108c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80108cc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80108d0:	fa09 f303 	lslgt.w	r3, r9, r3
 80108d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80108d8:	bfda      	itte	le
 80108da:	f1c3 0320 	rsble	r3, r3, #32
 80108de:	fa06 f003 	lslle.w	r0, r6, r3
 80108e2:	4318      	orrgt	r0, r3
 80108e4:	f7ef fe16 	bl	8000514 <__aeabi_ui2d>
 80108e8:	2301      	movs	r3, #1
 80108ea:	4606      	mov	r6, r0
 80108ec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80108f0:	3d01      	subs	r5, #1
 80108f2:	9310      	str	r3, [sp, #64]	; 0x40
 80108f4:	e771      	b.n	80107da <_dtoa_r+0x11a>
 80108f6:	2301      	movs	r3, #1
 80108f8:	e7b6      	b.n	8010868 <_dtoa_r+0x1a8>
 80108fa:	900e      	str	r0, [sp, #56]	; 0x38
 80108fc:	e7b5      	b.n	801086a <_dtoa_r+0x1aa>
 80108fe:	f1ca 0300 	rsb	r3, sl, #0
 8010902:	9306      	str	r3, [sp, #24]
 8010904:	2300      	movs	r3, #0
 8010906:	eba8 080a 	sub.w	r8, r8, sl
 801090a:	930d      	str	r3, [sp, #52]	; 0x34
 801090c:	e7c2      	b.n	8010894 <_dtoa_r+0x1d4>
 801090e:	2300      	movs	r3, #0
 8010910:	9308      	str	r3, [sp, #32]
 8010912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010914:	2b00      	cmp	r3, #0
 8010916:	dc39      	bgt.n	801098c <_dtoa_r+0x2cc>
 8010918:	f04f 0901 	mov.w	r9, #1
 801091c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010920:	464b      	mov	r3, r9
 8010922:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010926:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010928:	2200      	movs	r2, #0
 801092a:	6042      	str	r2, [r0, #4]
 801092c:	2204      	movs	r2, #4
 801092e:	f102 0614 	add.w	r6, r2, #20
 8010932:	429e      	cmp	r6, r3
 8010934:	6841      	ldr	r1, [r0, #4]
 8010936:	d92f      	bls.n	8010998 <_dtoa_r+0x2d8>
 8010938:	4620      	mov	r0, r4
 801093a:	f000 fcc7 	bl	80112cc <_Balloc>
 801093e:	9000      	str	r0, [sp, #0]
 8010940:	2800      	cmp	r0, #0
 8010942:	d14b      	bne.n	80109dc <_dtoa_r+0x31c>
 8010944:	4b24      	ldr	r3, [pc, #144]	; (80109d8 <_dtoa_r+0x318>)
 8010946:	4602      	mov	r2, r0
 8010948:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801094c:	e6d1      	b.n	80106f2 <_dtoa_r+0x32>
 801094e:	2301      	movs	r3, #1
 8010950:	e7de      	b.n	8010910 <_dtoa_r+0x250>
 8010952:	2300      	movs	r3, #0
 8010954:	9308      	str	r3, [sp, #32]
 8010956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010958:	eb0a 0903 	add.w	r9, sl, r3
 801095c:	f109 0301 	add.w	r3, r9, #1
 8010960:	2b01      	cmp	r3, #1
 8010962:	9301      	str	r3, [sp, #4]
 8010964:	bfb8      	it	lt
 8010966:	2301      	movlt	r3, #1
 8010968:	e7dd      	b.n	8010926 <_dtoa_r+0x266>
 801096a:	2301      	movs	r3, #1
 801096c:	e7f2      	b.n	8010954 <_dtoa_r+0x294>
 801096e:	2501      	movs	r5, #1
 8010970:	2300      	movs	r3, #0
 8010972:	9305      	str	r3, [sp, #20]
 8010974:	9508      	str	r5, [sp, #32]
 8010976:	f04f 39ff 	mov.w	r9, #4294967295
 801097a:	2200      	movs	r2, #0
 801097c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010980:	2312      	movs	r3, #18
 8010982:	9209      	str	r2, [sp, #36]	; 0x24
 8010984:	e7cf      	b.n	8010926 <_dtoa_r+0x266>
 8010986:	2301      	movs	r3, #1
 8010988:	9308      	str	r3, [sp, #32]
 801098a:	e7f4      	b.n	8010976 <_dtoa_r+0x2b6>
 801098c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010990:	f8cd 9004 	str.w	r9, [sp, #4]
 8010994:	464b      	mov	r3, r9
 8010996:	e7c6      	b.n	8010926 <_dtoa_r+0x266>
 8010998:	3101      	adds	r1, #1
 801099a:	6041      	str	r1, [r0, #4]
 801099c:	0052      	lsls	r2, r2, #1
 801099e:	e7c6      	b.n	801092e <_dtoa_r+0x26e>
 80109a0:	636f4361 	.word	0x636f4361
 80109a4:	3fd287a7 	.word	0x3fd287a7
 80109a8:	8b60c8b3 	.word	0x8b60c8b3
 80109ac:	3fc68a28 	.word	0x3fc68a28
 80109b0:	509f79fb 	.word	0x509f79fb
 80109b4:	3fd34413 	.word	0x3fd34413
 80109b8:	08012c91 	.word	0x08012c91
 80109bc:	08012ca8 	.word	0x08012ca8
 80109c0:	7ff00000 	.word	0x7ff00000
 80109c4:	08012c8d 	.word	0x08012c8d
 80109c8:	08012c84 	.word	0x08012c84
 80109cc:	08012c61 	.word	0x08012c61
 80109d0:	3ff80000 	.word	0x3ff80000
 80109d4:	08012da0 	.word	0x08012da0
 80109d8:	08012d07 	.word	0x08012d07
 80109dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109de:	9a00      	ldr	r2, [sp, #0]
 80109e0:	601a      	str	r2, [r3, #0]
 80109e2:	9b01      	ldr	r3, [sp, #4]
 80109e4:	2b0e      	cmp	r3, #14
 80109e6:	f200 80ad 	bhi.w	8010b44 <_dtoa_r+0x484>
 80109ea:	2d00      	cmp	r5, #0
 80109ec:	f000 80aa 	beq.w	8010b44 <_dtoa_r+0x484>
 80109f0:	f1ba 0f00 	cmp.w	sl, #0
 80109f4:	dd36      	ble.n	8010a64 <_dtoa_r+0x3a4>
 80109f6:	4ac3      	ldr	r2, [pc, #780]	; (8010d04 <_dtoa_r+0x644>)
 80109f8:	f00a 030f 	and.w	r3, sl, #15
 80109fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010a00:	ed93 7b00 	vldr	d7, [r3]
 8010a04:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010a08:	ea4f 172a 	mov.w	r7, sl, asr #4
 8010a0c:	eeb0 8a47 	vmov.f32	s16, s14
 8010a10:	eef0 8a67 	vmov.f32	s17, s15
 8010a14:	d016      	beq.n	8010a44 <_dtoa_r+0x384>
 8010a16:	4bbc      	ldr	r3, [pc, #752]	; (8010d08 <_dtoa_r+0x648>)
 8010a18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010a1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010a20:	f7ef ff1c 	bl	800085c <__aeabi_ddiv>
 8010a24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a28:	f007 070f 	and.w	r7, r7, #15
 8010a2c:	2503      	movs	r5, #3
 8010a2e:	4eb6      	ldr	r6, [pc, #728]	; (8010d08 <_dtoa_r+0x648>)
 8010a30:	b957      	cbnz	r7, 8010a48 <_dtoa_r+0x388>
 8010a32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a36:	ec53 2b18 	vmov	r2, r3, d8
 8010a3a:	f7ef ff0f 	bl	800085c <__aeabi_ddiv>
 8010a3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a42:	e029      	b.n	8010a98 <_dtoa_r+0x3d8>
 8010a44:	2502      	movs	r5, #2
 8010a46:	e7f2      	b.n	8010a2e <_dtoa_r+0x36e>
 8010a48:	07f9      	lsls	r1, r7, #31
 8010a4a:	d508      	bpl.n	8010a5e <_dtoa_r+0x39e>
 8010a4c:	ec51 0b18 	vmov	r0, r1, d8
 8010a50:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010a54:	f7ef fdd8 	bl	8000608 <__aeabi_dmul>
 8010a58:	ec41 0b18 	vmov	d8, r0, r1
 8010a5c:	3501      	adds	r5, #1
 8010a5e:	107f      	asrs	r7, r7, #1
 8010a60:	3608      	adds	r6, #8
 8010a62:	e7e5      	b.n	8010a30 <_dtoa_r+0x370>
 8010a64:	f000 80a6 	beq.w	8010bb4 <_dtoa_r+0x4f4>
 8010a68:	f1ca 0600 	rsb	r6, sl, #0
 8010a6c:	4ba5      	ldr	r3, [pc, #660]	; (8010d04 <_dtoa_r+0x644>)
 8010a6e:	4fa6      	ldr	r7, [pc, #664]	; (8010d08 <_dtoa_r+0x648>)
 8010a70:	f006 020f 	and.w	r2, r6, #15
 8010a74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010a80:	f7ef fdc2 	bl	8000608 <__aeabi_dmul>
 8010a84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a88:	1136      	asrs	r6, r6, #4
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	2502      	movs	r5, #2
 8010a8e:	2e00      	cmp	r6, #0
 8010a90:	f040 8085 	bne.w	8010b9e <_dtoa_r+0x4de>
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d1d2      	bne.n	8010a3e <_dtoa_r+0x37e>
 8010a98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	f000 808c 	beq.w	8010bb8 <_dtoa_r+0x4f8>
 8010aa0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010aa4:	4b99      	ldr	r3, [pc, #612]	; (8010d0c <_dtoa_r+0x64c>)
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	4630      	mov	r0, r6
 8010aaa:	4639      	mov	r1, r7
 8010aac:	f7f0 f81e 	bl	8000aec <__aeabi_dcmplt>
 8010ab0:	2800      	cmp	r0, #0
 8010ab2:	f000 8081 	beq.w	8010bb8 <_dtoa_r+0x4f8>
 8010ab6:	9b01      	ldr	r3, [sp, #4]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d07d      	beq.n	8010bb8 <_dtoa_r+0x4f8>
 8010abc:	f1b9 0f00 	cmp.w	r9, #0
 8010ac0:	dd3c      	ble.n	8010b3c <_dtoa_r+0x47c>
 8010ac2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010ac6:	9307      	str	r3, [sp, #28]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	4b91      	ldr	r3, [pc, #580]	; (8010d10 <_dtoa_r+0x650>)
 8010acc:	4630      	mov	r0, r6
 8010ace:	4639      	mov	r1, r7
 8010ad0:	f7ef fd9a 	bl	8000608 <__aeabi_dmul>
 8010ad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ad8:	3501      	adds	r5, #1
 8010ada:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8010ade:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010ae2:	4628      	mov	r0, r5
 8010ae4:	f7ef fd26 	bl	8000534 <__aeabi_i2d>
 8010ae8:	4632      	mov	r2, r6
 8010aea:	463b      	mov	r3, r7
 8010aec:	f7ef fd8c 	bl	8000608 <__aeabi_dmul>
 8010af0:	4b88      	ldr	r3, [pc, #544]	; (8010d14 <_dtoa_r+0x654>)
 8010af2:	2200      	movs	r2, #0
 8010af4:	f7ef fbd2 	bl	800029c <__adddf3>
 8010af8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010afc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b00:	9303      	str	r3, [sp, #12]
 8010b02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d15c      	bne.n	8010bc2 <_dtoa_r+0x502>
 8010b08:	4b83      	ldr	r3, [pc, #524]	; (8010d18 <_dtoa_r+0x658>)
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	4630      	mov	r0, r6
 8010b0e:	4639      	mov	r1, r7
 8010b10:	f7ef fbc2 	bl	8000298 <__aeabi_dsub>
 8010b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b18:	4606      	mov	r6, r0
 8010b1a:	460f      	mov	r7, r1
 8010b1c:	f7f0 f804 	bl	8000b28 <__aeabi_dcmpgt>
 8010b20:	2800      	cmp	r0, #0
 8010b22:	f040 8296 	bne.w	8011052 <_dtoa_r+0x992>
 8010b26:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010b2a:	4630      	mov	r0, r6
 8010b2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b30:	4639      	mov	r1, r7
 8010b32:	f7ef ffdb 	bl	8000aec <__aeabi_dcmplt>
 8010b36:	2800      	cmp	r0, #0
 8010b38:	f040 8288 	bne.w	801104c <_dtoa_r+0x98c>
 8010b3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010b40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010b44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	f2c0 8158 	blt.w	8010dfc <_dtoa_r+0x73c>
 8010b4c:	f1ba 0f0e 	cmp.w	sl, #14
 8010b50:	f300 8154 	bgt.w	8010dfc <_dtoa_r+0x73c>
 8010b54:	4b6b      	ldr	r3, [pc, #428]	; (8010d04 <_dtoa_r+0x644>)
 8010b56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010b5a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	f280 80e3 	bge.w	8010d2c <_dtoa_r+0x66c>
 8010b66:	9b01      	ldr	r3, [sp, #4]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	f300 80df 	bgt.w	8010d2c <_dtoa_r+0x66c>
 8010b6e:	f040 826d 	bne.w	801104c <_dtoa_r+0x98c>
 8010b72:	4b69      	ldr	r3, [pc, #420]	; (8010d18 <_dtoa_r+0x658>)
 8010b74:	2200      	movs	r2, #0
 8010b76:	4640      	mov	r0, r8
 8010b78:	4649      	mov	r1, r9
 8010b7a:	f7ef fd45 	bl	8000608 <__aeabi_dmul>
 8010b7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b82:	f7ef ffc7 	bl	8000b14 <__aeabi_dcmpge>
 8010b86:	9e01      	ldr	r6, [sp, #4]
 8010b88:	4637      	mov	r7, r6
 8010b8a:	2800      	cmp	r0, #0
 8010b8c:	f040 8243 	bne.w	8011016 <_dtoa_r+0x956>
 8010b90:	9d00      	ldr	r5, [sp, #0]
 8010b92:	2331      	movs	r3, #49	; 0x31
 8010b94:	f805 3b01 	strb.w	r3, [r5], #1
 8010b98:	f10a 0a01 	add.w	sl, sl, #1
 8010b9c:	e23f      	b.n	801101e <_dtoa_r+0x95e>
 8010b9e:	07f2      	lsls	r2, r6, #31
 8010ba0:	d505      	bpl.n	8010bae <_dtoa_r+0x4ee>
 8010ba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ba6:	f7ef fd2f 	bl	8000608 <__aeabi_dmul>
 8010baa:	3501      	adds	r5, #1
 8010bac:	2301      	movs	r3, #1
 8010bae:	1076      	asrs	r6, r6, #1
 8010bb0:	3708      	adds	r7, #8
 8010bb2:	e76c      	b.n	8010a8e <_dtoa_r+0x3ce>
 8010bb4:	2502      	movs	r5, #2
 8010bb6:	e76f      	b.n	8010a98 <_dtoa_r+0x3d8>
 8010bb8:	9b01      	ldr	r3, [sp, #4]
 8010bba:	f8cd a01c 	str.w	sl, [sp, #28]
 8010bbe:	930c      	str	r3, [sp, #48]	; 0x30
 8010bc0:	e78d      	b.n	8010ade <_dtoa_r+0x41e>
 8010bc2:	9900      	ldr	r1, [sp, #0]
 8010bc4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010bc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010bc8:	4b4e      	ldr	r3, [pc, #312]	; (8010d04 <_dtoa_r+0x644>)
 8010bca:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010bce:	4401      	add	r1, r0
 8010bd0:	9102      	str	r1, [sp, #8]
 8010bd2:	9908      	ldr	r1, [sp, #32]
 8010bd4:	eeb0 8a47 	vmov.f32	s16, s14
 8010bd8:	eef0 8a67 	vmov.f32	s17, s15
 8010bdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010be0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010be4:	2900      	cmp	r1, #0
 8010be6:	d045      	beq.n	8010c74 <_dtoa_r+0x5b4>
 8010be8:	494c      	ldr	r1, [pc, #304]	; (8010d1c <_dtoa_r+0x65c>)
 8010bea:	2000      	movs	r0, #0
 8010bec:	f7ef fe36 	bl	800085c <__aeabi_ddiv>
 8010bf0:	ec53 2b18 	vmov	r2, r3, d8
 8010bf4:	f7ef fb50 	bl	8000298 <__aeabi_dsub>
 8010bf8:	9d00      	ldr	r5, [sp, #0]
 8010bfa:	ec41 0b18 	vmov	d8, r0, r1
 8010bfe:	4639      	mov	r1, r7
 8010c00:	4630      	mov	r0, r6
 8010c02:	f7ef ffb1 	bl	8000b68 <__aeabi_d2iz>
 8010c06:	900c      	str	r0, [sp, #48]	; 0x30
 8010c08:	f7ef fc94 	bl	8000534 <__aeabi_i2d>
 8010c0c:	4602      	mov	r2, r0
 8010c0e:	460b      	mov	r3, r1
 8010c10:	4630      	mov	r0, r6
 8010c12:	4639      	mov	r1, r7
 8010c14:	f7ef fb40 	bl	8000298 <__aeabi_dsub>
 8010c18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c1a:	3330      	adds	r3, #48	; 0x30
 8010c1c:	f805 3b01 	strb.w	r3, [r5], #1
 8010c20:	ec53 2b18 	vmov	r2, r3, d8
 8010c24:	4606      	mov	r6, r0
 8010c26:	460f      	mov	r7, r1
 8010c28:	f7ef ff60 	bl	8000aec <__aeabi_dcmplt>
 8010c2c:	2800      	cmp	r0, #0
 8010c2e:	d165      	bne.n	8010cfc <_dtoa_r+0x63c>
 8010c30:	4632      	mov	r2, r6
 8010c32:	463b      	mov	r3, r7
 8010c34:	4935      	ldr	r1, [pc, #212]	; (8010d0c <_dtoa_r+0x64c>)
 8010c36:	2000      	movs	r0, #0
 8010c38:	f7ef fb2e 	bl	8000298 <__aeabi_dsub>
 8010c3c:	ec53 2b18 	vmov	r2, r3, d8
 8010c40:	f7ef ff54 	bl	8000aec <__aeabi_dcmplt>
 8010c44:	2800      	cmp	r0, #0
 8010c46:	f040 80b9 	bne.w	8010dbc <_dtoa_r+0x6fc>
 8010c4a:	9b02      	ldr	r3, [sp, #8]
 8010c4c:	429d      	cmp	r5, r3
 8010c4e:	f43f af75 	beq.w	8010b3c <_dtoa_r+0x47c>
 8010c52:	4b2f      	ldr	r3, [pc, #188]	; (8010d10 <_dtoa_r+0x650>)
 8010c54:	ec51 0b18 	vmov	r0, r1, d8
 8010c58:	2200      	movs	r2, #0
 8010c5a:	f7ef fcd5 	bl	8000608 <__aeabi_dmul>
 8010c5e:	4b2c      	ldr	r3, [pc, #176]	; (8010d10 <_dtoa_r+0x650>)
 8010c60:	ec41 0b18 	vmov	d8, r0, r1
 8010c64:	2200      	movs	r2, #0
 8010c66:	4630      	mov	r0, r6
 8010c68:	4639      	mov	r1, r7
 8010c6a:	f7ef fccd 	bl	8000608 <__aeabi_dmul>
 8010c6e:	4606      	mov	r6, r0
 8010c70:	460f      	mov	r7, r1
 8010c72:	e7c4      	b.n	8010bfe <_dtoa_r+0x53e>
 8010c74:	ec51 0b17 	vmov	r0, r1, d7
 8010c78:	f7ef fcc6 	bl	8000608 <__aeabi_dmul>
 8010c7c:	9b02      	ldr	r3, [sp, #8]
 8010c7e:	9d00      	ldr	r5, [sp, #0]
 8010c80:	930c      	str	r3, [sp, #48]	; 0x30
 8010c82:	ec41 0b18 	vmov	d8, r0, r1
 8010c86:	4639      	mov	r1, r7
 8010c88:	4630      	mov	r0, r6
 8010c8a:	f7ef ff6d 	bl	8000b68 <__aeabi_d2iz>
 8010c8e:	9011      	str	r0, [sp, #68]	; 0x44
 8010c90:	f7ef fc50 	bl	8000534 <__aeabi_i2d>
 8010c94:	4602      	mov	r2, r0
 8010c96:	460b      	mov	r3, r1
 8010c98:	4630      	mov	r0, r6
 8010c9a:	4639      	mov	r1, r7
 8010c9c:	f7ef fafc 	bl	8000298 <__aeabi_dsub>
 8010ca0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010ca2:	3330      	adds	r3, #48	; 0x30
 8010ca4:	f805 3b01 	strb.w	r3, [r5], #1
 8010ca8:	9b02      	ldr	r3, [sp, #8]
 8010caa:	429d      	cmp	r5, r3
 8010cac:	4606      	mov	r6, r0
 8010cae:	460f      	mov	r7, r1
 8010cb0:	f04f 0200 	mov.w	r2, #0
 8010cb4:	d134      	bne.n	8010d20 <_dtoa_r+0x660>
 8010cb6:	4b19      	ldr	r3, [pc, #100]	; (8010d1c <_dtoa_r+0x65c>)
 8010cb8:	ec51 0b18 	vmov	r0, r1, d8
 8010cbc:	f7ef faee 	bl	800029c <__adddf3>
 8010cc0:	4602      	mov	r2, r0
 8010cc2:	460b      	mov	r3, r1
 8010cc4:	4630      	mov	r0, r6
 8010cc6:	4639      	mov	r1, r7
 8010cc8:	f7ef ff2e 	bl	8000b28 <__aeabi_dcmpgt>
 8010ccc:	2800      	cmp	r0, #0
 8010cce:	d175      	bne.n	8010dbc <_dtoa_r+0x6fc>
 8010cd0:	ec53 2b18 	vmov	r2, r3, d8
 8010cd4:	4911      	ldr	r1, [pc, #68]	; (8010d1c <_dtoa_r+0x65c>)
 8010cd6:	2000      	movs	r0, #0
 8010cd8:	f7ef fade 	bl	8000298 <__aeabi_dsub>
 8010cdc:	4602      	mov	r2, r0
 8010cde:	460b      	mov	r3, r1
 8010ce0:	4630      	mov	r0, r6
 8010ce2:	4639      	mov	r1, r7
 8010ce4:	f7ef ff02 	bl	8000aec <__aeabi_dcmplt>
 8010ce8:	2800      	cmp	r0, #0
 8010cea:	f43f af27 	beq.w	8010b3c <_dtoa_r+0x47c>
 8010cee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010cf0:	1e6b      	subs	r3, r5, #1
 8010cf2:	930c      	str	r3, [sp, #48]	; 0x30
 8010cf4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010cf8:	2b30      	cmp	r3, #48	; 0x30
 8010cfa:	d0f8      	beq.n	8010cee <_dtoa_r+0x62e>
 8010cfc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010d00:	e04a      	b.n	8010d98 <_dtoa_r+0x6d8>
 8010d02:	bf00      	nop
 8010d04:	08012da0 	.word	0x08012da0
 8010d08:	08012d78 	.word	0x08012d78
 8010d0c:	3ff00000 	.word	0x3ff00000
 8010d10:	40240000 	.word	0x40240000
 8010d14:	401c0000 	.word	0x401c0000
 8010d18:	40140000 	.word	0x40140000
 8010d1c:	3fe00000 	.word	0x3fe00000
 8010d20:	4baf      	ldr	r3, [pc, #700]	; (8010fe0 <_dtoa_r+0x920>)
 8010d22:	f7ef fc71 	bl	8000608 <__aeabi_dmul>
 8010d26:	4606      	mov	r6, r0
 8010d28:	460f      	mov	r7, r1
 8010d2a:	e7ac      	b.n	8010c86 <_dtoa_r+0x5c6>
 8010d2c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010d30:	9d00      	ldr	r5, [sp, #0]
 8010d32:	4642      	mov	r2, r8
 8010d34:	464b      	mov	r3, r9
 8010d36:	4630      	mov	r0, r6
 8010d38:	4639      	mov	r1, r7
 8010d3a:	f7ef fd8f 	bl	800085c <__aeabi_ddiv>
 8010d3e:	f7ef ff13 	bl	8000b68 <__aeabi_d2iz>
 8010d42:	9002      	str	r0, [sp, #8]
 8010d44:	f7ef fbf6 	bl	8000534 <__aeabi_i2d>
 8010d48:	4642      	mov	r2, r8
 8010d4a:	464b      	mov	r3, r9
 8010d4c:	f7ef fc5c 	bl	8000608 <__aeabi_dmul>
 8010d50:	4602      	mov	r2, r0
 8010d52:	460b      	mov	r3, r1
 8010d54:	4630      	mov	r0, r6
 8010d56:	4639      	mov	r1, r7
 8010d58:	f7ef fa9e 	bl	8000298 <__aeabi_dsub>
 8010d5c:	9e02      	ldr	r6, [sp, #8]
 8010d5e:	9f01      	ldr	r7, [sp, #4]
 8010d60:	3630      	adds	r6, #48	; 0x30
 8010d62:	f805 6b01 	strb.w	r6, [r5], #1
 8010d66:	9e00      	ldr	r6, [sp, #0]
 8010d68:	1bae      	subs	r6, r5, r6
 8010d6a:	42b7      	cmp	r7, r6
 8010d6c:	4602      	mov	r2, r0
 8010d6e:	460b      	mov	r3, r1
 8010d70:	d137      	bne.n	8010de2 <_dtoa_r+0x722>
 8010d72:	f7ef fa93 	bl	800029c <__adddf3>
 8010d76:	4642      	mov	r2, r8
 8010d78:	464b      	mov	r3, r9
 8010d7a:	4606      	mov	r6, r0
 8010d7c:	460f      	mov	r7, r1
 8010d7e:	f7ef fed3 	bl	8000b28 <__aeabi_dcmpgt>
 8010d82:	b9c8      	cbnz	r0, 8010db8 <_dtoa_r+0x6f8>
 8010d84:	4642      	mov	r2, r8
 8010d86:	464b      	mov	r3, r9
 8010d88:	4630      	mov	r0, r6
 8010d8a:	4639      	mov	r1, r7
 8010d8c:	f7ef fea4 	bl	8000ad8 <__aeabi_dcmpeq>
 8010d90:	b110      	cbz	r0, 8010d98 <_dtoa_r+0x6d8>
 8010d92:	9b02      	ldr	r3, [sp, #8]
 8010d94:	07d9      	lsls	r1, r3, #31
 8010d96:	d40f      	bmi.n	8010db8 <_dtoa_r+0x6f8>
 8010d98:	4620      	mov	r0, r4
 8010d9a:	4659      	mov	r1, fp
 8010d9c:	f000 fad6 	bl	801134c <_Bfree>
 8010da0:	2300      	movs	r3, #0
 8010da2:	702b      	strb	r3, [r5, #0]
 8010da4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010da6:	f10a 0001 	add.w	r0, sl, #1
 8010daa:	6018      	str	r0, [r3, #0]
 8010dac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	f43f acd8 	beq.w	8010764 <_dtoa_r+0xa4>
 8010db4:	601d      	str	r5, [r3, #0]
 8010db6:	e4d5      	b.n	8010764 <_dtoa_r+0xa4>
 8010db8:	f8cd a01c 	str.w	sl, [sp, #28]
 8010dbc:	462b      	mov	r3, r5
 8010dbe:	461d      	mov	r5, r3
 8010dc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010dc4:	2a39      	cmp	r2, #57	; 0x39
 8010dc6:	d108      	bne.n	8010dda <_dtoa_r+0x71a>
 8010dc8:	9a00      	ldr	r2, [sp, #0]
 8010dca:	429a      	cmp	r2, r3
 8010dcc:	d1f7      	bne.n	8010dbe <_dtoa_r+0x6fe>
 8010dce:	9a07      	ldr	r2, [sp, #28]
 8010dd0:	9900      	ldr	r1, [sp, #0]
 8010dd2:	3201      	adds	r2, #1
 8010dd4:	9207      	str	r2, [sp, #28]
 8010dd6:	2230      	movs	r2, #48	; 0x30
 8010dd8:	700a      	strb	r2, [r1, #0]
 8010dda:	781a      	ldrb	r2, [r3, #0]
 8010ddc:	3201      	adds	r2, #1
 8010dde:	701a      	strb	r2, [r3, #0]
 8010de0:	e78c      	b.n	8010cfc <_dtoa_r+0x63c>
 8010de2:	4b7f      	ldr	r3, [pc, #508]	; (8010fe0 <_dtoa_r+0x920>)
 8010de4:	2200      	movs	r2, #0
 8010de6:	f7ef fc0f 	bl	8000608 <__aeabi_dmul>
 8010dea:	2200      	movs	r2, #0
 8010dec:	2300      	movs	r3, #0
 8010dee:	4606      	mov	r6, r0
 8010df0:	460f      	mov	r7, r1
 8010df2:	f7ef fe71 	bl	8000ad8 <__aeabi_dcmpeq>
 8010df6:	2800      	cmp	r0, #0
 8010df8:	d09b      	beq.n	8010d32 <_dtoa_r+0x672>
 8010dfa:	e7cd      	b.n	8010d98 <_dtoa_r+0x6d8>
 8010dfc:	9a08      	ldr	r2, [sp, #32]
 8010dfe:	2a00      	cmp	r2, #0
 8010e00:	f000 80c4 	beq.w	8010f8c <_dtoa_r+0x8cc>
 8010e04:	9a05      	ldr	r2, [sp, #20]
 8010e06:	2a01      	cmp	r2, #1
 8010e08:	f300 80a8 	bgt.w	8010f5c <_dtoa_r+0x89c>
 8010e0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010e0e:	2a00      	cmp	r2, #0
 8010e10:	f000 80a0 	beq.w	8010f54 <_dtoa_r+0x894>
 8010e14:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010e18:	9e06      	ldr	r6, [sp, #24]
 8010e1a:	4645      	mov	r5, r8
 8010e1c:	9a04      	ldr	r2, [sp, #16]
 8010e1e:	2101      	movs	r1, #1
 8010e20:	441a      	add	r2, r3
 8010e22:	4620      	mov	r0, r4
 8010e24:	4498      	add	r8, r3
 8010e26:	9204      	str	r2, [sp, #16]
 8010e28:	f000 fb4c 	bl	80114c4 <__i2b>
 8010e2c:	4607      	mov	r7, r0
 8010e2e:	2d00      	cmp	r5, #0
 8010e30:	dd0b      	ble.n	8010e4a <_dtoa_r+0x78a>
 8010e32:	9b04      	ldr	r3, [sp, #16]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	dd08      	ble.n	8010e4a <_dtoa_r+0x78a>
 8010e38:	42ab      	cmp	r3, r5
 8010e3a:	9a04      	ldr	r2, [sp, #16]
 8010e3c:	bfa8      	it	ge
 8010e3e:	462b      	movge	r3, r5
 8010e40:	eba8 0803 	sub.w	r8, r8, r3
 8010e44:	1aed      	subs	r5, r5, r3
 8010e46:	1ad3      	subs	r3, r2, r3
 8010e48:	9304      	str	r3, [sp, #16]
 8010e4a:	9b06      	ldr	r3, [sp, #24]
 8010e4c:	b1fb      	cbz	r3, 8010e8e <_dtoa_r+0x7ce>
 8010e4e:	9b08      	ldr	r3, [sp, #32]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	f000 809f 	beq.w	8010f94 <_dtoa_r+0x8d4>
 8010e56:	2e00      	cmp	r6, #0
 8010e58:	dd11      	ble.n	8010e7e <_dtoa_r+0x7be>
 8010e5a:	4639      	mov	r1, r7
 8010e5c:	4632      	mov	r2, r6
 8010e5e:	4620      	mov	r0, r4
 8010e60:	f000 fbec 	bl	801163c <__pow5mult>
 8010e64:	465a      	mov	r2, fp
 8010e66:	4601      	mov	r1, r0
 8010e68:	4607      	mov	r7, r0
 8010e6a:	4620      	mov	r0, r4
 8010e6c:	f000 fb40 	bl	80114f0 <__multiply>
 8010e70:	4659      	mov	r1, fp
 8010e72:	9007      	str	r0, [sp, #28]
 8010e74:	4620      	mov	r0, r4
 8010e76:	f000 fa69 	bl	801134c <_Bfree>
 8010e7a:	9b07      	ldr	r3, [sp, #28]
 8010e7c:	469b      	mov	fp, r3
 8010e7e:	9b06      	ldr	r3, [sp, #24]
 8010e80:	1b9a      	subs	r2, r3, r6
 8010e82:	d004      	beq.n	8010e8e <_dtoa_r+0x7ce>
 8010e84:	4659      	mov	r1, fp
 8010e86:	4620      	mov	r0, r4
 8010e88:	f000 fbd8 	bl	801163c <__pow5mult>
 8010e8c:	4683      	mov	fp, r0
 8010e8e:	2101      	movs	r1, #1
 8010e90:	4620      	mov	r0, r4
 8010e92:	f000 fb17 	bl	80114c4 <__i2b>
 8010e96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	4606      	mov	r6, r0
 8010e9c:	dd7c      	ble.n	8010f98 <_dtoa_r+0x8d8>
 8010e9e:	461a      	mov	r2, r3
 8010ea0:	4601      	mov	r1, r0
 8010ea2:	4620      	mov	r0, r4
 8010ea4:	f000 fbca 	bl	801163c <__pow5mult>
 8010ea8:	9b05      	ldr	r3, [sp, #20]
 8010eaa:	2b01      	cmp	r3, #1
 8010eac:	4606      	mov	r6, r0
 8010eae:	dd76      	ble.n	8010f9e <_dtoa_r+0x8de>
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	9306      	str	r3, [sp, #24]
 8010eb4:	6933      	ldr	r3, [r6, #16]
 8010eb6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010eba:	6918      	ldr	r0, [r3, #16]
 8010ebc:	f000 fab2 	bl	8011424 <__hi0bits>
 8010ec0:	f1c0 0020 	rsb	r0, r0, #32
 8010ec4:	9b04      	ldr	r3, [sp, #16]
 8010ec6:	4418      	add	r0, r3
 8010ec8:	f010 001f 	ands.w	r0, r0, #31
 8010ecc:	f000 8086 	beq.w	8010fdc <_dtoa_r+0x91c>
 8010ed0:	f1c0 0320 	rsb	r3, r0, #32
 8010ed4:	2b04      	cmp	r3, #4
 8010ed6:	dd7f      	ble.n	8010fd8 <_dtoa_r+0x918>
 8010ed8:	f1c0 001c 	rsb	r0, r0, #28
 8010edc:	9b04      	ldr	r3, [sp, #16]
 8010ede:	4403      	add	r3, r0
 8010ee0:	4480      	add	r8, r0
 8010ee2:	4405      	add	r5, r0
 8010ee4:	9304      	str	r3, [sp, #16]
 8010ee6:	f1b8 0f00 	cmp.w	r8, #0
 8010eea:	dd05      	ble.n	8010ef8 <_dtoa_r+0x838>
 8010eec:	4659      	mov	r1, fp
 8010eee:	4642      	mov	r2, r8
 8010ef0:	4620      	mov	r0, r4
 8010ef2:	f000 fbfd 	bl	80116f0 <__lshift>
 8010ef6:	4683      	mov	fp, r0
 8010ef8:	9b04      	ldr	r3, [sp, #16]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	dd05      	ble.n	8010f0a <_dtoa_r+0x84a>
 8010efe:	4631      	mov	r1, r6
 8010f00:	461a      	mov	r2, r3
 8010f02:	4620      	mov	r0, r4
 8010f04:	f000 fbf4 	bl	80116f0 <__lshift>
 8010f08:	4606      	mov	r6, r0
 8010f0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d069      	beq.n	8010fe4 <_dtoa_r+0x924>
 8010f10:	4631      	mov	r1, r6
 8010f12:	4658      	mov	r0, fp
 8010f14:	f000 fc58 	bl	80117c8 <__mcmp>
 8010f18:	2800      	cmp	r0, #0
 8010f1a:	da63      	bge.n	8010fe4 <_dtoa_r+0x924>
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	4659      	mov	r1, fp
 8010f20:	220a      	movs	r2, #10
 8010f22:	4620      	mov	r0, r4
 8010f24:	f000 fa34 	bl	8011390 <__multadd>
 8010f28:	9b08      	ldr	r3, [sp, #32]
 8010f2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010f2e:	4683      	mov	fp, r0
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	f000 818f 	beq.w	8011254 <_dtoa_r+0xb94>
 8010f36:	4639      	mov	r1, r7
 8010f38:	2300      	movs	r3, #0
 8010f3a:	220a      	movs	r2, #10
 8010f3c:	4620      	mov	r0, r4
 8010f3e:	f000 fa27 	bl	8011390 <__multadd>
 8010f42:	f1b9 0f00 	cmp.w	r9, #0
 8010f46:	4607      	mov	r7, r0
 8010f48:	f300 808e 	bgt.w	8011068 <_dtoa_r+0x9a8>
 8010f4c:	9b05      	ldr	r3, [sp, #20]
 8010f4e:	2b02      	cmp	r3, #2
 8010f50:	dc50      	bgt.n	8010ff4 <_dtoa_r+0x934>
 8010f52:	e089      	b.n	8011068 <_dtoa_r+0x9a8>
 8010f54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010f56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010f5a:	e75d      	b.n	8010e18 <_dtoa_r+0x758>
 8010f5c:	9b01      	ldr	r3, [sp, #4]
 8010f5e:	1e5e      	subs	r6, r3, #1
 8010f60:	9b06      	ldr	r3, [sp, #24]
 8010f62:	42b3      	cmp	r3, r6
 8010f64:	bfbf      	itttt	lt
 8010f66:	9b06      	ldrlt	r3, [sp, #24]
 8010f68:	9606      	strlt	r6, [sp, #24]
 8010f6a:	1af2      	sublt	r2, r6, r3
 8010f6c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8010f6e:	bfb6      	itet	lt
 8010f70:	189b      	addlt	r3, r3, r2
 8010f72:	1b9e      	subge	r6, r3, r6
 8010f74:	930d      	strlt	r3, [sp, #52]	; 0x34
 8010f76:	9b01      	ldr	r3, [sp, #4]
 8010f78:	bfb8      	it	lt
 8010f7a:	2600      	movlt	r6, #0
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	bfb5      	itete	lt
 8010f80:	eba8 0503 	sublt.w	r5, r8, r3
 8010f84:	9b01      	ldrge	r3, [sp, #4]
 8010f86:	2300      	movlt	r3, #0
 8010f88:	4645      	movge	r5, r8
 8010f8a:	e747      	b.n	8010e1c <_dtoa_r+0x75c>
 8010f8c:	9e06      	ldr	r6, [sp, #24]
 8010f8e:	9f08      	ldr	r7, [sp, #32]
 8010f90:	4645      	mov	r5, r8
 8010f92:	e74c      	b.n	8010e2e <_dtoa_r+0x76e>
 8010f94:	9a06      	ldr	r2, [sp, #24]
 8010f96:	e775      	b.n	8010e84 <_dtoa_r+0x7c4>
 8010f98:	9b05      	ldr	r3, [sp, #20]
 8010f9a:	2b01      	cmp	r3, #1
 8010f9c:	dc18      	bgt.n	8010fd0 <_dtoa_r+0x910>
 8010f9e:	9b02      	ldr	r3, [sp, #8]
 8010fa0:	b9b3      	cbnz	r3, 8010fd0 <_dtoa_r+0x910>
 8010fa2:	9b03      	ldr	r3, [sp, #12]
 8010fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010fa8:	b9a3      	cbnz	r3, 8010fd4 <_dtoa_r+0x914>
 8010faa:	9b03      	ldr	r3, [sp, #12]
 8010fac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010fb0:	0d1b      	lsrs	r3, r3, #20
 8010fb2:	051b      	lsls	r3, r3, #20
 8010fb4:	b12b      	cbz	r3, 8010fc2 <_dtoa_r+0x902>
 8010fb6:	9b04      	ldr	r3, [sp, #16]
 8010fb8:	3301      	adds	r3, #1
 8010fba:	9304      	str	r3, [sp, #16]
 8010fbc:	f108 0801 	add.w	r8, r8, #1
 8010fc0:	2301      	movs	r3, #1
 8010fc2:	9306      	str	r3, [sp, #24]
 8010fc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	f47f af74 	bne.w	8010eb4 <_dtoa_r+0x7f4>
 8010fcc:	2001      	movs	r0, #1
 8010fce:	e779      	b.n	8010ec4 <_dtoa_r+0x804>
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	e7f6      	b.n	8010fc2 <_dtoa_r+0x902>
 8010fd4:	9b02      	ldr	r3, [sp, #8]
 8010fd6:	e7f4      	b.n	8010fc2 <_dtoa_r+0x902>
 8010fd8:	d085      	beq.n	8010ee6 <_dtoa_r+0x826>
 8010fda:	4618      	mov	r0, r3
 8010fdc:	301c      	adds	r0, #28
 8010fde:	e77d      	b.n	8010edc <_dtoa_r+0x81c>
 8010fe0:	40240000 	.word	0x40240000
 8010fe4:	9b01      	ldr	r3, [sp, #4]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	dc38      	bgt.n	801105c <_dtoa_r+0x99c>
 8010fea:	9b05      	ldr	r3, [sp, #20]
 8010fec:	2b02      	cmp	r3, #2
 8010fee:	dd35      	ble.n	801105c <_dtoa_r+0x99c>
 8010ff0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010ff4:	f1b9 0f00 	cmp.w	r9, #0
 8010ff8:	d10d      	bne.n	8011016 <_dtoa_r+0x956>
 8010ffa:	4631      	mov	r1, r6
 8010ffc:	464b      	mov	r3, r9
 8010ffe:	2205      	movs	r2, #5
 8011000:	4620      	mov	r0, r4
 8011002:	f000 f9c5 	bl	8011390 <__multadd>
 8011006:	4601      	mov	r1, r0
 8011008:	4606      	mov	r6, r0
 801100a:	4658      	mov	r0, fp
 801100c:	f000 fbdc 	bl	80117c8 <__mcmp>
 8011010:	2800      	cmp	r0, #0
 8011012:	f73f adbd 	bgt.w	8010b90 <_dtoa_r+0x4d0>
 8011016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011018:	9d00      	ldr	r5, [sp, #0]
 801101a:	ea6f 0a03 	mvn.w	sl, r3
 801101e:	f04f 0800 	mov.w	r8, #0
 8011022:	4631      	mov	r1, r6
 8011024:	4620      	mov	r0, r4
 8011026:	f000 f991 	bl	801134c <_Bfree>
 801102a:	2f00      	cmp	r7, #0
 801102c:	f43f aeb4 	beq.w	8010d98 <_dtoa_r+0x6d8>
 8011030:	f1b8 0f00 	cmp.w	r8, #0
 8011034:	d005      	beq.n	8011042 <_dtoa_r+0x982>
 8011036:	45b8      	cmp	r8, r7
 8011038:	d003      	beq.n	8011042 <_dtoa_r+0x982>
 801103a:	4641      	mov	r1, r8
 801103c:	4620      	mov	r0, r4
 801103e:	f000 f985 	bl	801134c <_Bfree>
 8011042:	4639      	mov	r1, r7
 8011044:	4620      	mov	r0, r4
 8011046:	f000 f981 	bl	801134c <_Bfree>
 801104a:	e6a5      	b.n	8010d98 <_dtoa_r+0x6d8>
 801104c:	2600      	movs	r6, #0
 801104e:	4637      	mov	r7, r6
 8011050:	e7e1      	b.n	8011016 <_dtoa_r+0x956>
 8011052:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011054:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011058:	4637      	mov	r7, r6
 801105a:	e599      	b.n	8010b90 <_dtoa_r+0x4d0>
 801105c:	9b08      	ldr	r3, [sp, #32]
 801105e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011062:	2b00      	cmp	r3, #0
 8011064:	f000 80fd 	beq.w	8011262 <_dtoa_r+0xba2>
 8011068:	2d00      	cmp	r5, #0
 801106a:	dd05      	ble.n	8011078 <_dtoa_r+0x9b8>
 801106c:	4639      	mov	r1, r7
 801106e:	462a      	mov	r2, r5
 8011070:	4620      	mov	r0, r4
 8011072:	f000 fb3d 	bl	80116f0 <__lshift>
 8011076:	4607      	mov	r7, r0
 8011078:	9b06      	ldr	r3, [sp, #24]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d05c      	beq.n	8011138 <_dtoa_r+0xa78>
 801107e:	6879      	ldr	r1, [r7, #4]
 8011080:	4620      	mov	r0, r4
 8011082:	f000 f923 	bl	80112cc <_Balloc>
 8011086:	4605      	mov	r5, r0
 8011088:	b928      	cbnz	r0, 8011096 <_dtoa_r+0x9d6>
 801108a:	4b80      	ldr	r3, [pc, #512]	; (801128c <_dtoa_r+0xbcc>)
 801108c:	4602      	mov	r2, r0
 801108e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011092:	f7ff bb2e 	b.w	80106f2 <_dtoa_r+0x32>
 8011096:	693a      	ldr	r2, [r7, #16]
 8011098:	3202      	adds	r2, #2
 801109a:	0092      	lsls	r2, r2, #2
 801109c:	f107 010c 	add.w	r1, r7, #12
 80110a0:	300c      	adds	r0, #12
 80110a2:	f000 f905 	bl	80112b0 <memcpy>
 80110a6:	2201      	movs	r2, #1
 80110a8:	4629      	mov	r1, r5
 80110aa:	4620      	mov	r0, r4
 80110ac:	f000 fb20 	bl	80116f0 <__lshift>
 80110b0:	9b00      	ldr	r3, [sp, #0]
 80110b2:	3301      	adds	r3, #1
 80110b4:	9301      	str	r3, [sp, #4]
 80110b6:	9b00      	ldr	r3, [sp, #0]
 80110b8:	444b      	add	r3, r9
 80110ba:	9307      	str	r3, [sp, #28]
 80110bc:	9b02      	ldr	r3, [sp, #8]
 80110be:	f003 0301 	and.w	r3, r3, #1
 80110c2:	46b8      	mov	r8, r7
 80110c4:	9306      	str	r3, [sp, #24]
 80110c6:	4607      	mov	r7, r0
 80110c8:	9b01      	ldr	r3, [sp, #4]
 80110ca:	4631      	mov	r1, r6
 80110cc:	3b01      	subs	r3, #1
 80110ce:	4658      	mov	r0, fp
 80110d0:	9302      	str	r3, [sp, #8]
 80110d2:	f7ff fa68 	bl	80105a6 <quorem>
 80110d6:	4603      	mov	r3, r0
 80110d8:	3330      	adds	r3, #48	; 0x30
 80110da:	9004      	str	r0, [sp, #16]
 80110dc:	4641      	mov	r1, r8
 80110de:	4658      	mov	r0, fp
 80110e0:	9308      	str	r3, [sp, #32]
 80110e2:	f000 fb71 	bl	80117c8 <__mcmp>
 80110e6:	463a      	mov	r2, r7
 80110e8:	4681      	mov	r9, r0
 80110ea:	4631      	mov	r1, r6
 80110ec:	4620      	mov	r0, r4
 80110ee:	f000 fb87 	bl	8011800 <__mdiff>
 80110f2:	68c2      	ldr	r2, [r0, #12]
 80110f4:	9b08      	ldr	r3, [sp, #32]
 80110f6:	4605      	mov	r5, r0
 80110f8:	bb02      	cbnz	r2, 801113c <_dtoa_r+0xa7c>
 80110fa:	4601      	mov	r1, r0
 80110fc:	4658      	mov	r0, fp
 80110fe:	f000 fb63 	bl	80117c8 <__mcmp>
 8011102:	9b08      	ldr	r3, [sp, #32]
 8011104:	4602      	mov	r2, r0
 8011106:	4629      	mov	r1, r5
 8011108:	4620      	mov	r0, r4
 801110a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801110e:	f000 f91d 	bl	801134c <_Bfree>
 8011112:	9b05      	ldr	r3, [sp, #20]
 8011114:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011116:	9d01      	ldr	r5, [sp, #4]
 8011118:	ea43 0102 	orr.w	r1, r3, r2
 801111c:	9b06      	ldr	r3, [sp, #24]
 801111e:	430b      	orrs	r3, r1
 8011120:	9b08      	ldr	r3, [sp, #32]
 8011122:	d10d      	bne.n	8011140 <_dtoa_r+0xa80>
 8011124:	2b39      	cmp	r3, #57	; 0x39
 8011126:	d029      	beq.n	801117c <_dtoa_r+0xabc>
 8011128:	f1b9 0f00 	cmp.w	r9, #0
 801112c:	dd01      	ble.n	8011132 <_dtoa_r+0xa72>
 801112e:	9b04      	ldr	r3, [sp, #16]
 8011130:	3331      	adds	r3, #49	; 0x31
 8011132:	9a02      	ldr	r2, [sp, #8]
 8011134:	7013      	strb	r3, [r2, #0]
 8011136:	e774      	b.n	8011022 <_dtoa_r+0x962>
 8011138:	4638      	mov	r0, r7
 801113a:	e7b9      	b.n	80110b0 <_dtoa_r+0x9f0>
 801113c:	2201      	movs	r2, #1
 801113e:	e7e2      	b.n	8011106 <_dtoa_r+0xa46>
 8011140:	f1b9 0f00 	cmp.w	r9, #0
 8011144:	db06      	blt.n	8011154 <_dtoa_r+0xa94>
 8011146:	9905      	ldr	r1, [sp, #20]
 8011148:	ea41 0909 	orr.w	r9, r1, r9
 801114c:	9906      	ldr	r1, [sp, #24]
 801114e:	ea59 0101 	orrs.w	r1, r9, r1
 8011152:	d120      	bne.n	8011196 <_dtoa_r+0xad6>
 8011154:	2a00      	cmp	r2, #0
 8011156:	ddec      	ble.n	8011132 <_dtoa_r+0xa72>
 8011158:	4659      	mov	r1, fp
 801115a:	2201      	movs	r2, #1
 801115c:	4620      	mov	r0, r4
 801115e:	9301      	str	r3, [sp, #4]
 8011160:	f000 fac6 	bl	80116f0 <__lshift>
 8011164:	4631      	mov	r1, r6
 8011166:	4683      	mov	fp, r0
 8011168:	f000 fb2e 	bl	80117c8 <__mcmp>
 801116c:	2800      	cmp	r0, #0
 801116e:	9b01      	ldr	r3, [sp, #4]
 8011170:	dc02      	bgt.n	8011178 <_dtoa_r+0xab8>
 8011172:	d1de      	bne.n	8011132 <_dtoa_r+0xa72>
 8011174:	07da      	lsls	r2, r3, #31
 8011176:	d5dc      	bpl.n	8011132 <_dtoa_r+0xa72>
 8011178:	2b39      	cmp	r3, #57	; 0x39
 801117a:	d1d8      	bne.n	801112e <_dtoa_r+0xa6e>
 801117c:	9a02      	ldr	r2, [sp, #8]
 801117e:	2339      	movs	r3, #57	; 0x39
 8011180:	7013      	strb	r3, [r2, #0]
 8011182:	462b      	mov	r3, r5
 8011184:	461d      	mov	r5, r3
 8011186:	3b01      	subs	r3, #1
 8011188:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801118c:	2a39      	cmp	r2, #57	; 0x39
 801118e:	d050      	beq.n	8011232 <_dtoa_r+0xb72>
 8011190:	3201      	adds	r2, #1
 8011192:	701a      	strb	r2, [r3, #0]
 8011194:	e745      	b.n	8011022 <_dtoa_r+0x962>
 8011196:	2a00      	cmp	r2, #0
 8011198:	dd03      	ble.n	80111a2 <_dtoa_r+0xae2>
 801119a:	2b39      	cmp	r3, #57	; 0x39
 801119c:	d0ee      	beq.n	801117c <_dtoa_r+0xabc>
 801119e:	3301      	adds	r3, #1
 80111a0:	e7c7      	b.n	8011132 <_dtoa_r+0xa72>
 80111a2:	9a01      	ldr	r2, [sp, #4]
 80111a4:	9907      	ldr	r1, [sp, #28]
 80111a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80111aa:	428a      	cmp	r2, r1
 80111ac:	d02a      	beq.n	8011204 <_dtoa_r+0xb44>
 80111ae:	4659      	mov	r1, fp
 80111b0:	2300      	movs	r3, #0
 80111b2:	220a      	movs	r2, #10
 80111b4:	4620      	mov	r0, r4
 80111b6:	f000 f8eb 	bl	8011390 <__multadd>
 80111ba:	45b8      	cmp	r8, r7
 80111bc:	4683      	mov	fp, r0
 80111be:	f04f 0300 	mov.w	r3, #0
 80111c2:	f04f 020a 	mov.w	r2, #10
 80111c6:	4641      	mov	r1, r8
 80111c8:	4620      	mov	r0, r4
 80111ca:	d107      	bne.n	80111dc <_dtoa_r+0xb1c>
 80111cc:	f000 f8e0 	bl	8011390 <__multadd>
 80111d0:	4680      	mov	r8, r0
 80111d2:	4607      	mov	r7, r0
 80111d4:	9b01      	ldr	r3, [sp, #4]
 80111d6:	3301      	adds	r3, #1
 80111d8:	9301      	str	r3, [sp, #4]
 80111da:	e775      	b.n	80110c8 <_dtoa_r+0xa08>
 80111dc:	f000 f8d8 	bl	8011390 <__multadd>
 80111e0:	4639      	mov	r1, r7
 80111e2:	4680      	mov	r8, r0
 80111e4:	2300      	movs	r3, #0
 80111e6:	220a      	movs	r2, #10
 80111e8:	4620      	mov	r0, r4
 80111ea:	f000 f8d1 	bl	8011390 <__multadd>
 80111ee:	4607      	mov	r7, r0
 80111f0:	e7f0      	b.n	80111d4 <_dtoa_r+0xb14>
 80111f2:	f1b9 0f00 	cmp.w	r9, #0
 80111f6:	9a00      	ldr	r2, [sp, #0]
 80111f8:	bfcc      	ite	gt
 80111fa:	464d      	movgt	r5, r9
 80111fc:	2501      	movle	r5, #1
 80111fe:	4415      	add	r5, r2
 8011200:	f04f 0800 	mov.w	r8, #0
 8011204:	4659      	mov	r1, fp
 8011206:	2201      	movs	r2, #1
 8011208:	4620      	mov	r0, r4
 801120a:	9301      	str	r3, [sp, #4]
 801120c:	f000 fa70 	bl	80116f0 <__lshift>
 8011210:	4631      	mov	r1, r6
 8011212:	4683      	mov	fp, r0
 8011214:	f000 fad8 	bl	80117c8 <__mcmp>
 8011218:	2800      	cmp	r0, #0
 801121a:	dcb2      	bgt.n	8011182 <_dtoa_r+0xac2>
 801121c:	d102      	bne.n	8011224 <_dtoa_r+0xb64>
 801121e:	9b01      	ldr	r3, [sp, #4]
 8011220:	07db      	lsls	r3, r3, #31
 8011222:	d4ae      	bmi.n	8011182 <_dtoa_r+0xac2>
 8011224:	462b      	mov	r3, r5
 8011226:	461d      	mov	r5, r3
 8011228:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801122c:	2a30      	cmp	r2, #48	; 0x30
 801122e:	d0fa      	beq.n	8011226 <_dtoa_r+0xb66>
 8011230:	e6f7      	b.n	8011022 <_dtoa_r+0x962>
 8011232:	9a00      	ldr	r2, [sp, #0]
 8011234:	429a      	cmp	r2, r3
 8011236:	d1a5      	bne.n	8011184 <_dtoa_r+0xac4>
 8011238:	f10a 0a01 	add.w	sl, sl, #1
 801123c:	2331      	movs	r3, #49	; 0x31
 801123e:	e779      	b.n	8011134 <_dtoa_r+0xa74>
 8011240:	4b13      	ldr	r3, [pc, #76]	; (8011290 <_dtoa_r+0xbd0>)
 8011242:	f7ff baaf 	b.w	80107a4 <_dtoa_r+0xe4>
 8011246:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011248:	2b00      	cmp	r3, #0
 801124a:	f47f aa86 	bne.w	801075a <_dtoa_r+0x9a>
 801124e:	4b11      	ldr	r3, [pc, #68]	; (8011294 <_dtoa_r+0xbd4>)
 8011250:	f7ff baa8 	b.w	80107a4 <_dtoa_r+0xe4>
 8011254:	f1b9 0f00 	cmp.w	r9, #0
 8011258:	dc03      	bgt.n	8011262 <_dtoa_r+0xba2>
 801125a:	9b05      	ldr	r3, [sp, #20]
 801125c:	2b02      	cmp	r3, #2
 801125e:	f73f aec9 	bgt.w	8010ff4 <_dtoa_r+0x934>
 8011262:	9d00      	ldr	r5, [sp, #0]
 8011264:	4631      	mov	r1, r6
 8011266:	4658      	mov	r0, fp
 8011268:	f7ff f99d 	bl	80105a6 <quorem>
 801126c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011270:	f805 3b01 	strb.w	r3, [r5], #1
 8011274:	9a00      	ldr	r2, [sp, #0]
 8011276:	1aaa      	subs	r2, r5, r2
 8011278:	4591      	cmp	r9, r2
 801127a:	ddba      	ble.n	80111f2 <_dtoa_r+0xb32>
 801127c:	4659      	mov	r1, fp
 801127e:	2300      	movs	r3, #0
 8011280:	220a      	movs	r2, #10
 8011282:	4620      	mov	r0, r4
 8011284:	f000 f884 	bl	8011390 <__multadd>
 8011288:	4683      	mov	fp, r0
 801128a:	e7eb      	b.n	8011264 <_dtoa_r+0xba4>
 801128c:	08012d07 	.word	0x08012d07
 8011290:	08012c60 	.word	0x08012c60
 8011294:	08012c84 	.word	0x08012c84

08011298 <_localeconv_r>:
 8011298:	4800      	ldr	r0, [pc, #0]	; (801129c <_localeconv_r+0x4>)
 801129a:	4770      	bx	lr
 801129c:	200002d4 	.word	0x200002d4

080112a0 <malloc>:
 80112a0:	4b02      	ldr	r3, [pc, #8]	; (80112ac <malloc+0xc>)
 80112a2:	4601      	mov	r1, r0
 80112a4:	6818      	ldr	r0, [r3, #0]
 80112a6:	f000 bbef 	b.w	8011a88 <_malloc_r>
 80112aa:	bf00      	nop
 80112ac:	20000180 	.word	0x20000180

080112b0 <memcpy>:
 80112b0:	440a      	add	r2, r1
 80112b2:	4291      	cmp	r1, r2
 80112b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80112b8:	d100      	bne.n	80112bc <memcpy+0xc>
 80112ba:	4770      	bx	lr
 80112bc:	b510      	push	{r4, lr}
 80112be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80112c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80112c6:	4291      	cmp	r1, r2
 80112c8:	d1f9      	bne.n	80112be <memcpy+0xe>
 80112ca:	bd10      	pop	{r4, pc}

080112cc <_Balloc>:
 80112cc:	b570      	push	{r4, r5, r6, lr}
 80112ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80112d0:	4604      	mov	r4, r0
 80112d2:	460d      	mov	r5, r1
 80112d4:	b976      	cbnz	r6, 80112f4 <_Balloc+0x28>
 80112d6:	2010      	movs	r0, #16
 80112d8:	f7ff ffe2 	bl	80112a0 <malloc>
 80112dc:	4602      	mov	r2, r0
 80112de:	6260      	str	r0, [r4, #36]	; 0x24
 80112e0:	b920      	cbnz	r0, 80112ec <_Balloc+0x20>
 80112e2:	4b18      	ldr	r3, [pc, #96]	; (8011344 <_Balloc+0x78>)
 80112e4:	4818      	ldr	r0, [pc, #96]	; (8011348 <_Balloc+0x7c>)
 80112e6:	2166      	movs	r1, #102	; 0x66
 80112e8:	f000 fd94 	bl	8011e14 <__assert_func>
 80112ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80112f0:	6006      	str	r6, [r0, #0]
 80112f2:	60c6      	str	r6, [r0, #12]
 80112f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80112f6:	68f3      	ldr	r3, [r6, #12]
 80112f8:	b183      	cbz	r3, 801131c <_Balloc+0x50>
 80112fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112fc:	68db      	ldr	r3, [r3, #12]
 80112fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011302:	b9b8      	cbnz	r0, 8011334 <_Balloc+0x68>
 8011304:	2101      	movs	r1, #1
 8011306:	fa01 f605 	lsl.w	r6, r1, r5
 801130a:	1d72      	adds	r2, r6, #5
 801130c:	0092      	lsls	r2, r2, #2
 801130e:	4620      	mov	r0, r4
 8011310:	f000 fb5a 	bl	80119c8 <_calloc_r>
 8011314:	b160      	cbz	r0, 8011330 <_Balloc+0x64>
 8011316:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801131a:	e00e      	b.n	801133a <_Balloc+0x6e>
 801131c:	2221      	movs	r2, #33	; 0x21
 801131e:	2104      	movs	r1, #4
 8011320:	4620      	mov	r0, r4
 8011322:	f000 fb51 	bl	80119c8 <_calloc_r>
 8011326:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011328:	60f0      	str	r0, [r6, #12]
 801132a:	68db      	ldr	r3, [r3, #12]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d1e4      	bne.n	80112fa <_Balloc+0x2e>
 8011330:	2000      	movs	r0, #0
 8011332:	bd70      	pop	{r4, r5, r6, pc}
 8011334:	6802      	ldr	r2, [r0, #0]
 8011336:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801133a:	2300      	movs	r3, #0
 801133c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011340:	e7f7      	b.n	8011332 <_Balloc+0x66>
 8011342:	bf00      	nop
 8011344:	08012c91 	.word	0x08012c91
 8011348:	08012d18 	.word	0x08012d18

0801134c <_Bfree>:
 801134c:	b570      	push	{r4, r5, r6, lr}
 801134e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011350:	4605      	mov	r5, r0
 8011352:	460c      	mov	r4, r1
 8011354:	b976      	cbnz	r6, 8011374 <_Bfree+0x28>
 8011356:	2010      	movs	r0, #16
 8011358:	f7ff ffa2 	bl	80112a0 <malloc>
 801135c:	4602      	mov	r2, r0
 801135e:	6268      	str	r0, [r5, #36]	; 0x24
 8011360:	b920      	cbnz	r0, 801136c <_Bfree+0x20>
 8011362:	4b09      	ldr	r3, [pc, #36]	; (8011388 <_Bfree+0x3c>)
 8011364:	4809      	ldr	r0, [pc, #36]	; (801138c <_Bfree+0x40>)
 8011366:	218a      	movs	r1, #138	; 0x8a
 8011368:	f000 fd54 	bl	8011e14 <__assert_func>
 801136c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011370:	6006      	str	r6, [r0, #0]
 8011372:	60c6      	str	r6, [r0, #12]
 8011374:	b13c      	cbz	r4, 8011386 <_Bfree+0x3a>
 8011376:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011378:	6862      	ldr	r2, [r4, #4]
 801137a:	68db      	ldr	r3, [r3, #12]
 801137c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011380:	6021      	str	r1, [r4, #0]
 8011382:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011386:	bd70      	pop	{r4, r5, r6, pc}
 8011388:	08012c91 	.word	0x08012c91
 801138c:	08012d18 	.word	0x08012d18

08011390 <__multadd>:
 8011390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011394:	690e      	ldr	r6, [r1, #16]
 8011396:	4607      	mov	r7, r0
 8011398:	4698      	mov	r8, r3
 801139a:	460c      	mov	r4, r1
 801139c:	f101 0014 	add.w	r0, r1, #20
 80113a0:	2300      	movs	r3, #0
 80113a2:	6805      	ldr	r5, [r0, #0]
 80113a4:	b2a9      	uxth	r1, r5
 80113a6:	fb02 8101 	mla	r1, r2, r1, r8
 80113aa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80113ae:	0c2d      	lsrs	r5, r5, #16
 80113b0:	fb02 c505 	mla	r5, r2, r5, ip
 80113b4:	b289      	uxth	r1, r1
 80113b6:	3301      	adds	r3, #1
 80113b8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80113bc:	429e      	cmp	r6, r3
 80113be:	f840 1b04 	str.w	r1, [r0], #4
 80113c2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80113c6:	dcec      	bgt.n	80113a2 <__multadd+0x12>
 80113c8:	f1b8 0f00 	cmp.w	r8, #0
 80113cc:	d022      	beq.n	8011414 <__multadd+0x84>
 80113ce:	68a3      	ldr	r3, [r4, #8]
 80113d0:	42b3      	cmp	r3, r6
 80113d2:	dc19      	bgt.n	8011408 <__multadd+0x78>
 80113d4:	6861      	ldr	r1, [r4, #4]
 80113d6:	4638      	mov	r0, r7
 80113d8:	3101      	adds	r1, #1
 80113da:	f7ff ff77 	bl	80112cc <_Balloc>
 80113de:	4605      	mov	r5, r0
 80113e0:	b928      	cbnz	r0, 80113ee <__multadd+0x5e>
 80113e2:	4602      	mov	r2, r0
 80113e4:	4b0d      	ldr	r3, [pc, #52]	; (801141c <__multadd+0x8c>)
 80113e6:	480e      	ldr	r0, [pc, #56]	; (8011420 <__multadd+0x90>)
 80113e8:	21b5      	movs	r1, #181	; 0xb5
 80113ea:	f000 fd13 	bl	8011e14 <__assert_func>
 80113ee:	6922      	ldr	r2, [r4, #16]
 80113f0:	3202      	adds	r2, #2
 80113f2:	f104 010c 	add.w	r1, r4, #12
 80113f6:	0092      	lsls	r2, r2, #2
 80113f8:	300c      	adds	r0, #12
 80113fa:	f7ff ff59 	bl	80112b0 <memcpy>
 80113fe:	4621      	mov	r1, r4
 8011400:	4638      	mov	r0, r7
 8011402:	f7ff ffa3 	bl	801134c <_Bfree>
 8011406:	462c      	mov	r4, r5
 8011408:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801140c:	3601      	adds	r6, #1
 801140e:	f8c3 8014 	str.w	r8, [r3, #20]
 8011412:	6126      	str	r6, [r4, #16]
 8011414:	4620      	mov	r0, r4
 8011416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801141a:	bf00      	nop
 801141c:	08012d07 	.word	0x08012d07
 8011420:	08012d18 	.word	0x08012d18

08011424 <__hi0bits>:
 8011424:	0c03      	lsrs	r3, r0, #16
 8011426:	041b      	lsls	r3, r3, #16
 8011428:	b9d3      	cbnz	r3, 8011460 <__hi0bits+0x3c>
 801142a:	0400      	lsls	r0, r0, #16
 801142c:	2310      	movs	r3, #16
 801142e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011432:	bf04      	itt	eq
 8011434:	0200      	lsleq	r0, r0, #8
 8011436:	3308      	addeq	r3, #8
 8011438:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801143c:	bf04      	itt	eq
 801143e:	0100      	lsleq	r0, r0, #4
 8011440:	3304      	addeq	r3, #4
 8011442:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011446:	bf04      	itt	eq
 8011448:	0080      	lsleq	r0, r0, #2
 801144a:	3302      	addeq	r3, #2
 801144c:	2800      	cmp	r0, #0
 801144e:	db05      	blt.n	801145c <__hi0bits+0x38>
 8011450:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011454:	f103 0301 	add.w	r3, r3, #1
 8011458:	bf08      	it	eq
 801145a:	2320      	moveq	r3, #32
 801145c:	4618      	mov	r0, r3
 801145e:	4770      	bx	lr
 8011460:	2300      	movs	r3, #0
 8011462:	e7e4      	b.n	801142e <__hi0bits+0xa>

08011464 <__lo0bits>:
 8011464:	6803      	ldr	r3, [r0, #0]
 8011466:	f013 0207 	ands.w	r2, r3, #7
 801146a:	4601      	mov	r1, r0
 801146c:	d00b      	beq.n	8011486 <__lo0bits+0x22>
 801146e:	07da      	lsls	r2, r3, #31
 8011470:	d424      	bmi.n	80114bc <__lo0bits+0x58>
 8011472:	0798      	lsls	r0, r3, #30
 8011474:	bf49      	itett	mi
 8011476:	085b      	lsrmi	r3, r3, #1
 8011478:	089b      	lsrpl	r3, r3, #2
 801147a:	2001      	movmi	r0, #1
 801147c:	600b      	strmi	r3, [r1, #0]
 801147e:	bf5c      	itt	pl
 8011480:	600b      	strpl	r3, [r1, #0]
 8011482:	2002      	movpl	r0, #2
 8011484:	4770      	bx	lr
 8011486:	b298      	uxth	r0, r3
 8011488:	b9b0      	cbnz	r0, 80114b8 <__lo0bits+0x54>
 801148a:	0c1b      	lsrs	r3, r3, #16
 801148c:	2010      	movs	r0, #16
 801148e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011492:	bf04      	itt	eq
 8011494:	0a1b      	lsreq	r3, r3, #8
 8011496:	3008      	addeq	r0, #8
 8011498:	071a      	lsls	r2, r3, #28
 801149a:	bf04      	itt	eq
 801149c:	091b      	lsreq	r3, r3, #4
 801149e:	3004      	addeq	r0, #4
 80114a0:	079a      	lsls	r2, r3, #30
 80114a2:	bf04      	itt	eq
 80114a4:	089b      	lsreq	r3, r3, #2
 80114a6:	3002      	addeq	r0, #2
 80114a8:	07da      	lsls	r2, r3, #31
 80114aa:	d403      	bmi.n	80114b4 <__lo0bits+0x50>
 80114ac:	085b      	lsrs	r3, r3, #1
 80114ae:	f100 0001 	add.w	r0, r0, #1
 80114b2:	d005      	beq.n	80114c0 <__lo0bits+0x5c>
 80114b4:	600b      	str	r3, [r1, #0]
 80114b6:	4770      	bx	lr
 80114b8:	4610      	mov	r0, r2
 80114ba:	e7e8      	b.n	801148e <__lo0bits+0x2a>
 80114bc:	2000      	movs	r0, #0
 80114be:	4770      	bx	lr
 80114c0:	2020      	movs	r0, #32
 80114c2:	4770      	bx	lr

080114c4 <__i2b>:
 80114c4:	b510      	push	{r4, lr}
 80114c6:	460c      	mov	r4, r1
 80114c8:	2101      	movs	r1, #1
 80114ca:	f7ff feff 	bl	80112cc <_Balloc>
 80114ce:	4602      	mov	r2, r0
 80114d0:	b928      	cbnz	r0, 80114de <__i2b+0x1a>
 80114d2:	4b05      	ldr	r3, [pc, #20]	; (80114e8 <__i2b+0x24>)
 80114d4:	4805      	ldr	r0, [pc, #20]	; (80114ec <__i2b+0x28>)
 80114d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80114da:	f000 fc9b 	bl	8011e14 <__assert_func>
 80114de:	2301      	movs	r3, #1
 80114e0:	6144      	str	r4, [r0, #20]
 80114e2:	6103      	str	r3, [r0, #16]
 80114e4:	bd10      	pop	{r4, pc}
 80114e6:	bf00      	nop
 80114e8:	08012d07 	.word	0x08012d07
 80114ec:	08012d18 	.word	0x08012d18

080114f0 <__multiply>:
 80114f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114f4:	4614      	mov	r4, r2
 80114f6:	690a      	ldr	r2, [r1, #16]
 80114f8:	6923      	ldr	r3, [r4, #16]
 80114fa:	429a      	cmp	r2, r3
 80114fc:	bfb8      	it	lt
 80114fe:	460b      	movlt	r3, r1
 8011500:	460d      	mov	r5, r1
 8011502:	bfbc      	itt	lt
 8011504:	4625      	movlt	r5, r4
 8011506:	461c      	movlt	r4, r3
 8011508:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801150c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011510:	68ab      	ldr	r3, [r5, #8]
 8011512:	6869      	ldr	r1, [r5, #4]
 8011514:	eb0a 0709 	add.w	r7, sl, r9
 8011518:	42bb      	cmp	r3, r7
 801151a:	b085      	sub	sp, #20
 801151c:	bfb8      	it	lt
 801151e:	3101      	addlt	r1, #1
 8011520:	f7ff fed4 	bl	80112cc <_Balloc>
 8011524:	b930      	cbnz	r0, 8011534 <__multiply+0x44>
 8011526:	4602      	mov	r2, r0
 8011528:	4b42      	ldr	r3, [pc, #264]	; (8011634 <__multiply+0x144>)
 801152a:	4843      	ldr	r0, [pc, #268]	; (8011638 <__multiply+0x148>)
 801152c:	f240 115d 	movw	r1, #349	; 0x15d
 8011530:	f000 fc70 	bl	8011e14 <__assert_func>
 8011534:	f100 0614 	add.w	r6, r0, #20
 8011538:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801153c:	4633      	mov	r3, r6
 801153e:	2200      	movs	r2, #0
 8011540:	4543      	cmp	r3, r8
 8011542:	d31e      	bcc.n	8011582 <__multiply+0x92>
 8011544:	f105 0c14 	add.w	ip, r5, #20
 8011548:	f104 0314 	add.w	r3, r4, #20
 801154c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011550:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011554:	9202      	str	r2, [sp, #8]
 8011556:	ebac 0205 	sub.w	r2, ip, r5
 801155a:	3a15      	subs	r2, #21
 801155c:	f022 0203 	bic.w	r2, r2, #3
 8011560:	3204      	adds	r2, #4
 8011562:	f105 0115 	add.w	r1, r5, #21
 8011566:	458c      	cmp	ip, r1
 8011568:	bf38      	it	cc
 801156a:	2204      	movcc	r2, #4
 801156c:	9201      	str	r2, [sp, #4]
 801156e:	9a02      	ldr	r2, [sp, #8]
 8011570:	9303      	str	r3, [sp, #12]
 8011572:	429a      	cmp	r2, r3
 8011574:	d808      	bhi.n	8011588 <__multiply+0x98>
 8011576:	2f00      	cmp	r7, #0
 8011578:	dc55      	bgt.n	8011626 <__multiply+0x136>
 801157a:	6107      	str	r7, [r0, #16]
 801157c:	b005      	add	sp, #20
 801157e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011582:	f843 2b04 	str.w	r2, [r3], #4
 8011586:	e7db      	b.n	8011540 <__multiply+0x50>
 8011588:	f8b3 a000 	ldrh.w	sl, [r3]
 801158c:	f1ba 0f00 	cmp.w	sl, #0
 8011590:	d020      	beq.n	80115d4 <__multiply+0xe4>
 8011592:	f105 0e14 	add.w	lr, r5, #20
 8011596:	46b1      	mov	r9, r6
 8011598:	2200      	movs	r2, #0
 801159a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801159e:	f8d9 b000 	ldr.w	fp, [r9]
 80115a2:	b2a1      	uxth	r1, r4
 80115a4:	fa1f fb8b 	uxth.w	fp, fp
 80115a8:	fb0a b101 	mla	r1, sl, r1, fp
 80115ac:	4411      	add	r1, r2
 80115ae:	f8d9 2000 	ldr.w	r2, [r9]
 80115b2:	0c24      	lsrs	r4, r4, #16
 80115b4:	0c12      	lsrs	r2, r2, #16
 80115b6:	fb0a 2404 	mla	r4, sl, r4, r2
 80115ba:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80115be:	b289      	uxth	r1, r1
 80115c0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80115c4:	45f4      	cmp	ip, lr
 80115c6:	f849 1b04 	str.w	r1, [r9], #4
 80115ca:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80115ce:	d8e4      	bhi.n	801159a <__multiply+0xaa>
 80115d0:	9901      	ldr	r1, [sp, #4]
 80115d2:	5072      	str	r2, [r6, r1]
 80115d4:	9a03      	ldr	r2, [sp, #12]
 80115d6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80115da:	3304      	adds	r3, #4
 80115dc:	f1b9 0f00 	cmp.w	r9, #0
 80115e0:	d01f      	beq.n	8011622 <__multiply+0x132>
 80115e2:	6834      	ldr	r4, [r6, #0]
 80115e4:	f105 0114 	add.w	r1, r5, #20
 80115e8:	46b6      	mov	lr, r6
 80115ea:	f04f 0a00 	mov.w	sl, #0
 80115ee:	880a      	ldrh	r2, [r1, #0]
 80115f0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80115f4:	fb09 b202 	mla	r2, r9, r2, fp
 80115f8:	4492      	add	sl, r2
 80115fa:	b2a4      	uxth	r4, r4
 80115fc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011600:	f84e 4b04 	str.w	r4, [lr], #4
 8011604:	f851 4b04 	ldr.w	r4, [r1], #4
 8011608:	f8be 2000 	ldrh.w	r2, [lr]
 801160c:	0c24      	lsrs	r4, r4, #16
 801160e:	fb09 2404 	mla	r4, r9, r4, r2
 8011612:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011616:	458c      	cmp	ip, r1
 8011618:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801161c:	d8e7      	bhi.n	80115ee <__multiply+0xfe>
 801161e:	9a01      	ldr	r2, [sp, #4]
 8011620:	50b4      	str	r4, [r6, r2]
 8011622:	3604      	adds	r6, #4
 8011624:	e7a3      	b.n	801156e <__multiply+0x7e>
 8011626:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801162a:	2b00      	cmp	r3, #0
 801162c:	d1a5      	bne.n	801157a <__multiply+0x8a>
 801162e:	3f01      	subs	r7, #1
 8011630:	e7a1      	b.n	8011576 <__multiply+0x86>
 8011632:	bf00      	nop
 8011634:	08012d07 	.word	0x08012d07
 8011638:	08012d18 	.word	0x08012d18

0801163c <__pow5mult>:
 801163c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011640:	4615      	mov	r5, r2
 8011642:	f012 0203 	ands.w	r2, r2, #3
 8011646:	4606      	mov	r6, r0
 8011648:	460f      	mov	r7, r1
 801164a:	d007      	beq.n	801165c <__pow5mult+0x20>
 801164c:	4c25      	ldr	r4, [pc, #148]	; (80116e4 <__pow5mult+0xa8>)
 801164e:	3a01      	subs	r2, #1
 8011650:	2300      	movs	r3, #0
 8011652:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011656:	f7ff fe9b 	bl	8011390 <__multadd>
 801165a:	4607      	mov	r7, r0
 801165c:	10ad      	asrs	r5, r5, #2
 801165e:	d03d      	beq.n	80116dc <__pow5mult+0xa0>
 8011660:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011662:	b97c      	cbnz	r4, 8011684 <__pow5mult+0x48>
 8011664:	2010      	movs	r0, #16
 8011666:	f7ff fe1b 	bl	80112a0 <malloc>
 801166a:	4602      	mov	r2, r0
 801166c:	6270      	str	r0, [r6, #36]	; 0x24
 801166e:	b928      	cbnz	r0, 801167c <__pow5mult+0x40>
 8011670:	4b1d      	ldr	r3, [pc, #116]	; (80116e8 <__pow5mult+0xac>)
 8011672:	481e      	ldr	r0, [pc, #120]	; (80116ec <__pow5mult+0xb0>)
 8011674:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011678:	f000 fbcc 	bl	8011e14 <__assert_func>
 801167c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011680:	6004      	str	r4, [r0, #0]
 8011682:	60c4      	str	r4, [r0, #12]
 8011684:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011688:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801168c:	b94c      	cbnz	r4, 80116a2 <__pow5mult+0x66>
 801168e:	f240 2171 	movw	r1, #625	; 0x271
 8011692:	4630      	mov	r0, r6
 8011694:	f7ff ff16 	bl	80114c4 <__i2b>
 8011698:	2300      	movs	r3, #0
 801169a:	f8c8 0008 	str.w	r0, [r8, #8]
 801169e:	4604      	mov	r4, r0
 80116a0:	6003      	str	r3, [r0, #0]
 80116a2:	f04f 0900 	mov.w	r9, #0
 80116a6:	07eb      	lsls	r3, r5, #31
 80116a8:	d50a      	bpl.n	80116c0 <__pow5mult+0x84>
 80116aa:	4639      	mov	r1, r7
 80116ac:	4622      	mov	r2, r4
 80116ae:	4630      	mov	r0, r6
 80116b0:	f7ff ff1e 	bl	80114f0 <__multiply>
 80116b4:	4639      	mov	r1, r7
 80116b6:	4680      	mov	r8, r0
 80116b8:	4630      	mov	r0, r6
 80116ba:	f7ff fe47 	bl	801134c <_Bfree>
 80116be:	4647      	mov	r7, r8
 80116c0:	106d      	asrs	r5, r5, #1
 80116c2:	d00b      	beq.n	80116dc <__pow5mult+0xa0>
 80116c4:	6820      	ldr	r0, [r4, #0]
 80116c6:	b938      	cbnz	r0, 80116d8 <__pow5mult+0x9c>
 80116c8:	4622      	mov	r2, r4
 80116ca:	4621      	mov	r1, r4
 80116cc:	4630      	mov	r0, r6
 80116ce:	f7ff ff0f 	bl	80114f0 <__multiply>
 80116d2:	6020      	str	r0, [r4, #0]
 80116d4:	f8c0 9000 	str.w	r9, [r0]
 80116d8:	4604      	mov	r4, r0
 80116da:	e7e4      	b.n	80116a6 <__pow5mult+0x6a>
 80116dc:	4638      	mov	r0, r7
 80116de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116e2:	bf00      	nop
 80116e4:	08012e68 	.word	0x08012e68
 80116e8:	08012c91 	.word	0x08012c91
 80116ec:	08012d18 	.word	0x08012d18

080116f0 <__lshift>:
 80116f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116f4:	460c      	mov	r4, r1
 80116f6:	6849      	ldr	r1, [r1, #4]
 80116f8:	6923      	ldr	r3, [r4, #16]
 80116fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80116fe:	68a3      	ldr	r3, [r4, #8]
 8011700:	4607      	mov	r7, r0
 8011702:	4691      	mov	r9, r2
 8011704:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011708:	f108 0601 	add.w	r6, r8, #1
 801170c:	42b3      	cmp	r3, r6
 801170e:	db0b      	blt.n	8011728 <__lshift+0x38>
 8011710:	4638      	mov	r0, r7
 8011712:	f7ff fddb 	bl	80112cc <_Balloc>
 8011716:	4605      	mov	r5, r0
 8011718:	b948      	cbnz	r0, 801172e <__lshift+0x3e>
 801171a:	4602      	mov	r2, r0
 801171c:	4b28      	ldr	r3, [pc, #160]	; (80117c0 <__lshift+0xd0>)
 801171e:	4829      	ldr	r0, [pc, #164]	; (80117c4 <__lshift+0xd4>)
 8011720:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011724:	f000 fb76 	bl	8011e14 <__assert_func>
 8011728:	3101      	adds	r1, #1
 801172a:	005b      	lsls	r3, r3, #1
 801172c:	e7ee      	b.n	801170c <__lshift+0x1c>
 801172e:	2300      	movs	r3, #0
 8011730:	f100 0114 	add.w	r1, r0, #20
 8011734:	f100 0210 	add.w	r2, r0, #16
 8011738:	4618      	mov	r0, r3
 801173a:	4553      	cmp	r3, sl
 801173c:	db33      	blt.n	80117a6 <__lshift+0xb6>
 801173e:	6920      	ldr	r0, [r4, #16]
 8011740:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011744:	f104 0314 	add.w	r3, r4, #20
 8011748:	f019 091f 	ands.w	r9, r9, #31
 801174c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011750:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011754:	d02b      	beq.n	80117ae <__lshift+0xbe>
 8011756:	f1c9 0e20 	rsb	lr, r9, #32
 801175a:	468a      	mov	sl, r1
 801175c:	2200      	movs	r2, #0
 801175e:	6818      	ldr	r0, [r3, #0]
 8011760:	fa00 f009 	lsl.w	r0, r0, r9
 8011764:	4302      	orrs	r2, r0
 8011766:	f84a 2b04 	str.w	r2, [sl], #4
 801176a:	f853 2b04 	ldr.w	r2, [r3], #4
 801176e:	459c      	cmp	ip, r3
 8011770:	fa22 f20e 	lsr.w	r2, r2, lr
 8011774:	d8f3      	bhi.n	801175e <__lshift+0x6e>
 8011776:	ebac 0304 	sub.w	r3, ip, r4
 801177a:	3b15      	subs	r3, #21
 801177c:	f023 0303 	bic.w	r3, r3, #3
 8011780:	3304      	adds	r3, #4
 8011782:	f104 0015 	add.w	r0, r4, #21
 8011786:	4584      	cmp	ip, r0
 8011788:	bf38      	it	cc
 801178a:	2304      	movcc	r3, #4
 801178c:	50ca      	str	r2, [r1, r3]
 801178e:	b10a      	cbz	r2, 8011794 <__lshift+0xa4>
 8011790:	f108 0602 	add.w	r6, r8, #2
 8011794:	3e01      	subs	r6, #1
 8011796:	4638      	mov	r0, r7
 8011798:	612e      	str	r6, [r5, #16]
 801179a:	4621      	mov	r1, r4
 801179c:	f7ff fdd6 	bl	801134c <_Bfree>
 80117a0:	4628      	mov	r0, r5
 80117a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80117aa:	3301      	adds	r3, #1
 80117ac:	e7c5      	b.n	801173a <__lshift+0x4a>
 80117ae:	3904      	subs	r1, #4
 80117b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80117b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80117b8:	459c      	cmp	ip, r3
 80117ba:	d8f9      	bhi.n	80117b0 <__lshift+0xc0>
 80117bc:	e7ea      	b.n	8011794 <__lshift+0xa4>
 80117be:	bf00      	nop
 80117c0:	08012d07 	.word	0x08012d07
 80117c4:	08012d18 	.word	0x08012d18

080117c8 <__mcmp>:
 80117c8:	b530      	push	{r4, r5, lr}
 80117ca:	6902      	ldr	r2, [r0, #16]
 80117cc:	690c      	ldr	r4, [r1, #16]
 80117ce:	1b12      	subs	r2, r2, r4
 80117d0:	d10e      	bne.n	80117f0 <__mcmp+0x28>
 80117d2:	f100 0314 	add.w	r3, r0, #20
 80117d6:	3114      	adds	r1, #20
 80117d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80117dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80117e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80117e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80117e8:	42a5      	cmp	r5, r4
 80117ea:	d003      	beq.n	80117f4 <__mcmp+0x2c>
 80117ec:	d305      	bcc.n	80117fa <__mcmp+0x32>
 80117ee:	2201      	movs	r2, #1
 80117f0:	4610      	mov	r0, r2
 80117f2:	bd30      	pop	{r4, r5, pc}
 80117f4:	4283      	cmp	r3, r0
 80117f6:	d3f3      	bcc.n	80117e0 <__mcmp+0x18>
 80117f8:	e7fa      	b.n	80117f0 <__mcmp+0x28>
 80117fa:	f04f 32ff 	mov.w	r2, #4294967295
 80117fe:	e7f7      	b.n	80117f0 <__mcmp+0x28>

08011800 <__mdiff>:
 8011800:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011804:	460c      	mov	r4, r1
 8011806:	4606      	mov	r6, r0
 8011808:	4611      	mov	r1, r2
 801180a:	4620      	mov	r0, r4
 801180c:	4617      	mov	r7, r2
 801180e:	f7ff ffdb 	bl	80117c8 <__mcmp>
 8011812:	1e05      	subs	r5, r0, #0
 8011814:	d110      	bne.n	8011838 <__mdiff+0x38>
 8011816:	4629      	mov	r1, r5
 8011818:	4630      	mov	r0, r6
 801181a:	f7ff fd57 	bl	80112cc <_Balloc>
 801181e:	b930      	cbnz	r0, 801182e <__mdiff+0x2e>
 8011820:	4b39      	ldr	r3, [pc, #228]	; (8011908 <__mdiff+0x108>)
 8011822:	4602      	mov	r2, r0
 8011824:	f240 2132 	movw	r1, #562	; 0x232
 8011828:	4838      	ldr	r0, [pc, #224]	; (801190c <__mdiff+0x10c>)
 801182a:	f000 faf3 	bl	8011e14 <__assert_func>
 801182e:	2301      	movs	r3, #1
 8011830:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011834:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011838:	bfa4      	itt	ge
 801183a:	463b      	movge	r3, r7
 801183c:	4627      	movge	r7, r4
 801183e:	4630      	mov	r0, r6
 8011840:	6879      	ldr	r1, [r7, #4]
 8011842:	bfa6      	itte	ge
 8011844:	461c      	movge	r4, r3
 8011846:	2500      	movge	r5, #0
 8011848:	2501      	movlt	r5, #1
 801184a:	f7ff fd3f 	bl	80112cc <_Balloc>
 801184e:	b920      	cbnz	r0, 801185a <__mdiff+0x5a>
 8011850:	4b2d      	ldr	r3, [pc, #180]	; (8011908 <__mdiff+0x108>)
 8011852:	4602      	mov	r2, r0
 8011854:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011858:	e7e6      	b.n	8011828 <__mdiff+0x28>
 801185a:	693e      	ldr	r6, [r7, #16]
 801185c:	60c5      	str	r5, [r0, #12]
 801185e:	6925      	ldr	r5, [r4, #16]
 8011860:	f107 0114 	add.w	r1, r7, #20
 8011864:	f104 0914 	add.w	r9, r4, #20
 8011868:	f100 0e14 	add.w	lr, r0, #20
 801186c:	f107 0210 	add.w	r2, r7, #16
 8011870:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011874:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011878:	46f2      	mov	sl, lr
 801187a:	2700      	movs	r7, #0
 801187c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011880:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011884:	fa1f f883 	uxth.w	r8, r3
 8011888:	fa17 f78b 	uxtah	r7, r7, fp
 801188c:	0c1b      	lsrs	r3, r3, #16
 801188e:	eba7 0808 	sub.w	r8, r7, r8
 8011892:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011896:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801189a:	fa1f f888 	uxth.w	r8, r8
 801189e:	141f      	asrs	r7, r3, #16
 80118a0:	454d      	cmp	r5, r9
 80118a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80118a6:	f84a 3b04 	str.w	r3, [sl], #4
 80118aa:	d8e7      	bhi.n	801187c <__mdiff+0x7c>
 80118ac:	1b2b      	subs	r3, r5, r4
 80118ae:	3b15      	subs	r3, #21
 80118b0:	f023 0303 	bic.w	r3, r3, #3
 80118b4:	3304      	adds	r3, #4
 80118b6:	3415      	adds	r4, #21
 80118b8:	42a5      	cmp	r5, r4
 80118ba:	bf38      	it	cc
 80118bc:	2304      	movcc	r3, #4
 80118be:	4419      	add	r1, r3
 80118c0:	4473      	add	r3, lr
 80118c2:	469e      	mov	lr, r3
 80118c4:	460d      	mov	r5, r1
 80118c6:	4565      	cmp	r5, ip
 80118c8:	d30e      	bcc.n	80118e8 <__mdiff+0xe8>
 80118ca:	f10c 0203 	add.w	r2, ip, #3
 80118ce:	1a52      	subs	r2, r2, r1
 80118d0:	f022 0203 	bic.w	r2, r2, #3
 80118d4:	3903      	subs	r1, #3
 80118d6:	458c      	cmp	ip, r1
 80118d8:	bf38      	it	cc
 80118da:	2200      	movcc	r2, #0
 80118dc:	441a      	add	r2, r3
 80118de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80118e2:	b17b      	cbz	r3, 8011904 <__mdiff+0x104>
 80118e4:	6106      	str	r6, [r0, #16]
 80118e6:	e7a5      	b.n	8011834 <__mdiff+0x34>
 80118e8:	f855 8b04 	ldr.w	r8, [r5], #4
 80118ec:	fa17 f488 	uxtah	r4, r7, r8
 80118f0:	1422      	asrs	r2, r4, #16
 80118f2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80118f6:	b2a4      	uxth	r4, r4
 80118f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80118fc:	f84e 4b04 	str.w	r4, [lr], #4
 8011900:	1417      	asrs	r7, r2, #16
 8011902:	e7e0      	b.n	80118c6 <__mdiff+0xc6>
 8011904:	3e01      	subs	r6, #1
 8011906:	e7ea      	b.n	80118de <__mdiff+0xde>
 8011908:	08012d07 	.word	0x08012d07
 801190c:	08012d18 	.word	0x08012d18

08011910 <__d2b>:
 8011910:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011914:	4689      	mov	r9, r1
 8011916:	2101      	movs	r1, #1
 8011918:	ec57 6b10 	vmov	r6, r7, d0
 801191c:	4690      	mov	r8, r2
 801191e:	f7ff fcd5 	bl	80112cc <_Balloc>
 8011922:	4604      	mov	r4, r0
 8011924:	b930      	cbnz	r0, 8011934 <__d2b+0x24>
 8011926:	4602      	mov	r2, r0
 8011928:	4b25      	ldr	r3, [pc, #148]	; (80119c0 <__d2b+0xb0>)
 801192a:	4826      	ldr	r0, [pc, #152]	; (80119c4 <__d2b+0xb4>)
 801192c:	f240 310a 	movw	r1, #778	; 0x30a
 8011930:	f000 fa70 	bl	8011e14 <__assert_func>
 8011934:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011938:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801193c:	bb35      	cbnz	r5, 801198c <__d2b+0x7c>
 801193e:	2e00      	cmp	r6, #0
 8011940:	9301      	str	r3, [sp, #4]
 8011942:	d028      	beq.n	8011996 <__d2b+0x86>
 8011944:	4668      	mov	r0, sp
 8011946:	9600      	str	r6, [sp, #0]
 8011948:	f7ff fd8c 	bl	8011464 <__lo0bits>
 801194c:	9900      	ldr	r1, [sp, #0]
 801194e:	b300      	cbz	r0, 8011992 <__d2b+0x82>
 8011950:	9a01      	ldr	r2, [sp, #4]
 8011952:	f1c0 0320 	rsb	r3, r0, #32
 8011956:	fa02 f303 	lsl.w	r3, r2, r3
 801195a:	430b      	orrs	r3, r1
 801195c:	40c2      	lsrs	r2, r0
 801195e:	6163      	str	r3, [r4, #20]
 8011960:	9201      	str	r2, [sp, #4]
 8011962:	9b01      	ldr	r3, [sp, #4]
 8011964:	61a3      	str	r3, [r4, #24]
 8011966:	2b00      	cmp	r3, #0
 8011968:	bf14      	ite	ne
 801196a:	2202      	movne	r2, #2
 801196c:	2201      	moveq	r2, #1
 801196e:	6122      	str	r2, [r4, #16]
 8011970:	b1d5      	cbz	r5, 80119a8 <__d2b+0x98>
 8011972:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011976:	4405      	add	r5, r0
 8011978:	f8c9 5000 	str.w	r5, [r9]
 801197c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011980:	f8c8 0000 	str.w	r0, [r8]
 8011984:	4620      	mov	r0, r4
 8011986:	b003      	add	sp, #12
 8011988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801198c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011990:	e7d5      	b.n	801193e <__d2b+0x2e>
 8011992:	6161      	str	r1, [r4, #20]
 8011994:	e7e5      	b.n	8011962 <__d2b+0x52>
 8011996:	a801      	add	r0, sp, #4
 8011998:	f7ff fd64 	bl	8011464 <__lo0bits>
 801199c:	9b01      	ldr	r3, [sp, #4]
 801199e:	6163      	str	r3, [r4, #20]
 80119a0:	2201      	movs	r2, #1
 80119a2:	6122      	str	r2, [r4, #16]
 80119a4:	3020      	adds	r0, #32
 80119a6:	e7e3      	b.n	8011970 <__d2b+0x60>
 80119a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80119ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80119b0:	f8c9 0000 	str.w	r0, [r9]
 80119b4:	6918      	ldr	r0, [r3, #16]
 80119b6:	f7ff fd35 	bl	8011424 <__hi0bits>
 80119ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80119be:	e7df      	b.n	8011980 <__d2b+0x70>
 80119c0:	08012d07 	.word	0x08012d07
 80119c4:	08012d18 	.word	0x08012d18

080119c8 <_calloc_r>:
 80119c8:	b513      	push	{r0, r1, r4, lr}
 80119ca:	434a      	muls	r2, r1
 80119cc:	4611      	mov	r1, r2
 80119ce:	9201      	str	r2, [sp, #4]
 80119d0:	f000 f85a 	bl	8011a88 <_malloc_r>
 80119d4:	4604      	mov	r4, r0
 80119d6:	b118      	cbz	r0, 80119e0 <_calloc_r+0x18>
 80119d8:	9a01      	ldr	r2, [sp, #4]
 80119da:	2100      	movs	r1, #0
 80119dc:	f7fe f942 	bl	800fc64 <memset>
 80119e0:	4620      	mov	r0, r4
 80119e2:	b002      	add	sp, #8
 80119e4:	bd10      	pop	{r4, pc}
	...

080119e8 <_free_r>:
 80119e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80119ea:	2900      	cmp	r1, #0
 80119ec:	d048      	beq.n	8011a80 <_free_r+0x98>
 80119ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119f2:	9001      	str	r0, [sp, #4]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	f1a1 0404 	sub.w	r4, r1, #4
 80119fa:	bfb8      	it	lt
 80119fc:	18e4      	addlt	r4, r4, r3
 80119fe:	f000 fa65 	bl	8011ecc <__malloc_lock>
 8011a02:	4a20      	ldr	r2, [pc, #128]	; (8011a84 <_free_r+0x9c>)
 8011a04:	9801      	ldr	r0, [sp, #4]
 8011a06:	6813      	ldr	r3, [r2, #0]
 8011a08:	4615      	mov	r5, r2
 8011a0a:	b933      	cbnz	r3, 8011a1a <_free_r+0x32>
 8011a0c:	6063      	str	r3, [r4, #4]
 8011a0e:	6014      	str	r4, [r2, #0]
 8011a10:	b003      	add	sp, #12
 8011a12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a16:	f000 ba5f 	b.w	8011ed8 <__malloc_unlock>
 8011a1a:	42a3      	cmp	r3, r4
 8011a1c:	d90b      	bls.n	8011a36 <_free_r+0x4e>
 8011a1e:	6821      	ldr	r1, [r4, #0]
 8011a20:	1862      	adds	r2, r4, r1
 8011a22:	4293      	cmp	r3, r2
 8011a24:	bf04      	itt	eq
 8011a26:	681a      	ldreq	r2, [r3, #0]
 8011a28:	685b      	ldreq	r3, [r3, #4]
 8011a2a:	6063      	str	r3, [r4, #4]
 8011a2c:	bf04      	itt	eq
 8011a2e:	1852      	addeq	r2, r2, r1
 8011a30:	6022      	streq	r2, [r4, #0]
 8011a32:	602c      	str	r4, [r5, #0]
 8011a34:	e7ec      	b.n	8011a10 <_free_r+0x28>
 8011a36:	461a      	mov	r2, r3
 8011a38:	685b      	ldr	r3, [r3, #4]
 8011a3a:	b10b      	cbz	r3, 8011a40 <_free_r+0x58>
 8011a3c:	42a3      	cmp	r3, r4
 8011a3e:	d9fa      	bls.n	8011a36 <_free_r+0x4e>
 8011a40:	6811      	ldr	r1, [r2, #0]
 8011a42:	1855      	adds	r5, r2, r1
 8011a44:	42a5      	cmp	r5, r4
 8011a46:	d10b      	bne.n	8011a60 <_free_r+0x78>
 8011a48:	6824      	ldr	r4, [r4, #0]
 8011a4a:	4421      	add	r1, r4
 8011a4c:	1854      	adds	r4, r2, r1
 8011a4e:	42a3      	cmp	r3, r4
 8011a50:	6011      	str	r1, [r2, #0]
 8011a52:	d1dd      	bne.n	8011a10 <_free_r+0x28>
 8011a54:	681c      	ldr	r4, [r3, #0]
 8011a56:	685b      	ldr	r3, [r3, #4]
 8011a58:	6053      	str	r3, [r2, #4]
 8011a5a:	4421      	add	r1, r4
 8011a5c:	6011      	str	r1, [r2, #0]
 8011a5e:	e7d7      	b.n	8011a10 <_free_r+0x28>
 8011a60:	d902      	bls.n	8011a68 <_free_r+0x80>
 8011a62:	230c      	movs	r3, #12
 8011a64:	6003      	str	r3, [r0, #0]
 8011a66:	e7d3      	b.n	8011a10 <_free_r+0x28>
 8011a68:	6825      	ldr	r5, [r4, #0]
 8011a6a:	1961      	adds	r1, r4, r5
 8011a6c:	428b      	cmp	r3, r1
 8011a6e:	bf04      	itt	eq
 8011a70:	6819      	ldreq	r1, [r3, #0]
 8011a72:	685b      	ldreq	r3, [r3, #4]
 8011a74:	6063      	str	r3, [r4, #4]
 8011a76:	bf04      	itt	eq
 8011a78:	1949      	addeq	r1, r1, r5
 8011a7a:	6021      	streq	r1, [r4, #0]
 8011a7c:	6054      	str	r4, [r2, #4]
 8011a7e:	e7c7      	b.n	8011a10 <_free_r+0x28>
 8011a80:	b003      	add	sp, #12
 8011a82:	bd30      	pop	{r4, r5, pc}
 8011a84:	20000dd8 	.word	0x20000dd8

08011a88 <_malloc_r>:
 8011a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a8a:	1ccd      	adds	r5, r1, #3
 8011a8c:	f025 0503 	bic.w	r5, r5, #3
 8011a90:	3508      	adds	r5, #8
 8011a92:	2d0c      	cmp	r5, #12
 8011a94:	bf38      	it	cc
 8011a96:	250c      	movcc	r5, #12
 8011a98:	2d00      	cmp	r5, #0
 8011a9a:	4606      	mov	r6, r0
 8011a9c:	db01      	blt.n	8011aa2 <_malloc_r+0x1a>
 8011a9e:	42a9      	cmp	r1, r5
 8011aa0:	d903      	bls.n	8011aaa <_malloc_r+0x22>
 8011aa2:	230c      	movs	r3, #12
 8011aa4:	6033      	str	r3, [r6, #0]
 8011aa6:	2000      	movs	r0, #0
 8011aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011aaa:	f000 fa0f 	bl	8011ecc <__malloc_lock>
 8011aae:	4921      	ldr	r1, [pc, #132]	; (8011b34 <_malloc_r+0xac>)
 8011ab0:	680a      	ldr	r2, [r1, #0]
 8011ab2:	4614      	mov	r4, r2
 8011ab4:	b99c      	cbnz	r4, 8011ade <_malloc_r+0x56>
 8011ab6:	4f20      	ldr	r7, [pc, #128]	; (8011b38 <_malloc_r+0xb0>)
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	b923      	cbnz	r3, 8011ac6 <_malloc_r+0x3e>
 8011abc:	4621      	mov	r1, r4
 8011abe:	4630      	mov	r0, r6
 8011ac0:	f000 f998 	bl	8011df4 <_sbrk_r>
 8011ac4:	6038      	str	r0, [r7, #0]
 8011ac6:	4629      	mov	r1, r5
 8011ac8:	4630      	mov	r0, r6
 8011aca:	f000 f993 	bl	8011df4 <_sbrk_r>
 8011ace:	1c43      	adds	r3, r0, #1
 8011ad0:	d123      	bne.n	8011b1a <_malloc_r+0x92>
 8011ad2:	230c      	movs	r3, #12
 8011ad4:	6033      	str	r3, [r6, #0]
 8011ad6:	4630      	mov	r0, r6
 8011ad8:	f000 f9fe 	bl	8011ed8 <__malloc_unlock>
 8011adc:	e7e3      	b.n	8011aa6 <_malloc_r+0x1e>
 8011ade:	6823      	ldr	r3, [r4, #0]
 8011ae0:	1b5b      	subs	r3, r3, r5
 8011ae2:	d417      	bmi.n	8011b14 <_malloc_r+0x8c>
 8011ae4:	2b0b      	cmp	r3, #11
 8011ae6:	d903      	bls.n	8011af0 <_malloc_r+0x68>
 8011ae8:	6023      	str	r3, [r4, #0]
 8011aea:	441c      	add	r4, r3
 8011aec:	6025      	str	r5, [r4, #0]
 8011aee:	e004      	b.n	8011afa <_malloc_r+0x72>
 8011af0:	6863      	ldr	r3, [r4, #4]
 8011af2:	42a2      	cmp	r2, r4
 8011af4:	bf0c      	ite	eq
 8011af6:	600b      	streq	r3, [r1, #0]
 8011af8:	6053      	strne	r3, [r2, #4]
 8011afa:	4630      	mov	r0, r6
 8011afc:	f000 f9ec 	bl	8011ed8 <__malloc_unlock>
 8011b00:	f104 000b 	add.w	r0, r4, #11
 8011b04:	1d23      	adds	r3, r4, #4
 8011b06:	f020 0007 	bic.w	r0, r0, #7
 8011b0a:	1ac2      	subs	r2, r0, r3
 8011b0c:	d0cc      	beq.n	8011aa8 <_malloc_r+0x20>
 8011b0e:	1a1b      	subs	r3, r3, r0
 8011b10:	50a3      	str	r3, [r4, r2]
 8011b12:	e7c9      	b.n	8011aa8 <_malloc_r+0x20>
 8011b14:	4622      	mov	r2, r4
 8011b16:	6864      	ldr	r4, [r4, #4]
 8011b18:	e7cc      	b.n	8011ab4 <_malloc_r+0x2c>
 8011b1a:	1cc4      	adds	r4, r0, #3
 8011b1c:	f024 0403 	bic.w	r4, r4, #3
 8011b20:	42a0      	cmp	r0, r4
 8011b22:	d0e3      	beq.n	8011aec <_malloc_r+0x64>
 8011b24:	1a21      	subs	r1, r4, r0
 8011b26:	4630      	mov	r0, r6
 8011b28:	f000 f964 	bl	8011df4 <_sbrk_r>
 8011b2c:	3001      	adds	r0, #1
 8011b2e:	d1dd      	bne.n	8011aec <_malloc_r+0x64>
 8011b30:	e7cf      	b.n	8011ad2 <_malloc_r+0x4a>
 8011b32:	bf00      	nop
 8011b34:	20000dd8 	.word	0x20000dd8
 8011b38:	20000ddc 	.word	0x20000ddc

08011b3c <__ssputs_r>:
 8011b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b40:	688e      	ldr	r6, [r1, #8]
 8011b42:	429e      	cmp	r6, r3
 8011b44:	4682      	mov	sl, r0
 8011b46:	460c      	mov	r4, r1
 8011b48:	4690      	mov	r8, r2
 8011b4a:	461f      	mov	r7, r3
 8011b4c:	d838      	bhi.n	8011bc0 <__ssputs_r+0x84>
 8011b4e:	898a      	ldrh	r2, [r1, #12]
 8011b50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011b54:	d032      	beq.n	8011bbc <__ssputs_r+0x80>
 8011b56:	6825      	ldr	r5, [r4, #0]
 8011b58:	6909      	ldr	r1, [r1, #16]
 8011b5a:	eba5 0901 	sub.w	r9, r5, r1
 8011b5e:	6965      	ldr	r5, [r4, #20]
 8011b60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011b64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011b68:	3301      	adds	r3, #1
 8011b6a:	444b      	add	r3, r9
 8011b6c:	106d      	asrs	r5, r5, #1
 8011b6e:	429d      	cmp	r5, r3
 8011b70:	bf38      	it	cc
 8011b72:	461d      	movcc	r5, r3
 8011b74:	0553      	lsls	r3, r2, #21
 8011b76:	d531      	bpl.n	8011bdc <__ssputs_r+0xa0>
 8011b78:	4629      	mov	r1, r5
 8011b7a:	f7ff ff85 	bl	8011a88 <_malloc_r>
 8011b7e:	4606      	mov	r6, r0
 8011b80:	b950      	cbnz	r0, 8011b98 <__ssputs_r+0x5c>
 8011b82:	230c      	movs	r3, #12
 8011b84:	f8ca 3000 	str.w	r3, [sl]
 8011b88:	89a3      	ldrh	r3, [r4, #12]
 8011b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b8e:	81a3      	strh	r3, [r4, #12]
 8011b90:	f04f 30ff 	mov.w	r0, #4294967295
 8011b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b98:	6921      	ldr	r1, [r4, #16]
 8011b9a:	464a      	mov	r2, r9
 8011b9c:	f7ff fb88 	bl	80112b0 <memcpy>
 8011ba0:	89a3      	ldrh	r3, [r4, #12]
 8011ba2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011baa:	81a3      	strh	r3, [r4, #12]
 8011bac:	6126      	str	r6, [r4, #16]
 8011bae:	6165      	str	r5, [r4, #20]
 8011bb0:	444e      	add	r6, r9
 8011bb2:	eba5 0509 	sub.w	r5, r5, r9
 8011bb6:	6026      	str	r6, [r4, #0]
 8011bb8:	60a5      	str	r5, [r4, #8]
 8011bba:	463e      	mov	r6, r7
 8011bbc:	42be      	cmp	r6, r7
 8011bbe:	d900      	bls.n	8011bc2 <__ssputs_r+0x86>
 8011bc0:	463e      	mov	r6, r7
 8011bc2:	4632      	mov	r2, r6
 8011bc4:	6820      	ldr	r0, [r4, #0]
 8011bc6:	4641      	mov	r1, r8
 8011bc8:	f000 f966 	bl	8011e98 <memmove>
 8011bcc:	68a3      	ldr	r3, [r4, #8]
 8011bce:	6822      	ldr	r2, [r4, #0]
 8011bd0:	1b9b      	subs	r3, r3, r6
 8011bd2:	4432      	add	r2, r6
 8011bd4:	60a3      	str	r3, [r4, #8]
 8011bd6:	6022      	str	r2, [r4, #0]
 8011bd8:	2000      	movs	r0, #0
 8011bda:	e7db      	b.n	8011b94 <__ssputs_r+0x58>
 8011bdc:	462a      	mov	r2, r5
 8011bde:	f000 f981 	bl	8011ee4 <_realloc_r>
 8011be2:	4606      	mov	r6, r0
 8011be4:	2800      	cmp	r0, #0
 8011be6:	d1e1      	bne.n	8011bac <__ssputs_r+0x70>
 8011be8:	6921      	ldr	r1, [r4, #16]
 8011bea:	4650      	mov	r0, sl
 8011bec:	f7ff fefc 	bl	80119e8 <_free_r>
 8011bf0:	e7c7      	b.n	8011b82 <__ssputs_r+0x46>
	...

08011bf4 <_svfiprintf_r>:
 8011bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bf8:	4698      	mov	r8, r3
 8011bfa:	898b      	ldrh	r3, [r1, #12]
 8011bfc:	061b      	lsls	r3, r3, #24
 8011bfe:	b09d      	sub	sp, #116	; 0x74
 8011c00:	4607      	mov	r7, r0
 8011c02:	460d      	mov	r5, r1
 8011c04:	4614      	mov	r4, r2
 8011c06:	d50e      	bpl.n	8011c26 <_svfiprintf_r+0x32>
 8011c08:	690b      	ldr	r3, [r1, #16]
 8011c0a:	b963      	cbnz	r3, 8011c26 <_svfiprintf_r+0x32>
 8011c0c:	2140      	movs	r1, #64	; 0x40
 8011c0e:	f7ff ff3b 	bl	8011a88 <_malloc_r>
 8011c12:	6028      	str	r0, [r5, #0]
 8011c14:	6128      	str	r0, [r5, #16]
 8011c16:	b920      	cbnz	r0, 8011c22 <_svfiprintf_r+0x2e>
 8011c18:	230c      	movs	r3, #12
 8011c1a:	603b      	str	r3, [r7, #0]
 8011c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8011c20:	e0d1      	b.n	8011dc6 <_svfiprintf_r+0x1d2>
 8011c22:	2340      	movs	r3, #64	; 0x40
 8011c24:	616b      	str	r3, [r5, #20]
 8011c26:	2300      	movs	r3, #0
 8011c28:	9309      	str	r3, [sp, #36]	; 0x24
 8011c2a:	2320      	movs	r3, #32
 8011c2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011c30:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c34:	2330      	movs	r3, #48	; 0x30
 8011c36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011de0 <_svfiprintf_r+0x1ec>
 8011c3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011c3e:	f04f 0901 	mov.w	r9, #1
 8011c42:	4623      	mov	r3, r4
 8011c44:	469a      	mov	sl, r3
 8011c46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c4a:	b10a      	cbz	r2, 8011c50 <_svfiprintf_r+0x5c>
 8011c4c:	2a25      	cmp	r2, #37	; 0x25
 8011c4e:	d1f9      	bne.n	8011c44 <_svfiprintf_r+0x50>
 8011c50:	ebba 0b04 	subs.w	fp, sl, r4
 8011c54:	d00b      	beq.n	8011c6e <_svfiprintf_r+0x7a>
 8011c56:	465b      	mov	r3, fp
 8011c58:	4622      	mov	r2, r4
 8011c5a:	4629      	mov	r1, r5
 8011c5c:	4638      	mov	r0, r7
 8011c5e:	f7ff ff6d 	bl	8011b3c <__ssputs_r>
 8011c62:	3001      	adds	r0, #1
 8011c64:	f000 80aa 	beq.w	8011dbc <_svfiprintf_r+0x1c8>
 8011c68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c6a:	445a      	add	r2, fp
 8011c6c:	9209      	str	r2, [sp, #36]	; 0x24
 8011c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	f000 80a2 	beq.w	8011dbc <_svfiprintf_r+0x1c8>
 8011c78:	2300      	movs	r3, #0
 8011c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8011c7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c82:	f10a 0a01 	add.w	sl, sl, #1
 8011c86:	9304      	str	r3, [sp, #16]
 8011c88:	9307      	str	r3, [sp, #28]
 8011c8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011c8e:	931a      	str	r3, [sp, #104]	; 0x68
 8011c90:	4654      	mov	r4, sl
 8011c92:	2205      	movs	r2, #5
 8011c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c98:	4851      	ldr	r0, [pc, #324]	; (8011de0 <_svfiprintf_r+0x1ec>)
 8011c9a:	f7ee faa9 	bl	80001f0 <memchr>
 8011c9e:	9a04      	ldr	r2, [sp, #16]
 8011ca0:	b9d8      	cbnz	r0, 8011cda <_svfiprintf_r+0xe6>
 8011ca2:	06d0      	lsls	r0, r2, #27
 8011ca4:	bf44      	itt	mi
 8011ca6:	2320      	movmi	r3, #32
 8011ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011cac:	0711      	lsls	r1, r2, #28
 8011cae:	bf44      	itt	mi
 8011cb0:	232b      	movmi	r3, #43	; 0x2b
 8011cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011cb6:	f89a 3000 	ldrb.w	r3, [sl]
 8011cba:	2b2a      	cmp	r3, #42	; 0x2a
 8011cbc:	d015      	beq.n	8011cea <_svfiprintf_r+0xf6>
 8011cbe:	9a07      	ldr	r2, [sp, #28]
 8011cc0:	4654      	mov	r4, sl
 8011cc2:	2000      	movs	r0, #0
 8011cc4:	f04f 0c0a 	mov.w	ip, #10
 8011cc8:	4621      	mov	r1, r4
 8011cca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011cce:	3b30      	subs	r3, #48	; 0x30
 8011cd0:	2b09      	cmp	r3, #9
 8011cd2:	d94e      	bls.n	8011d72 <_svfiprintf_r+0x17e>
 8011cd4:	b1b0      	cbz	r0, 8011d04 <_svfiprintf_r+0x110>
 8011cd6:	9207      	str	r2, [sp, #28]
 8011cd8:	e014      	b.n	8011d04 <_svfiprintf_r+0x110>
 8011cda:	eba0 0308 	sub.w	r3, r0, r8
 8011cde:	fa09 f303 	lsl.w	r3, r9, r3
 8011ce2:	4313      	orrs	r3, r2
 8011ce4:	9304      	str	r3, [sp, #16]
 8011ce6:	46a2      	mov	sl, r4
 8011ce8:	e7d2      	b.n	8011c90 <_svfiprintf_r+0x9c>
 8011cea:	9b03      	ldr	r3, [sp, #12]
 8011cec:	1d19      	adds	r1, r3, #4
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	9103      	str	r1, [sp, #12]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	bfbb      	ittet	lt
 8011cf6:	425b      	neglt	r3, r3
 8011cf8:	f042 0202 	orrlt.w	r2, r2, #2
 8011cfc:	9307      	strge	r3, [sp, #28]
 8011cfe:	9307      	strlt	r3, [sp, #28]
 8011d00:	bfb8      	it	lt
 8011d02:	9204      	strlt	r2, [sp, #16]
 8011d04:	7823      	ldrb	r3, [r4, #0]
 8011d06:	2b2e      	cmp	r3, #46	; 0x2e
 8011d08:	d10c      	bne.n	8011d24 <_svfiprintf_r+0x130>
 8011d0a:	7863      	ldrb	r3, [r4, #1]
 8011d0c:	2b2a      	cmp	r3, #42	; 0x2a
 8011d0e:	d135      	bne.n	8011d7c <_svfiprintf_r+0x188>
 8011d10:	9b03      	ldr	r3, [sp, #12]
 8011d12:	1d1a      	adds	r2, r3, #4
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	9203      	str	r2, [sp, #12]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	bfb8      	it	lt
 8011d1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011d20:	3402      	adds	r4, #2
 8011d22:	9305      	str	r3, [sp, #20]
 8011d24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011df0 <_svfiprintf_r+0x1fc>
 8011d28:	7821      	ldrb	r1, [r4, #0]
 8011d2a:	2203      	movs	r2, #3
 8011d2c:	4650      	mov	r0, sl
 8011d2e:	f7ee fa5f 	bl	80001f0 <memchr>
 8011d32:	b140      	cbz	r0, 8011d46 <_svfiprintf_r+0x152>
 8011d34:	2340      	movs	r3, #64	; 0x40
 8011d36:	eba0 000a 	sub.w	r0, r0, sl
 8011d3a:	fa03 f000 	lsl.w	r0, r3, r0
 8011d3e:	9b04      	ldr	r3, [sp, #16]
 8011d40:	4303      	orrs	r3, r0
 8011d42:	3401      	adds	r4, #1
 8011d44:	9304      	str	r3, [sp, #16]
 8011d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d4a:	4826      	ldr	r0, [pc, #152]	; (8011de4 <_svfiprintf_r+0x1f0>)
 8011d4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011d50:	2206      	movs	r2, #6
 8011d52:	f7ee fa4d 	bl	80001f0 <memchr>
 8011d56:	2800      	cmp	r0, #0
 8011d58:	d038      	beq.n	8011dcc <_svfiprintf_r+0x1d8>
 8011d5a:	4b23      	ldr	r3, [pc, #140]	; (8011de8 <_svfiprintf_r+0x1f4>)
 8011d5c:	bb1b      	cbnz	r3, 8011da6 <_svfiprintf_r+0x1b2>
 8011d5e:	9b03      	ldr	r3, [sp, #12]
 8011d60:	3307      	adds	r3, #7
 8011d62:	f023 0307 	bic.w	r3, r3, #7
 8011d66:	3308      	adds	r3, #8
 8011d68:	9303      	str	r3, [sp, #12]
 8011d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d6c:	4433      	add	r3, r6
 8011d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8011d70:	e767      	b.n	8011c42 <_svfiprintf_r+0x4e>
 8011d72:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d76:	460c      	mov	r4, r1
 8011d78:	2001      	movs	r0, #1
 8011d7a:	e7a5      	b.n	8011cc8 <_svfiprintf_r+0xd4>
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	3401      	adds	r4, #1
 8011d80:	9305      	str	r3, [sp, #20]
 8011d82:	4619      	mov	r1, r3
 8011d84:	f04f 0c0a 	mov.w	ip, #10
 8011d88:	4620      	mov	r0, r4
 8011d8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d8e:	3a30      	subs	r2, #48	; 0x30
 8011d90:	2a09      	cmp	r2, #9
 8011d92:	d903      	bls.n	8011d9c <_svfiprintf_r+0x1a8>
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d0c5      	beq.n	8011d24 <_svfiprintf_r+0x130>
 8011d98:	9105      	str	r1, [sp, #20]
 8011d9a:	e7c3      	b.n	8011d24 <_svfiprintf_r+0x130>
 8011d9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011da0:	4604      	mov	r4, r0
 8011da2:	2301      	movs	r3, #1
 8011da4:	e7f0      	b.n	8011d88 <_svfiprintf_r+0x194>
 8011da6:	ab03      	add	r3, sp, #12
 8011da8:	9300      	str	r3, [sp, #0]
 8011daa:	462a      	mov	r2, r5
 8011dac:	4b0f      	ldr	r3, [pc, #60]	; (8011dec <_svfiprintf_r+0x1f8>)
 8011dae:	a904      	add	r1, sp, #16
 8011db0:	4638      	mov	r0, r7
 8011db2:	f7fd ffff 	bl	800fdb4 <_printf_float>
 8011db6:	1c42      	adds	r2, r0, #1
 8011db8:	4606      	mov	r6, r0
 8011dba:	d1d6      	bne.n	8011d6a <_svfiprintf_r+0x176>
 8011dbc:	89ab      	ldrh	r3, [r5, #12]
 8011dbe:	065b      	lsls	r3, r3, #25
 8011dc0:	f53f af2c 	bmi.w	8011c1c <_svfiprintf_r+0x28>
 8011dc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011dc6:	b01d      	add	sp, #116	; 0x74
 8011dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dcc:	ab03      	add	r3, sp, #12
 8011dce:	9300      	str	r3, [sp, #0]
 8011dd0:	462a      	mov	r2, r5
 8011dd2:	4b06      	ldr	r3, [pc, #24]	; (8011dec <_svfiprintf_r+0x1f8>)
 8011dd4:	a904      	add	r1, sp, #16
 8011dd6:	4638      	mov	r0, r7
 8011dd8:	f7fe fa90 	bl	80102fc <_printf_i>
 8011ddc:	e7eb      	b.n	8011db6 <_svfiprintf_r+0x1c2>
 8011dde:	bf00      	nop
 8011de0:	08012e74 	.word	0x08012e74
 8011de4:	08012e7e 	.word	0x08012e7e
 8011de8:	0800fdb5 	.word	0x0800fdb5
 8011dec:	08011b3d 	.word	0x08011b3d
 8011df0:	08012e7a 	.word	0x08012e7a

08011df4 <_sbrk_r>:
 8011df4:	b538      	push	{r3, r4, r5, lr}
 8011df6:	4d06      	ldr	r5, [pc, #24]	; (8011e10 <_sbrk_r+0x1c>)
 8011df8:	2300      	movs	r3, #0
 8011dfa:	4604      	mov	r4, r0
 8011dfc:	4608      	mov	r0, r1
 8011dfe:	602b      	str	r3, [r5, #0]
 8011e00:	f7f0 fcdc 	bl	80027bc <_sbrk>
 8011e04:	1c43      	adds	r3, r0, #1
 8011e06:	d102      	bne.n	8011e0e <_sbrk_r+0x1a>
 8011e08:	682b      	ldr	r3, [r5, #0]
 8011e0a:	b103      	cbz	r3, 8011e0e <_sbrk_r+0x1a>
 8011e0c:	6023      	str	r3, [r4, #0]
 8011e0e:	bd38      	pop	{r3, r4, r5, pc}
 8011e10:	20003228 	.word	0x20003228

08011e14 <__assert_func>:
 8011e14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e16:	4614      	mov	r4, r2
 8011e18:	461a      	mov	r2, r3
 8011e1a:	4b09      	ldr	r3, [pc, #36]	; (8011e40 <__assert_func+0x2c>)
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	4605      	mov	r5, r0
 8011e20:	68d8      	ldr	r0, [r3, #12]
 8011e22:	b14c      	cbz	r4, 8011e38 <__assert_func+0x24>
 8011e24:	4b07      	ldr	r3, [pc, #28]	; (8011e44 <__assert_func+0x30>)
 8011e26:	9100      	str	r1, [sp, #0]
 8011e28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011e2c:	4906      	ldr	r1, [pc, #24]	; (8011e48 <__assert_func+0x34>)
 8011e2e:	462b      	mov	r3, r5
 8011e30:	f000 f80e 	bl	8011e50 <fiprintf>
 8011e34:	f000 faa4 	bl	8012380 <abort>
 8011e38:	4b04      	ldr	r3, [pc, #16]	; (8011e4c <__assert_func+0x38>)
 8011e3a:	461c      	mov	r4, r3
 8011e3c:	e7f3      	b.n	8011e26 <__assert_func+0x12>
 8011e3e:	bf00      	nop
 8011e40:	20000180 	.word	0x20000180
 8011e44:	08012e85 	.word	0x08012e85
 8011e48:	08012e92 	.word	0x08012e92
 8011e4c:	08012ec0 	.word	0x08012ec0

08011e50 <fiprintf>:
 8011e50:	b40e      	push	{r1, r2, r3}
 8011e52:	b503      	push	{r0, r1, lr}
 8011e54:	4601      	mov	r1, r0
 8011e56:	ab03      	add	r3, sp, #12
 8011e58:	4805      	ldr	r0, [pc, #20]	; (8011e70 <fiprintf+0x20>)
 8011e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e5e:	6800      	ldr	r0, [r0, #0]
 8011e60:	9301      	str	r3, [sp, #4]
 8011e62:	f000 f88f 	bl	8011f84 <_vfiprintf_r>
 8011e66:	b002      	add	sp, #8
 8011e68:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e6c:	b003      	add	sp, #12
 8011e6e:	4770      	bx	lr
 8011e70:	20000180 	.word	0x20000180

08011e74 <__ascii_mbtowc>:
 8011e74:	b082      	sub	sp, #8
 8011e76:	b901      	cbnz	r1, 8011e7a <__ascii_mbtowc+0x6>
 8011e78:	a901      	add	r1, sp, #4
 8011e7a:	b142      	cbz	r2, 8011e8e <__ascii_mbtowc+0x1a>
 8011e7c:	b14b      	cbz	r3, 8011e92 <__ascii_mbtowc+0x1e>
 8011e7e:	7813      	ldrb	r3, [r2, #0]
 8011e80:	600b      	str	r3, [r1, #0]
 8011e82:	7812      	ldrb	r2, [r2, #0]
 8011e84:	1e10      	subs	r0, r2, #0
 8011e86:	bf18      	it	ne
 8011e88:	2001      	movne	r0, #1
 8011e8a:	b002      	add	sp, #8
 8011e8c:	4770      	bx	lr
 8011e8e:	4610      	mov	r0, r2
 8011e90:	e7fb      	b.n	8011e8a <__ascii_mbtowc+0x16>
 8011e92:	f06f 0001 	mvn.w	r0, #1
 8011e96:	e7f8      	b.n	8011e8a <__ascii_mbtowc+0x16>

08011e98 <memmove>:
 8011e98:	4288      	cmp	r0, r1
 8011e9a:	b510      	push	{r4, lr}
 8011e9c:	eb01 0402 	add.w	r4, r1, r2
 8011ea0:	d902      	bls.n	8011ea8 <memmove+0x10>
 8011ea2:	4284      	cmp	r4, r0
 8011ea4:	4623      	mov	r3, r4
 8011ea6:	d807      	bhi.n	8011eb8 <memmove+0x20>
 8011ea8:	1e43      	subs	r3, r0, #1
 8011eaa:	42a1      	cmp	r1, r4
 8011eac:	d008      	beq.n	8011ec0 <memmove+0x28>
 8011eae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011eb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011eb6:	e7f8      	b.n	8011eaa <memmove+0x12>
 8011eb8:	4402      	add	r2, r0
 8011eba:	4601      	mov	r1, r0
 8011ebc:	428a      	cmp	r2, r1
 8011ebe:	d100      	bne.n	8011ec2 <memmove+0x2a>
 8011ec0:	bd10      	pop	{r4, pc}
 8011ec2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011ec6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011eca:	e7f7      	b.n	8011ebc <memmove+0x24>

08011ecc <__malloc_lock>:
 8011ecc:	4801      	ldr	r0, [pc, #4]	; (8011ed4 <__malloc_lock+0x8>)
 8011ece:	f000 bc17 	b.w	8012700 <__retarget_lock_acquire_recursive>
 8011ed2:	bf00      	nop
 8011ed4:	20003230 	.word	0x20003230

08011ed8 <__malloc_unlock>:
 8011ed8:	4801      	ldr	r0, [pc, #4]	; (8011ee0 <__malloc_unlock+0x8>)
 8011eda:	f000 bc12 	b.w	8012702 <__retarget_lock_release_recursive>
 8011ede:	bf00      	nop
 8011ee0:	20003230 	.word	0x20003230

08011ee4 <_realloc_r>:
 8011ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ee6:	4607      	mov	r7, r0
 8011ee8:	4614      	mov	r4, r2
 8011eea:	460e      	mov	r6, r1
 8011eec:	b921      	cbnz	r1, 8011ef8 <_realloc_r+0x14>
 8011eee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011ef2:	4611      	mov	r1, r2
 8011ef4:	f7ff bdc8 	b.w	8011a88 <_malloc_r>
 8011ef8:	b922      	cbnz	r2, 8011f04 <_realloc_r+0x20>
 8011efa:	f7ff fd75 	bl	80119e8 <_free_r>
 8011efe:	4625      	mov	r5, r4
 8011f00:	4628      	mov	r0, r5
 8011f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f04:	f000 fc62 	bl	80127cc <_malloc_usable_size_r>
 8011f08:	42a0      	cmp	r0, r4
 8011f0a:	d20f      	bcs.n	8011f2c <_realloc_r+0x48>
 8011f0c:	4621      	mov	r1, r4
 8011f0e:	4638      	mov	r0, r7
 8011f10:	f7ff fdba 	bl	8011a88 <_malloc_r>
 8011f14:	4605      	mov	r5, r0
 8011f16:	2800      	cmp	r0, #0
 8011f18:	d0f2      	beq.n	8011f00 <_realloc_r+0x1c>
 8011f1a:	4631      	mov	r1, r6
 8011f1c:	4622      	mov	r2, r4
 8011f1e:	f7ff f9c7 	bl	80112b0 <memcpy>
 8011f22:	4631      	mov	r1, r6
 8011f24:	4638      	mov	r0, r7
 8011f26:	f7ff fd5f 	bl	80119e8 <_free_r>
 8011f2a:	e7e9      	b.n	8011f00 <_realloc_r+0x1c>
 8011f2c:	4635      	mov	r5, r6
 8011f2e:	e7e7      	b.n	8011f00 <_realloc_r+0x1c>

08011f30 <__sfputc_r>:
 8011f30:	6893      	ldr	r3, [r2, #8]
 8011f32:	3b01      	subs	r3, #1
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	b410      	push	{r4}
 8011f38:	6093      	str	r3, [r2, #8]
 8011f3a:	da08      	bge.n	8011f4e <__sfputc_r+0x1e>
 8011f3c:	6994      	ldr	r4, [r2, #24]
 8011f3e:	42a3      	cmp	r3, r4
 8011f40:	db01      	blt.n	8011f46 <__sfputc_r+0x16>
 8011f42:	290a      	cmp	r1, #10
 8011f44:	d103      	bne.n	8011f4e <__sfputc_r+0x1e>
 8011f46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f4a:	f000 b94b 	b.w	80121e4 <__swbuf_r>
 8011f4e:	6813      	ldr	r3, [r2, #0]
 8011f50:	1c58      	adds	r0, r3, #1
 8011f52:	6010      	str	r0, [r2, #0]
 8011f54:	7019      	strb	r1, [r3, #0]
 8011f56:	4608      	mov	r0, r1
 8011f58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f5c:	4770      	bx	lr

08011f5e <__sfputs_r>:
 8011f5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f60:	4606      	mov	r6, r0
 8011f62:	460f      	mov	r7, r1
 8011f64:	4614      	mov	r4, r2
 8011f66:	18d5      	adds	r5, r2, r3
 8011f68:	42ac      	cmp	r4, r5
 8011f6a:	d101      	bne.n	8011f70 <__sfputs_r+0x12>
 8011f6c:	2000      	movs	r0, #0
 8011f6e:	e007      	b.n	8011f80 <__sfputs_r+0x22>
 8011f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f74:	463a      	mov	r2, r7
 8011f76:	4630      	mov	r0, r6
 8011f78:	f7ff ffda 	bl	8011f30 <__sfputc_r>
 8011f7c:	1c43      	adds	r3, r0, #1
 8011f7e:	d1f3      	bne.n	8011f68 <__sfputs_r+0xa>
 8011f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011f84 <_vfiprintf_r>:
 8011f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f88:	460d      	mov	r5, r1
 8011f8a:	b09d      	sub	sp, #116	; 0x74
 8011f8c:	4614      	mov	r4, r2
 8011f8e:	4698      	mov	r8, r3
 8011f90:	4606      	mov	r6, r0
 8011f92:	b118      	cbz	r0, 8011f9c <_vfiprintf_r+0x18>
 8011f94:	6983      	ldr	r3, [r0, #24]
 8011f96:	b90b      	cbnz	r3, 8011f9c <_vfiprintf_r+0x18>
 8011f98:	f000 fb14 	bl	80125c4 <__sinit>
 8011f9c:	4b89      	ldr	r3, [pc, #548]	; (80121c4 <_vfiprintf_r+0x240>)
 8011f9e:	429d      	cmp	r5, r3
 8011fa0:	d11b      	bne.n	8011fda <_vfiprintf_r+0x56>
 8011fa2:	6875      	ldr	r5, [r6, #4]
 8011fa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011fa6:	07d9      	lsls	r1, r3, #31
 8011fa8:	d405      	bmi.n	8011fb6 <_vfiprintf_r+0x32>
 8011faa:	89ab      	ldrh	r3, [r5, #12]
 8011fac:	059a      	lsls	r2, r3, #22
 8011fae:	d402      	bmi.n	8011fb6 <_vfiprintf_r+0x32>
 8011fb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011fb2:	f000 fba5 	bl	8012700 <__retarget_lock_acquire_recursive>
 8011fb6:	89ab      	ldrh	r3, [r5, #12]
 8011fb8:	071b      	lsls	r3, r3, #28
 8011fba:	d501      	bpl.n	8011fc0 <_vfiprintf_r+0x3c>
 8011fbc:	692b      	ldr	r3, [r5, #16]
 8011fbe:	b9eb      	cbnz	r3, 8011ffc <_vfiprintf_r+0x78>
 8011fc0:	4629      	mov	r1, r5
 8011fc2:	4630      	mov	r0, r6
 8011fc4:	f000 f96e 	bl	80122a4 <__swsetup_r>
 8011fc8:	b1c0      	cbz	r0, 8011ffc <_vfiprintf_r+0x78>
 8011fca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011fcc:	07dc      	lsls	r4, r3, #31
 8011fce:	d50e      	bpl.n	8011fee <_vfiprintf_r+0x6a>
 8011fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8011fd4:	b01d      	add	sp, #116	; 0x74
 8011fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fda:	4b7b      	ldr	r3, [pc, #492]	; (80121c8 <_vfiprintf_r+0x244>)
 8011fdc:	429d      	cmp	r5, r3
 8011fde:	d101      	bne.n	8011fe4 <_vfiprintf_r+0x60>
 8011fe0:	68b5      	ldr	r5, [r6, #8]
 8011fe2:	e7df      	b.n	8011fa4 <_vfiprintf_r+0x20>
 8011fe4:	4b79      	ldr	r3, [pc, #484]	; (80121cc <_vfiprintf_r+0x248>)
 8011fe6:	429d      	cmp	r5, r3
 8011fe8:	bf08      	it	eq
 8011fea:	68f5      	ldreq	r5, [r6, #12]
 8011fec:	e7da      	b.n	8011fa4 <_vfiprintf_r+0x20>
 8011fee:	89ab      	ldrh	r3, [r5, #12]
 8011ff0:	0598      	lsls	r0, r3, #22
 8011ff2:	d4ed      	bmi.n	8011fd0 <_vfiprintf_r+0x4c>
 8011ff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ff6:	f000 fb84 	bl	8012702 <__retarget_lock_release_recursive>
 8011ffa:	e7e9      	b.n	8011fd0 <_vfiprintf_r+0x4c>
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8012000:	2320      	movs	r3, #32
 8012002:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012006:	f8cd 800c 	str.w	r8, [sp, #12]
 801200a:	2330      	movs	r3, #48	; 0x30
 801200c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80121d0 <_vfiprintf_r+0x24c>
 8012010:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012014:	f04f 0901 	mov.w	r9, #1
 8012018:	4623      	mov	r3, r4
 801201a:	469a      	mov	sl, r3
 801201c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012020:	b10a      	cbz	r2, 8012026 <_vfiprintf_r+0xa2>
 8012022:	2a25      	cmp	r2, #37	; 0x25
 8012024:	d1f9      	bne.n	801201a <_vfiprintf_r+0x96>
 8012026:	ebba 0b04 	subs.w	fp, sl, r4
 801202a:	d00b      	beq.n	8012044 <_vfiprintf_r+0xc0>
 801202c:	465b      	mov	r3, fp
 801202e:	4622      	mov	r2, r4
 8012030:	4629      	mov	r1, r5
 8012032:	4630      	mov	r0, r6
 8012034:	f7ff ff93 	bl	8011f5e <__sfputs_r>
 8012038:	3001      	adds	r0, #1
 801203a:	f000 80aa 	beq.w	8012192 <_vfiprintf_r+0x20e>
 801203e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012040:	445a      	add	r2, fp
 8012042:	9209      	str	r2, [sp, #36]	; 0x24
 8012044:	f89a 3000 	ldrb.w	r3, [sl]
 8012048:	2b00      	cmp	r3, #0
 801204a:	f000 80a2 	beq.w	8012192 <_vfiprintf_r+0x20e>
 801204e:	2300      	movs	r3, #0
 8012050:	f04f 32ff 	mov.w	r2, #4294967295
 8012054:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012058:	f10a 0a01 	add.w	sl, sl, #1
 801205c:	9304      	str	r3, [sp, #16]
 801205e:	9307      	str	r3, [sp, #28]
 8012060:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012064:	931a      	str	r3, [sp, #104]	; 0x68
 8012066:	4654      	mov	r4, sl
 8012068:	2205      	movs	r2, #5
 801206a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801206e:	4858      	ldr	r0, [pc, #352]	; (80121d0 <_vfiprintf_r+0x24c>)
 8012070:	f7ee f8be 	bl	80001f0 <memchr>
 8012074:	9a04      	ldr	r2, [sp, #16]
 8012076:	b9d8      	cbnz	r0, 80120b0 <_vfiprintf_r+0x12c>
 8012078:	06d1      	lsls	r1, r2, #27
 801207a:	bf44      	itt	mi
 801207c:	2320      	movmi	r3, #32
 801207e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012082:	0713      	lsls	r3, r2, #28
 8012084:	bf44      	itt	mi
 8012086:	232b      	movmi	r3, #43	; 0x2b
 8012088:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801208c:	f89a 3000 	ldrb.w	r3, [sl]
 8012090:	2b2a      	cmp	r3, #42	; 0x2a
 8012092:	d015      	beq.n	80120c0 <_vfiprintf_r+0x13c>
 8012094:	9a07      	ldr	r2, [sp, #28]
 8012096:	4654      	mov	r4, sl
 8012098:	2000      	movs	r0, #0
 801209a:	f04f 0c0a 	mov.w	ip, #10
 801209e:	4621      	mov	r1, r4
 80120a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80120a4:	3b30      	subs	r3, #48	; 0x30
 80120a6:	2b09      	cmp	r3, #9
 80120a8:	d94e      	bls.n	8012148 <_vfiprintf_r+0x1c4>
 80120aa:	b1b0      	cbz	r0, 80120da <_vfiprintf_r+0x156>
 80120ac:	9207      	str	r2, [sp, #28]
 80120ae:	e014      	b.n	80120da <_vfiprintf_r+0x156>
 80120b0:	eba0 0308 	sub.w	r3, r0, r8
 80120b4:	fa09 f303 	lsl.w	r3, r9, r3
 80120b8:	4313      	orrs	r3, r2
 80120ba:	9304      	str	r3, [sp, #16]
 80120bc:	46a2      	mov	sl, r4
 80120be:	e7d2      	b.n	8012066 <_vfiprintf_r+0xe2>
 80120c0:	9b03      	ldr	r3, [sp, #12]
 80120c2:	1d19      	adds	r1, r3, #4
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	9103      	str	r1, [sp, #12]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	bfbb      	ittet	lt
 80120cc:	425b      	neglt	r3, r3
 80120ce:	f042 0202 	orrlt.w	r2, r2, #2
 80120d2:	9307      	strge	r3, [sp, #28]
 80120d4:	9307      	strlt	r3, [sp, #28]
 80120d6:	bfb8      	it	lt
 80120d8:	9204      	strlt	r2, [sp, #16]
 80120da:	7823      	ldrb	r3, [r4, #0]
 80120dc:	2b2e      	cmp	r3, #46	; 0x2e
 80120de:	d10c      	bne.n	80120fa <_vfiprintf_r+0x176>
 80120e0:	7863      	ldrb	r3, [r4, #1]
 80120e2:	2b2a      	cmp	r3, #42	; 0x2a
 80120e4:	d135      	bne.n	8012152 <_vfiprintf_r+0x1ce>
 80120e6:	9b03      	ldr	r3, [sp, #12]
 80120e8:	1d1a      	adds	r2, r3, #4
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	9203      	str	r2, [sp, #12]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	bfb8      	it	lt
 80120f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80120f6:	3402      	adds	r4, #2
 80120f8:	9305      	str	r3, [sp, #20]
 80120fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80121e0 <_vfiprintf_r+0x25c>
 80120fe:	7821      	ldrb	r1, [r4, #0]
 8012100:	2203      	movs	r2, #3
 8012102:	4650      	mov	r0, sl
 8012104:	f7ee f874 	bl	80001f0 <memchr>
 8012108:	b140      	cbz	r0, 801211c <_vfiprintf_r+0x198>
 801210a:	2340      	movs	r3, #64	; 0x40
 801210c:	eba0 000a 	sub.w	r0, r0, sl
 8012110:	fa03 f000 	lsl.w	r0, r3, r0
 8012114:	9b04      	ldr	r3, [sp, #16]
 8012116:	4303      	orrs	r3, r0
 8012118:	3401      	adds	r4, #1
 801211a:	9304      	str	r3, [sp, #16]
 801211c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012120:	482c      	ldr	r0, [pc, #176]	; (80121d4 <_vfiprintf_r+0x250>)
 8012122:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012126:	2206      	movs	r2, #6
 8012128:	f7ee f862 	bl	80001f0 <memchr>
 801212c:	2800      	cmp	r0, #0
 801212e:	d03f      	beq.n	80121b0 <_vfiprintf_r+0x22c>
 8012130:	4b29      	ldr	r3, [pc, #164]	; (80121d8 <_vfiprintf_r+0x254>)
 8012132:	bb1b      	cbnz	r3, 801217c <_vfiprintf_r+0x1f8>
 8012134:	9b03      	ldr	r3, [sp, #12]
 8012136:	3307      	adds	r3, #7
 8012138:	f023 0307 	bic.w	r3, r3, #7
 801213c:	3308      	adds	r3, #8
 801213e:	9303      	str	r3, [sp, #12]
 8012140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012142:	443b      	add	r3, r7
 8012144:	9309      	str	r3, [sp, #36]	; 0x24
 8012146:	e767      	b.n	8012018 <_vfiprintf_r+0x94>
 8012148:	fb0c 3202 	mla	r2, ip, r2, r3
 801214c:	460c      	mov	r4, r1
 801214e:	2001      	movs	r0, #1
 8012150:	e7a5      	b.n	801209e <_vfiprintf_r+0x11a>
 8012152:	2300      	movs	r3, #0
 8012154:	3401      	adds	r4, #1
 8012156:	9305      	str	r3, [sp, #20]
 8012158:	4619      	mov	r1, r3
 801215a:	f04f 0c0a 	mov.w	ip, #10
 801215e:	4620      	mov	r0, r4
 8012160:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012164:	3a30      	subs	r2, #48	; 0x30
 8012166:	2a09      	cmp	r2, #9
 8012168:	d903      	bls.n	8012172 <_vfiprintf_r+0x1ee>
 801216a:	2b00      	cmp	r3, #0
 801216c:	d0c5      	beq.n	80120fa <_vfiprintf_r+0x176>
 801216e:	9105      	str	r1, [sp, #20]
 8012170:	e7c3      	b.n	80120fa <_vfiprintf_r+0x176>
 8012172:	fb0c 2101 	mla	r1, ip, r1, r2
 8012176:	4604      	mov	r4, r0
 8012178:	2301      	movs	r3, #1
 801217a:	e7f0      	b.n	801215e <_vfiprintf_r+0x1da>
 801217c:	ab03      	add	r3, sp, #12
 801217e:	9300      	str	r3, [sp, #0]
 8012180:	462a      	mov	r2, r5
 8012182:	4b16      	ldr	r3, [pc, #88]	; (80121dc <_vfiprintf_r+0x258>)
 8012184:	a904      	add	r1, sp, #16
 8012186:	4630      	mov	r0, r6
 8012188:	f7fd fe14 	bl	800fdb4 <_printf_float>
 801218c:	4607      	mov	r7, r0
 801218e:	1c78      	adds	r0, r7, #1
 8012190:	d1d6      	bne.n	8012140 <_vfiprintf_r+0x1bc>
 8012192:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012194:	07d9      	lsls	r1, r3, #31
 8012196:	d405      	bmi.n	80121a4 <_vfiprintf_r+0x220>
 8012198:	89ab      	ldrh	r3, [r5, #12]
 801219a:	059a      	lsls	r2, r3, #22
 801219c:	d402      	bmi.n	80121a4 <_vfiprintf_r+0x220>
 801219e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80121a0:	f000 faaf 	bl	8012702 <__retarget_lock_release_recursive>
 80121a4:	89ab      	ldrh	r3, [r5, #12]
 80121a6:	065b      	lsls	r3, r3, #25
 80121a8:	f53f af12 	bmi.w	8011fd0 <_vfiprintf_r+0x4c>
 80121ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80121ae:	e711      	b.n	8011fd4 <_vfiprintf_r+0x50>
 80121b0:	ab03      	add	r3, sp, #12
 80121b2:	9300      	str	r3, [sp, #0]
 80121b4:	462a      	mov	r2, r5
 80121b6:	4b09      	ldr	r3, [pc, #36]	; (80121dc <_vfiprintf_r+0x258>)
 80121b8:	a904      	add	r1, sp, #16
 80121ba:	4630      	mov	r0, r6
 80121bc:	f7fe f89e 	bl	80102fc <_printf_i>
 80121c0:	e7e4      	b.n	801218c <_vfiprintf_r+0x208>
 80121c2:	bf00      	nop
 80121c4:	08012fec 	.word	0x08012fec
 80121c8:	0801300c 	.word	0x0801300c
 80121cc:	08012fcc 	.word	0x08012fcc
 80121d0:	08012e74 	.word	0x08012e74
 80121d4:	08012e7e 	.word	0x08012e7e
 80121d8:	0800fdb5 	.word	0x0800fdb5
 80121dc:	08011f5f 	.word	0x08011f5f
 80121e0:	08012e7a 	.word	0x08012e7a

080121e4 <__swbuf_r>:
 80121e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121e6:	460e      	mov	r6, r1
 80121e8:	4614      	mov	r4, r2
 80121ea:	4605      	mov	r5, r0
 80121ec:	b118      	cbz	r0, 80121f6 <__swbuf_r+0x12>
 80121ee:	6983      	ldr	r3, [r0, #24]
 80121f0:	b90b      	cbnz	r3, 80121f6 <__swbuf_r+0x12>
 80121f2:	f000 f9e7 	bl	80125c4 <__sinit>
 80121f6:	4b21      	ldr	r3, [pc, #132]	; (801227c <__swbuf_r+0x98>)
 80121f8:	429c      	cmp	r4, r3
 80121fa:	d12b      	bne.n	8012254 <__swbuf_r+0x70>
 80121fc:	686c      	ldr	r4, [r5, #4]
 80121fe:	69a3      	ldr	r3, [r4, #24]
 8012200:	60a3      	str	r3, [r4, #8]
 8012202:	89a3      	ldrh	r3, [r4, #12]
 8012204:	071a      	lsls	r2, r3, #28
 8012206:	d52f      	bpl.n	8012268 <__swbuf_r+0x84>
 8012208:	6923      	ldr	r3, [r4, #16]
 801220a:	b36b      	cbz	r3, 8012268 <__swbuf_r+0x84>
 801220c:	6923      	ldr	r3, [r4, #16]
 801220e:	6820      	ldr	r0, [r4, #0]
 8012210:	1ac0      	subs	r0, r0, r3
 8012212:	6963      	ldr	r3, [r4, #20]
 8012214:	b2f6      	uxtb	r6, r6
 8012216:	4283      	cmp	r3, r0
 8012218:	4637      	mov	r7, r6
 801221a:	dc04      	bgt.n	8012226 <__swbuf_r+0x42>
 801221c:	4621      	mov	r1, r4
 801221e:	4628      	mov	r0, r5
 8012220:	f000 f93c 	bl	801249c <_fflush_r>
 8012224:	bb30      	cbnz	r0, 8012274 <__swbuf_r+0x90>
 8012226:	68a3      	ldr	r3, [r4, #8]
 8012228:	3b01      	subs	r3, #1
 801222a:	60a3      	str	r3, [r4, #8]
 801222c:	6823      	ldr	r3, [r4, #0]
 801222e:	1c5a      	adds	r2, r3, #1
 8012230:	6022      	str	r2, [r4, #0]
 8012232:	701e      	strb	r6, [r3, #0]
 8012234:	6963      	ldr	r3, [r4, #20]
 8012236:	3001      	adds	r0, #1
 8012238:	4283      	cmp	r3, r0
 801223a:	d004      	beq.n	8012246 <__swbuf_r+0x62>
 801223c:	89a3      	ldrh	r3, [r4, #12]
 801223e:	07db      	lsls	r3, r3, #31
 8012240:	d506      	bpl.n	8012250 <__swbuf_r+0x6c>
 8012242:	2e0a      	cmp	r6, #10
 8012244:	d104      	bne.n	8012250 <__swbuf_r+0x6c>
 8012246:	4621      	mov	r1, r4
 8012248:	4628      	mov	r0, r5
 801224a:	f000 f927 	bl	801249c <_fflush_r>
 801224e:	b988      	cbnz	r0, 8012274 <__swbuf_r+0x90>
 8012250:	4638      	mov	r0, r7
 8012252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012254:	4b0a      	ldr	r3, [pc, #40]	; (8012280 <__swbuf_r+0x9c>)
 8012256:	429c      	cmp	r4, r3
 8012258:	d101      	bne.n	801225e <__swbuf_r+0x7a>
 801225a:	68ac      	ldr	r4, [r5, #8]
 801225c:	e7cf      	b.n	80121fe <__swbuf_r+0x1a>
 801225e:	4b09      	ldr	r3, [pc, #36]	; (8012284 <__swbuf_r+0xa0>)
 8012260:	429c      	cmp	r4, r3
 8012262:	bf08      	it	eq
 8012264:	68ec      	ldreq	r4, [r5, #12]
 8012266:	e7ca      	b.n	80121fe <__swbuf_r+0x1a>
 8012268:	4621      	mov	r1, r4
 801226a:	4628      	mov	r0, r5
 801226c:	f000 f81a 	bl	80122a4 <__swsetup_r>
 8012270:	2800      	cmp	r0, #0
 8012272:	d0cb      	beq.n	801220c <__swbuf_r+0x28>
 8012274:	f04f 37ff 	mov.w	r7, #4294967295
 8012278:	e7ea      	b.n	8012250 <__swbuf_r+0x6c>
 801227a:	bf00      	nop
 801227c:	08012fec 	.word	0x08012fec
 8012280:	0801300c 	.word	0x0801300c
 8012284:	08012fcc 	.word	0x08012fcc

08012288 <__ascii_wctomb>:
 8012288:	b149      	cbz	r1, 801229e <__ascii_wctomb+0x16>
 801228a:	2aff      	cmp	r2, #255	; 0xff
 801228c:	bf85      	ittet	hi
 801228e:	238a      	movhi	r3, #138	; 0x8a
 8012290:	6003      	strhi	r3, [r0, #0]
 8012292:	700a      	strbls	r2, [r1, #0]
 8012294:	f04f 30ff 	movhi.w	r0, #4294967295
 8012298:	bf98      	it	ls
 801229a:	2001      	movls	r0, #1
 801229c:	4770      	bx	lr
 801229e:	4608      	mov	r0, r1
 80122a0:	4770      	bx	lr
	...

080122a4 <__swsetup_r>:
 80122a4:	4b32      	ldr	r3, [pc, #200]	; (8012370 <__swsetup_r+0xcc>)
 80122a6:	b570      	push	{r4, r5, r6, lr}
 80122a8:	681d      	ldr	r5, [r3, #0]
 80122aa:	4606      	mov	r6, r0
 80122ac:	460c      	mov	r4, r1
 80122ae:	b125      	cbz	r5, 80122ba <__swsetup_r+0x16>
 80122b0:	69ab      	ldr	r3, [r5, #24]
 80122b2:	b913      	cbnz	r3, 80122ba <__swsetup_r+0x16>
 80122b4:	4628      	mov	r0, r5
 80122b6:	f000 f985 	bl	80125c4 <__sinit>
 80122ba:	4b2e      	ldr	r3, [pc, #184]	; (8012374 <__swsetup_r+0xd0>)
 80122bc:	429c      	cmp	r4, r3
 80122be:	d10f      	bne.n	80122e0 <__swsetup_r+0x3c>
 80122c0:	686c      	ldr	r4, [r5, #4]
 80122c2:	89a3      	ldrh	r3, [r4, #12]
 80122c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80122c8:	0719      	lsls	r1, r3, #28
 80122ca:	d42c      	bmi.n	8012326 <__swsetup_r+0x82>
 80122cc:	06dd      	lsls	r5, r3, #27
 80122ce:	d411      	bmi.n	80122f4 <__swsetup_r+0x50>
 80122d0:	2309      	movs	r3, #9
 80122d2:	6033      	str	r3, [r6, #0]
 80122d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80122d8:	81a3      	strh	r3, [r4, #12]
 80122da:	f04f 30ff 	mov.w	r0, #4294967295
 80122de:	e03e      	b.n	801235e <__swsetup_r+0xba>
 80122e0:	4b25      	ldr	r3, [pc, #148]	; (8012378 <__swsetup_r+0xd4>)
 80122e2:	429c      	cmp	r4, r3
 80122e4:	d101      	bne.n	80122ea <__swsetup_r+0x46>
 80122e6:	68ac      	ldr	r4, [r5, #8]
 80122e8:	e7eb      	b.n	80122c2 <__swsetup_r+0x1e>
 80122ea:	4b24      	ldr	r3, [pc, #144]	; (801237c <__swsetup_r+0xd8>)
 80122ec:	429c      	cmp	r4, r3
 80122ee:	bf08      	it	eq
 80122f0:	68ec      	ldreq	r4, [r5, #12]
 80122f2:	e7e6      	b.n	80122c2 <__swsetup_r+0x1e>
 80122f4:	0758      	lsls	r0, r3, #29
 80122f6:	d512      	bpl.n	801231e <__swsetup_r+0x7a>
 80122f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80122fa:	b141      	cbz	r1, 801230e <__swsetup_r+0x6a>
 80122fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012300:	4299      	cmp	r1, r3
 8012302:	d002      	beq.n	801230a <__swsetup_r+0x66>
 8012304:	4630      	mov	r0, r6
 8012306:	f7ff fb6f 	bl	80119e8 <_free_r>
 801230a:	2300      	movs	r3, #0
 801230c:	6363      	str	r3, [r4, #52]	; 0x34
 801230e:	89a3      	ldrh	r3, [r4, #12]
 8012310:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012314:	81a3      	strh	r3, [r4, #12]
 8012316:	2300      	movs	r3, #0
 8012318:	6063      	str	r3, [r4, #4]
 801231a:	6923      	ldr	r3, [r4, #16]
 801231c:	6023      	str	r3, [r4, #0]
 801231e:	89a3      	ldrh	r3, [r4, #12]
 8012320:	f043 0308 	orr.w	r3, r3, #8
 8012324:	81a3      	strh	r3, [r4, #12]
 8012326:	6923      	ldr	r3, [r4, #16]
 8012328:	b94b      	cbnz	r3, 801233e <__swsetup_r+0x9a>
 801232a:	89a3      	ldrh	r3, [r4, #12]
 801232c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012334:	d003      	beq.n	801233e <__swsetup_r+0x9a>
 8012336:	4621      	mov	r1, r4
 8012338:	4630      	mov	r0, r6
 801233a:	f000 fa07 	bl	801274c <__smakebuf_r>
 801233e:	89a0      	ldrh	r0, [r4, #12]
 8012340:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012344:	f010 0301 	ands.w	r3, r0, #1
 8012348:	d00a      	beq.n	8012360 <__swsetup_r+0xbc>
 801234a:	2300      	movs	r3, #0
 801234c:	60a3      	str	r3, [r4, #8]
 801234e:	6963      	ldr	r3, [r4, #20]
 8012350:	425b      	negs	r3, r3
 8012352:	61a3      	str	r3, [r4, #24]
 8012354:	6923      	ldr	r3, [r4, #16]
 8012356:	b943      	cbnz	r3, 801236a <__swsetup_r+0xc6>
 8012358:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801235c:	d1ba      	bne.n	80122d4 <__swsetup_r+0x30>
 801235e:	bd70      	pop	{r4, r5, r6, pc}
 8012360:	0781      	lsls	r1, r0, #30
 8012362:	bf58      	it	pl
 8012364:	6963      	ldrpl	r3, [r4, #20]
 8012366:	60a3      	str	r3, [r4, #8]
 8012368:	e7f4      	b.n	8012354 <__swsetup_r+0xb0>
 801236a:	2000      	movs	r0, #0
 801236c:	e7f7      	b.n	801235e <__swsetup_r+0xba>
 801236e:	bf00      	nop
 8012370:	20000180 	.word	0x20000180
 8012374:	08012fec 	.word	0x08012fec
 8012378:	0801300c 	.word	0x0801300c
 801237c:	08012fcc 	.word	0x08012fcc

08012380 <abort>:
 8012380:	b508      	push	{r3, lr}
 8012382:	2006      	movs	r0, #6
 8012384:	f000 fa52 	bl	801282c <raise>
 8012388:	2001      	movs	r0, #1
 801238a:	f7f0 f99f 	bl	80026cc <_exit>
	...

08012390 <__sflush_r>:
 8012390:	898a      	ldrh	r2, [r1, #12]
 8012392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012396:	4605      	mov	r5, r0
 8012398:	0710      	lsls	r0, r2, #28
 801239a:	460c      	mov	r4, r1
 801239c:	d458      	bmi.n	8012450 <__sflush_r+0xc0>
 801239e:	684b      	ldr	r3, [r1, #4]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	dc05      	bgt.n	80123b0 <__sflush_r+0x20>
 80123a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	dc02      	bgt.n	80123b0 <__sflush_r+0x20>
 80123aa:	2000      	movs	r0, #0
 80123ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80123b2:	2e00      	cmp	r6, #0
 80123b4:	d0f9      	beq.n	80123aa <__sflush_r+0x1a>
 80123b6:	2300      	movs	r3, #0
 80123b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80123bc:	682f      	ldr	r7, [r5, #0]
 80123be:	602b      	str	r3, [r5, #0]
 80123c0:	d032      	beq.n	8012428 <__sflush_r+0x98>
 80123c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80123c4:	89a3      	ldrh	r3, [r4, #12]
 80123c6:	075a      	lsls	r2, r3, #29
 80123c8:	d505      	bpl.n	80123d6 <__sflush_r+0x46>
 80123ca:	6863      	ldr	r3, [r4, #4]
 80123cc:	1ac0      	subs	r0, r0, r3
 80123ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80123d0:	b10b      	cbz	r3, 80123d6 <__sflush_r+0x46>
 80123d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80123d4:	1ac0      	subs	r0, r0, r3
 80123d6:	2300      	movs	r3, #0
 80123d8:	4602      	mov	r2, r0
 80123da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80123dc:	6a21      	ldr	r1, [r4, #32]
 80123de:	4628      	mov	r0, r5
 80123e0:	47b0      	blx	r6
 80123e2:	1c43      	adds	r3, r0, #1
 80123e4:	89a3      	ldrh	r3, [r4, #12]
 80123e6:	d106      	bne.n	80123f6 <__sflush_r+0x66>
 80123e8:	6829      	ldr	r1, [r5, #0]
 80123ea:	291d      	cmp	r1, #29
 80123ec:	d82c      	bhi.n	8012448 <__sflush_r+0xb8>
 80123ee:	4a2a      	ldr	r2, [pc, #168]	; (8012498 <__sflush_r+0x108>)
 80123f0:	40ca      	lsrs	r2, r1
 80123f2:	07d6      	lsls	r6, r2, #31
 80123f4:	d528      	bpl.n	8012448 <__sflush_r+0xb8>
 80123f6:	2200      	movs	r2, #0
 80123f8:	6062      	str	r2, [r4, #4]
 80123fa:	04d9      	lsls	r1, r3, #19
 80123fc:	6922      	ldr	r2, [r4, #16]
 80123fe:	6022      	str	r2, [r4, #0]
 8012400:	d504      	bpl.n	801240c <__sflush_r+0x7c>
 8012402:	1c42      	adds	r2, r0, #1
 8012404:	d101      	bne.n	801240a <__sflush_r+0x7a>
 8012406:	682b      	ldr	r3, [r5, #0]
 8012408:	b903      	cbnz	r3, 801240c <__sflush_r+0x7c>
 801240a:	6560      	str	r0, [r4, #84]	; 0x54
 801240c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801240e:	602f      	str	r7, [r5, #0]
 8012410:	2900      	cmp	r1, #0
 8012412:	d0ca      	beq.n	80123aa <__sflush_r+0x1a>
 8012414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012418:	4299      	cmp	r1, r3
 801241a:	d002      	beq.n	8012422 <__sflush_r+0x92>
 801241c:	4628      	mov	r0, r5
 801241e:	f7ff fae3 	bl	80119e8 <_free_r>
 8012422:	2000      	movs	r0, #0
 8012424:	6360      	str	r0, [r4, #52]	; 0x34
 8012426:	e7c1      	b.n	80123ac <__sflush_r+0x1c>
 8012428:	6a21      	ldr	r1, [r4, #32]
 801242a:	2301      	movs	r3, #1
 801242c:	4628      	mov	r0, r5
 801242e:	47b0      	blx	r6
 8012430:	1c41      	adds	r1, r0, #1
 8012432:	d1c7      	bne.n	80123c4 <__sflush_r+0x34>
 8012434:	682b      	ldr	r3, [r5, #0]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d0c4      	beq.n	80123c4 <__sflush_r+0x34>
 801243a:	2b1d      	cmp	r3, #29
 801243c:	d001      	beq.n	8012442 <__sflush_r+0xb2>
 801243e:	2b16      	cmp	r3, #22
 8012440:	d101      	bne.n	8012446 <__sflush_r+0xb6>
 8012442:	602f      	str	r7, [r5, #0]
 8012444:	e7b1      	b.n	80123aa <__sflush_r+0x1a>
 8012446:	89a3      	ldrh	r3, [r4, #12]
 8012448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801244c:	81a3      	strh	r3, [r4, #12]
 801244e:	e7ad      	b.n	80123ac <__sflush_r+0x1c>
 8012450:	690f      	ldr	r7, [r1, #16]
 8012452:	2f00      	cmp	r7, #0
 8012454:	d0a9      	beq.n	80123aa <__sflush_r+0x1a>
 8012456:	0793      	lsls	r3, r2, #30
 8012458:	680e      	ldr	r6, [r1, #0]
 801245a:	bf08      	it	eq
 801245c:	694b      	ldreq	r3, [r1, #20]
 801245e:	600f      	str	r7, [r1, #0]
 8012460:	bf18      	it	ne
 8012462:	2300      	movne	r3, #0
 8012464:	eba6 0807 	sub.w	r8, r6, r7
 8012468:	608b      	str	r3, [r1, #8]
 801246a:	f1b8 0f00 	cmp.w	r8, #0
 801246e:	dd9c      	ble.n	80123aa <__sflush_r+0x1a>
 8012470:	6a21      	ldr	r1, [r4, #32]
 8012472:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012474:	4643      	mov	r3, r8
 8012476:	463a      	mov	r2, r7
 8012478:	4628      	mov	r0, r5
 801247a:	47b0      	blx	r6
 801247c:	2800      	cmp	r0, #0
 801247e:	dc06      	bgt.n	801248e <__sflush_r+0xfe>
 8012480:	89a3      	ldrh	r3, [r4, #12]
 8012482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012486:	81a3      	strh	r3, [r4, #12]
 8012488:	f04f 30ff 	mov.w	r0, #4294967295
 801248c:	e78e      	b.n	80123ac <__sflush_r+0x1c>
 801248e:	4407      	add	r7, r0
 8012490:	eba8 0800 	sub.w	r8, r8, r0
 8012494:	e7e9      	b.n	801246a <__sflush_r+0xda>
 8012496:	bf00      	nop
 8012498:	20400001 	.word	0x20400001

0801249c <_fflush_r>:
 801249c:	b538      	push	{r3, r4, r5, lr}
 801249e:	690b      	ldr	r3, [r1, #16]
 80124a0:	4605      	mov	r5, r0
 80124a2:	460c      	mov	r4, r1
 80124a4:	b913      	cbnz	r3, 80124ac <_fflush_r+0x10>
 80124a6:	2500      	movs	r5, #0
 80124a8:	4628      	mov	r0, r5
 80124aa:	bd38      	pop	{r3, r4, r5, pc}
 80124ac:	b118      	cbz	r0, 80124b6 <_fflush_r+0x1a>
 80124ae:	6983      	ldr	r3, [r0, #24]
 80124b0:	b90b      	cbnz	r3, 80124b6 <_fflush_r+0x1a>
 80124b2:	f000 f887 	bl	80125c4 <__sinit>
 80124b6:	4b14      	ldr	r3, [pc, #80]	; (8012508 <_fflush_r+0x6c>)
 80124b8:	429c      	cmp	r4, r3
 80124ba:	d11b      	bne.n	80124f4 <_fflush_r+0x58>
 80124bc:	686c      	ldr	r4, [r5, #4]
 80124be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d0ef      	beq.n	80124a6 <_fflush_r+0xa>
 80124c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80124c8:	07d0      	lsls	r0, r2, #31
 80124ca:	d404      	bmi.n	80124d6 <_fflush_r+0x3a>
 80124cc:	0599      	lsls	r1, r3, #22
 80124ce:	d402      	bmi.n	80124d6 <_fflush_r+0x3a>
 80124d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124d2:	f000 f915 	bl	8012700 <__retarget_lock_acquire_recursive>
 80124d6:	4628      	mov	r0, r5
 80124d8:	4621      	mov	r1, r4
 80124da:	f7ff ff59 	bl	8012390 <__sflush_r>
 80124de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80124e0:	07da      	lsls	r2, r3, #31
 80124e2:	4605      	mov	r5, r0
 80124e4:	d4e0      	bmi.n	80124a8 <_fflush_r+0xc>
 80124e6:	89a3      	ldrh	r3, [r4, #12]
 80124e8:	059b      	lsls	r3, r3, #22
 80124ea:	d4dd      	bmi.n	80124a8 <_fflush_r+0xc>
 80124ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124ee:	f000 f908 	bl	8012702 <__retarget_lock_release_recursive>
 80124f2:	e7d9      	b.n	80124a8 <_fflush_r+0xc>
 80124f4:	4b05      	ldr	r3, [pc, #20]	; (801250c <_fflush_r+0x70>)
 80124f6:	429c      	cmp	r4, r3
 80124f8:	d101      	bne.n	80124fe <_fflush_r+0x62>
 80124fa:	68ac      	ldr	r4, [r5, #8]
 80124fc:	e7df      	b.n	80124be <_fflush_r+0x22>
 80124fe:	4b04      	ldr	r3, [pc, #16]	; (8012510 <_fflush_r+0x74>)
 8012500:	429c      	cmp	r4, r3
 8012502:	bf08      	it	eq
 8012504:	68ec      	ldreq	r4, [r5, #12]
 8012506:	e7da      	b.n	80124be <_fflush_r+0x22>
 8012508:	08012fec 	.word	0x08012fec
 801250c:	0801300c 	.word	0x0801300c
 8012510:	08012fcc 	.word	0x08012fcc

08012514 <std>:
 8012514:	2300      	movs	r3, #0
 8012516:	b510      	push	{r4, lr}
 8012518:	4604      	mov	r4, r0
 801251a:	e9c0 3300 	strd	r3, r3, [r0]
 801251e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012522:	6083      	str	r3, [r0, #8]
 8012524:	8181      	strh	r1, [r0, #12]
 8012526:	6643      	str	r3, [r0, #100]	; 0x64
 8012528:	81c2      	strh	r2, [r0, #14]
 801252a:	6183      	str	r3, [r0, #24]
 801252c:	4619      	mov	r1, r3
 801252e:	2208      	movs	r2, #8
 8012530:	305c      	adds	r0, #92	; 0x5c
 8012532:	f7fd fb97 	bl	800fc64 <memset>
 8012536:	4b05      	ldr	r3, [pc, #20]	; (801254c <std+0x38>)
 8012538:	6263      	str	r3, [r4, #36]	; 0x24
 801253a:	4b05      	ldr	r3, [pc, #20]	; (8012550 <std+0x3c>)
 801253c:	62a3      	str	r3, [r4, #40]	; 0x28
 801253e:	4b05      	ldr	r3, [pc, #20]	; (8012554 <std+0x40>)
 8012540:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012542:	4b05      	ldr	r3, [pc, #20]	; (8012558 <std+0x44>)
 8012544:	6224      	str	r4, [r4, #32]
 8012546:	6323      	str	r3, [r4, #48]	; 0x30
 8012548:	bd10      	pop	{r4, pc}
 801254a:	bf00      	nop
 801254c:	08012865 	.word	0x08012865
 8012550:	08012887 	.word	0x08012887
 8012554:	080128bf 	.word	0x080128bf
 8012558:	080128e3 	.word	0x080128e3

0801255c <_cleanup_r>:
 801255c:	4901      	ldr	r1, [pc, #4]	; (8012564 <_cleanup_r+0x8>)
 801255e:	f000 b8af 	b.w	80126c0 <_fwalk_reent>
 8012562:	bf00      	nop
 8012564:	0801249d 	.word	0x0801249d

08012568 <__sfmoreglue>:
 8012568:	b570      	push	{r4, r5, r6, lr}
 801256a:	1e4a      	subs	r2, r1, #1
 801256c:	2568      	movs	r5, #104	; 0x68
 801256e:	4355      	muls	r5, r2
 8012570:	460e      	mov	r6, r1
 8012572:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012576:	f7ff fa87 	bl	8011a88 <_malloc_r>
 801257a:	4604      	mov	r4, r0
 801257c:	b140      	cbz	r0, 8012590 <__sfmoreglue+0x28>
 801257e:	2100      	movs	r1, #0
 8012580:	e9c0 1600 	strd	r1, r6, [r0]
 8012584:	300c      	adds	r0, #12
 8012586:	60a0      	str	r0, [r4, #8]
 8012588:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801258c:	f7fd fb6a 	bl	800fc64 <memset>
 8012590:	4620      	mov	r0, r4
 8012592:	bd70      	pop	{r4, r5, r6, pc}

08012594 <__sfp_lock_acquire>:
 8012594:	4801      	ldr	r0, [pc, #4]	; (801259c <__sfp_lock_acquire+0x8>)
 8012596:	f000 b8b3 	b.w	8012700 <__retarget_lock_acquire_recursive>
 801259a:	bf00      	nop
 801259c:	20003234 	.word	0x20003234

080125a0 <__sfp_lock_release>:
 80125a0:	4801      	ldr	r0, [pc, #4]	; (80125a8 <__sfp_lock_release+0x8>)
 80125a2:	f000 b8ae 	b.w	8012702 <__retarget_lock_release_recursive>
 80125a6:	bf00      	nop
 80125a8:	20003234 	.word	0x20003234

080125ac <__sinit_lock_acquire>:
 80125ac:	4801      	ldr	r0, [pc, #4]	; (80125b4 <__sinit_lock_acquire+0x8>)
 80125ae:	f000 b8a7 	b.w	8012700 <__retarget_lock_acquire_recursive>
 80125b2:	bf00      	nop
 80125b4:	2000322f 	.word	0x2000322f

080125b8 <__sinit_lock_release>:
 80125b8:	4801      	ldr	r0, [pc, #4]	; (80125c0 <__sinit_lock_release+0x8>)
 80125ba:	f000 b8a2 	b.w	8012702 <__retarget_lock_release_recursive>
 80125be:	bf00      	nop
 80125c0:	2000322f 	.word	0x2000322f

080125c4 <__sinit>:
 80125c4:	b510      	push	{r4, lr}
 80125c6:	4604      	mov	r4, r0
 80125c8:	f7ff fff0 	bl	80125ac <__sinit_lock_acquire>
 80125cc:	69a3      	ldr	r3, [r4, #24]
 80125ce:	b11b      	cbz	r3, 80125d8 <__sinit+0x14>
 80125d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125d4:	f7ff bff0 	b.w	80125b8 <__sinit_lock_release>
 80125d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80125dc:	6523      	str	r3, [r4, #80]	; 0x50
 80125de:	4b13      	ldr	r3, [pc, #76]	; (801262c <__sinit+0x68>)
 80125e0:	4a13      	ldr	r2, [pc, #76]	; (8012630 <__sinit+0x6c>)
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80125e6:	42a3      	cmp	r3, r4
 80125e8:	bf04      	itt	eq
 80125ea:	2301      	moveq	r3, #1
 80125ec:	61a3      	streq	r3, [r4, #24]
 80125ee:	4620      	mov	r0, r4
 80125f0:	f000 f820 	bl	8012634 <__sfp>
 80125f4:	6060      	str	r0, [r4, #4]
 80125f6:	4620      	mov	r0, r4
 80125f8:	f000 f81c 	bl	8012634 <__sfp>
 80125fc:	60a0      	str	r0, [r4, #8]
 80125fe:	4620      	mov	r0, r4
 8012600:	f000 f818 	bl	8012634 <__sfp>
 8012604:	2200      	movs	r2, #0
 8012606:	60e0      	str	r0, [r4, #12]
 8012608:	2104      	movs	r1, #4
 801260a:	6860      	ldr	r0, [r4, #4]
 801260c:	f7ff ff82 	bl	8012514 <std>
 8012610:	68a0      	ldr	r0, [r4, #8]
 8012612:	2201      	movs	r2, #1
 8012614:	2109      	movs	r1, #9
 8012616:	f7ff ff7d 	bl	8012514 <std>
 801261a:	68e0      	ldr	r0, [r4, #12]
 801261c:	2202      	movs	r2, #2
 801261e:	2112      	movs	r1, #18
 8012620:	f7ff ff78 	bl	8012514 <std>
 8012624:	2301      	movs	r3, #1
 8012626:	61a3      	str	r3, [r4, #24]
 8012628:	e7d2      	b.n	80125d0 <__sinit+0xc>
 801262a:	bf00      	nop
 801262c:	08012c4c 	.word	0x08012c4c
 8012630:	0801255d 	.word	0x0801255d

08012634 <__sfp>:
 8012634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012636:	4607      	mov	r7, r0
 8012638:	f7ff ffac 	bl	8012594 <__sfp_lock_acquire>
 801263c:	4b1e      	ldr	r3, [pc, #120]	; (80126b8 <__sfp+0x84>)
 801263e:	681e      	ldr	r6, [r3, #0]
 8012640:	69b3      	ldr	r3, [r6, #24]
 8012642:	b913      	cbnz	r3, 801264a <__sfp+0x16>
 8012644:	4630      	mov	r0, r6
 8012646:	f7ff ffbd 	bl	80125c4 <__sinit>
 801264a:	3648      	adds	r6, #72	; 0x48
 801264c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012650:	3b01      	subs	r3, #1
 8012652:	d503      	bpl.n	801265c <__sfp+0x28>
 8012654:	6833      	ldr	r3, [r6, #0]
 8012656:	b30b      	cbz	r3, 801269c <__sfp+0x68>
 8012658:	6836      	ldr	r6, [r6, #0]
 801265a:	e7f7      	b.n	801264c <__sfp+0x18>
 801265c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012660:	b9d5      	cbnz	r5, 8012698 <__sfp+0x64>
 8012662:	4b16      	ldr	r3, [pc, #88]	; (80126bc <__sfp+0x88>)
 8012664:	60e3      	str	r3, [r4, #12]
 8012666:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801266a:	6665      	str	r5, [r4, #100]	; 0x64
 801266c:	f000 f847 	bl	80126fe <__retarget_lock_init_recursive>
 8012670:	f7ff ff96 	bl	80125a0 <__sfp_lock_release>
 8012674:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012678:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801267c:	6025      	str	r5, [r4, #0]
 801267e:	61a5      	str	r5, [r4, #24]
 8012680:	2208      	movs	r2, #8
 8012682:	4629      	mov	r1, r5
 8012684:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012688:	f7fd faec 	bl	800fc64 <memset>
 801268c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012690:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012694:	4620      	mov	r0, r4
 8012696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012698:	3468      	adds	r4, #104	; 0x68
 801269a:	e7d9      	b.n	8012650 <__sfp+0x1c>
 801269c:	2104      	movs	r1, #4
 801269e:	4638      	mov	r0, r7
 80126a0:	f7ff ff62 	bl	8012568 <__sfmoreglue>
 80126a4:	4604      	mov	r4, r0
 80126a6:	6030      	str	r0, [r6, #0]
 80126a8:	2800      	cmp	r0, #0
 80126aa:	d1d5      	bne.n	8012658 <__sfp+0x24>
 80126ac:	f7ff ff78 	bl	80125a0 <__sfp_lock_release>
 80126b0:	230c      	movs	r3, #12
 80126b2:	603b      	str	r3, [r7, #0]
 80126b4:	e7ee      	b.n	8012694 <__sfp+0x60>
 80126b6:	bf00      	nop
 80126b8:	08012c4c 	.word	0x08012c4c
 80126bc:	ffff0001 	.word	0xffff0001

080126c0 <_fwalk_reent>:
 80126c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126c4:	4606      	mov	r6, r0
 80126c6:	4688      	mov	r8, r1
 80126c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80126cc:	2700      	movs	r7, #0
 80126ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80126d2:	f1b9 0901 	subs.w	r9, r9, #1
 80126d6:	d505      	bpl.n	80126e4 <_fwalk_reent+0x24>
 80126d8:	6824      	ldr	r4, [r4, #0]
 80126da:	2c00      	cmp	r4, #0
 80126dc:	d1f7      	bne.n	80126ce <_fwalk_reent+0xe>
 80126de:	4638      	mov	r0, r7
 80126e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126e4:	89ab      	ldrh	r3, [r5, #12]
 80126e6:	2b01      	cmp	r3, #1
 80126e8:	d907      	bls.n	80126fa <_fwalk_reent+0x3a>
 80126ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80126ee:	3301      	adds	r3, #1
 80126f0:	d003      	beq.n	80126fa <_fwalk_reent+0x3a>
 80126f2:	4629      	mov	r1, r5
 80126f4:	4630      	mov	r0, r6
 80126f6:	47c0      	blx	r8
 80126f8:	4307      	orrs	r7, r0
 80126fa:	3568      	adds	r5, #104	; 0x68
 80126fc:	e7e9      	b.n	80126d2 <_fwalk_reent+0x12>

080126fe <__retarget_lock_init_recursive>:
 80126fe:	4770      	bx	lr

08012700 <__retarget_lock_acquire_recursive>:
 8012700:	4770      	bx	lr

08012702 <__retarget_lock_release_recursive>:
 8012702:	4770      	bx	lr

08012704 <__swhatbuf_r>:
 8012704:	b570      	push	{r4, r5, r6, lr}
 8012706:	460e      	mov	r6, r1
 8012708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801270c:	2900      	cmp	r1, #0
 801270e:	b096      	sub	sp, #88	; 0x58
 8012710:	4614      	mov	r4, r2
 8012712:	461d      	mov	r5, r3
 8012714:	da07      	bge.n	8012726 <__swhatbuf_r+0x22>
 8012716:	2300      	movs	r3, #0
 8012718:	602b      	str	r3, [r5, #0]
 801271a:	89b3      	ldrh	r3, [r6, #12]
 801271c:	061a      	lsls	r2, r3, #24
 801271e:	d410      	bmi.n	8012742 <__swhatbuf_r+0x3e>
 8012720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012724:	e00e      	b.n	8012744 <__swhatbuf_r+0x40>
 8012726:	466a      	mov	r2, sp
 8012728:	f000 f902 	bl	8012930 <_fstat_r>
 801272c:	2800      	cmp	r0, #0
 801272e:	dbf2      	blt.n	8012716 <__swhatbuf_r+0x12>
 8012730:	9a01      	ldr	r2, [sp, #4]
 8012732:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012736:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801273a:	425a      	negs	r2, r3
 801273c:	415a      	adcs	r2, r3
 801273e:	602a      	str	r2, [r5, #0]
 8012740:	e7ee      	b.n	8012720 <__swhatbuf_r+0x1c>
 8012742:	2340      	movs	r3, #64	; 0x40
 8012744:	2000      	movs	r0, #0
 8012746:	6023      	str	r3, [r4, #0]
 8012748:	b016      	add	sp, #88	; 0x58
 801274a:	bd70      	pop	{r4, r5, r6, pc}

0801274c <__smakebuf_r>:
 801274c:	898b      	ldrh	r3, [r1, #12]
 801274e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012750:	079d      	lsls	r5, r3, #30
 8012752:	4606      	mov	r6, r0
 8012754:	460c      	mov	r4, r1
 8012756:	d507      	bpl.n	8012768 <__smakebuf_r+0x1c>
 8012758:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801275c:	6023      	str	r3, [r4, #0]
 801275e:	6123      	str	r3, [r4, #16]
 8012760:	2301      	movs	r3, #1
 8012762:	6163      	str	r3, [r4, #20]
 8012764:	b002      	add	sp, #8
 8012766:	bd70      	pop	{r4, r5, r6, pc}
 8012768:	ab01      	add	r3, sp, #4
 801276a:	466a      	mov	r2, sp
 801276c:	f7ff ffca 	bl	8012704 <__swhatbuf_r>
 8012770:	9900      	ldr	r1, [sp, #0]
 8012772:	4605      	mov	r5, r0
 8012774:	4630      	mov	r0, r6
 8012776:	f7ff f987 	bl	8011a88 <_malloc_r>
 801277a:	b948      	cbnz	r0, 8012790 <__smakebuf_r+0x44>
 801277c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012780:	059a      	lsls	r2, r3, #22
 8012782:	d4ef      	bmi.n	8012764 <__smakebuf_r+0x18>
 8012784:	f023 0303 	bic.w	r3, r3, #3
 8012788:	f043 0302 	orr.w	r3, r3, #2
 801278c:	81a3      	strh	r3, [r4, #12]
 801278e:	e7e3      	b.n	8012758 <__smakebuf_r+0xc>
 8012790:	4b0d      	ldr	r3, [pc, #52]	; (80127c8 <__smakebuf_r+0x7c>)
 8012792:	62b3      	str	r3, [r6, #40]	; 0x28
 8012794:	89a3      	ldrh	r3, [r4, #12]
 8012796:	6020      	str	r0, [r4, #0]
 8012798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801279c:	81a3      	strh	r3, [r4, #12]
 801279e:	9b00      	ldr	r3, [sp, #0]
 80127a0:	6163      	str	r3, [r4, #20]
 80127a2:	9b01      	ldr	r3, [sp, #4]
 80127a4:	6120      	str	r0, [r4, #16]
 80127a6:	b15b      	cbz	r3, 80127c0 <__smakebuf_r+0x74>
 80127a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80127ac:	4630      	mov	r0, r6
 80127ae:	f000 f8d1 	bl	8012954 <_isatty_r>
 80127b2:	b128      	cbz	r0, 80127c0 <__smakebuf_r+0x74>
 80127b4:	89a3      	ldrh	r3, [r4, #12]
 80127b6:	f023 0303 	bic.w	r3, r3, #3
 80127ba:	f043 0301 	orr.w	r3, r3, #1
 80127be:	81a3      	strh	r3, [r4, #12]
 80127c0:	89a0      	ldrh	r0, [r4, #12]
 80127c2:	4305      	orrs	r5, r0
 80127c4:	81a5      	strh	r5, [r4, #12]
 80127c6:	e7cd      	b.n	8012764 <__smakebuf_r+0x18>
 80127c8:	0801255d 	.word	0x0801255d

080127cc <_malloc_usable_size_r>:
 80127cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80127d0:	1f18      	subs	r0, r3, #4
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	bfbc      	itt	lt
 80127d6:	580b      	ldrlt	r3, [r1, r0]
 80127d8:	18c0      	addlt	r0, r0, r3
 80127da:	4770      	bx	lr

080127dc <_raise_r>:
 80127dc:	291f      	cmp	r1, #31
 80127de:	b538      	push	{r3, r4, r5, lr}
 80127e0:	4604      	mov	r4, r0
 80127e2:	460d      	mov	r5, r1
 80127e4:	d904      	bls.n	80127f0 <_raise_r+0x14>
 80127e6:	2316      	movs	r3, #22
 80127e8:	6003      	str	r3, [r0, #0]
 80127ea:	f04f 30ff 	mov.w	r0, #4294967295
 80127ee:	bd38      	pop	{r3, r4, r5, pc}
 80127f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80127f2:	b112      	cbz	r2, 80127fa <_raise_r+0x1e>
 80127f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80127f8:	b94b      	cbnz	r3, 801280e <_raise_r+0x32>
 80127fa:	4620      	mov	r0, r4
 80127fc:	f000 f830 	bl	8012860 <_getpid_r>
 8012800:	462a      	mov	r2, r5
 8012802:	4601      	mov	r1, r0
 8012804:	4620      	mov	r0, r4
 8012806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801280a:	f000 b817 	b.w	801283c <_kill_r>
 801280e:	2b01      	cmp	r3, #1
 8012810:	d00a      	beq.n	8012828 <_raise_r+0x4c>
 8012812:	1c59      	adds	r1, r3, #1
 8012814:	d103      	bne.n	801281e <_raise_r+0x42>
 8012816:	2316      	movs	r3, #22
 8012818:	6003      	str	r3, [r0, #0]
 801281a:	2001      	movs	r0, #1
 801281c:	e7e7      	b.n	80127ee <_raise_r+0x12>
 801281e:	2400      	movs	r4, #0
 8012820:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012824:	4628      	mov	r0, r5
 8012826:	4798      	blx	r3
 8012828:	2000      	movs	r0, #0
 801282a:	e7e0      	b.n	80127ee <_raise_r+0x12>

0801282c <raise>:
 801282c:	4b02      	ldr	r3, [pc, #8]	; (8012838 <raise+0xc>)
 801282e:	4601      	mov	r1, r0
 8012830:	6818      	ldr	r0, [r3, #0]
 8012832:	f7ff bfd3 	b.w	80127dc <_raise_r>
 8012836:	bf00      	nop
 8012838:	20000180 	.word	0x20000180

0801283c <_kill_r>:
 801283c:	b538      	push	{r3, r4, r5, lr}
 801283e:	4d07      	ldr	r5, [pc, #28]	; (801285c <_kill_r+0x20>)
 8012840:	2300      	movs	r3, #0
 8012842:	4604      	mov	r4, r0
 8012844:	4608      	mov	r0, r1
 8012846:	4611      	mov	r1, r2
 8012848:	602b      	str	r3, [r5, #0]
 801284a:	f7ef ff2f 	bl	80026ac <_kill>
 801284e:	1c43      	adds	r3, r0, #1
 8012850:	d102      	bne.n	8012858 <_kill_r+0x1c>
 8012852:	682b      	ldr	r3, [r5, #0]
 8012854:	b103      	cbz	r3, 8012858 <_kill_r+0x1c>
 8012856:	6023      	str	r3, [r4, #0]
 8012858:	bd38      	pop	{r3, r4, r5, pc}
 801285a:	bf00      	nop
 801285c:	20003228 	.word	0x20003228

08012860 <_getpid_r>:
 8012860:	f7ef bf1c 	b.w	800269c <_getpid>

08012864 <__sread>:
 8012864:	b510      	push	{r4, lr}
 8012866:	460c      	mov	r4, r1
 8012868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801286c:	f000 f894 	bl	8012998 <_read_r>
 8012870:	2800      	cmp	r0, #0
 8012872:	bfab      	itete	ge
 8012874:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012876:	89a3      	ldrhlt	r3, [r4, #12]
 8012878:	181b      	addge	r3, r3, r0
 801287a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801287e:	bfac      	ite	ge
 8012880:	6563      	strge	r3, [r4, #84]	; 0x54
 8012882:	81a3      	strhlt	r3, [r4, #12]
 8012884:	bd10      	pop	{r4, pc}

08012886 <__swrite>:
 8012886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801288a:	461f      	mov	r7, r3
 801288c:	898b      	ldrh	r3, [r1, #12]
 801288e:	05db      	lsls	r3, r3, #23
 8012890:	4605      	mov	r5, r0
 8012892:	460c      	mov	r4, r1
 8012894:	4616      	mov	r6, r2
 8012896:	d505      	bpl.n	80128a4 <__swrite+0x1e>
 8012898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801289c:	2302      	movs	r3, #2
 801289e:	2200      	movs	r2, #0
 80128a0:	f000 f868 	bl	8012974 <_lseek_r>
 80128a4:	89a3      	ldrh	r3, [r4, #12]
 80128a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80128aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80128ae:	81a3      	strh	r3, [r4, #12]
 80128b0:	4632      	mov	r2, r6
 80128b2:	463b      	mov	r3, r7
 80128b4:	4628      	mov	r0, r5
 80128b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80128ba:	f000 b817 	b.w	80128ec <_write_r>

080128be <__sseek>:
 80128be:	b510      	push	{r4, lr}
 80128c0:	460c      	mov	r4, r1
 80128c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128c6:	f000 f855 	bl	8012974 <_lseek_r>
 80128ca:	1c43      	adds	r3, r0, #1
 80128cc:	89a3      	ldrh	r3, [r4, #12]
 80128ce:	bf15      	itete	ne
 80128d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80128d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80128d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80128da:	81a3      	strheq	r3, [r4, #12]
 80128dc:	bf18      	it	ne
 80128de:	81a3      	strhne	r3, [r4, #12]
 80128e0:	bd10      	pop	{r4, pc}

080128e2 <__sclose>:
 80128e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128e6:	f000 b813 	b.w	8012910 <_close_r>
	...

080128ec <_write_r>:
 80128ec:	b538      	push	{r3, r4, r5, lr}
 80128ee:	4d07      	ldr	r5, [pc, #28]	; (801290c <_write_r+0x20>)
 80128f0:	4604      	mov	r4, r0
 80128f2:	4608      	mov	r0, r1
 80128f4:	4611      	mov	r1, r2
 80128f6:	2200      	movs	r2, #0
 80128f8:	602a      	str	r2, [r5, #0]
 80128fa:	461a      	mov	r2, r3
 80128fc:	f7ef ff0d 	bl	800271a <_write>
 8012900:	1c43      	adds	r3, r0, #1
 8012902:	d102      	bne.n	801290a <_write_r+0x1e>
 8012904:	682b      	ldr	r3, [r5, #0]
 8012906:	b103      	cbz	r3, 801290a <_write_r+0x1e>
 8012908:	6023      	str	r3, [r4, #0]
 801290a:	bd38      	pop	{r3, r4, r5, pc}
 801290c:	20003228 	.word	0x20003228

08012910 <_close_r>:
 8012910:	b538      	push	{r3, r4, r5, lr}
 8012912:	4d06      	ldr	r5, [pc, #24]	; (801292c <_close_r+0x1c>)
 8012914:	2300      	movs	r3, #0
 8012916:	4604      	mov	r4, r0
 8012918:	4608      	mov	r0, r1
 801291a:	602b      	str	r3, [r5, #0]
 801291c:	f7ef ff19 	bl	8002752 <_close>
 8012920:	1c43      	adds	r3, r0, #1
 8012922:	d102      	bne.n	801292a <_close_r+0x1a>
 8012924:	682b      	ldr	r3, [r5, #0]
 8012926:	b103      	cbz	r3, 801292a <_close_r+0x1a>
 8012928:	6023      	str	r3, [r4, #0]
 801292a:	bd38      	pop	{r3, r4, r5, pc}
 801292c:	20003228 	.word	0x20003228

08012930 <_fstat_r>:
 8012930:	b538      	push	{r3, r4, r5, lr}
 8012932:	4d07      	ldr	r5, [pc, #28]	; (8012950 <_fstat_r+0x20>)
 8012934:	2300      	movs	r3, #0
 8012936:	4604      	mov	r4, r0
 8012938:	4608      	mov	r0, r1
 801293a:	4611      	mov	r1, r2
 801293c:	602b      	str	r3, [r5, #0]
 801293e:	f7ef ff14 	bl	800276a <_fstat>
 8012942:	1c43      	adds	r3, r0, #1
 8012944:	d102      	bne.n	801294c <_fstat_r+0x1c>
 8012946:	682b      	ldr	r3, [r5, #0]
 8012948:	b103      	cbz	r3, 801294c <_fstat_r+0x1c>
 801294a:	6023      	str	r3, [r4, #0]
 801294c:	bd38      	pop	{r3, r4, r5, pc}
 801294e:	bf00      	nop
 8012950:	20003228 	.word	0x20003228

08012954 <_isatty_r>:
 8012954:	b538      	push	{r3, r4, r5, lr}
 8012956:	4d06      	ldr	r5, [pc, #24]	; (8012970 <_isatty_r+0x1c>)
 8012958:	2300      	movs	r3, #0
 801295a:	4604      	mov	r4, r0
 801295c:	4608      	mov	r0, r1
 801295e:	602b      	str	r3, [r5, #0]
 8012960:	f7ef ff13 	bl	800278a <_isatty>
 8012964:	1c43      	adds	r3, r0, #1
 8012966:	d102      	bne.n	801296e <_isatty_r+0x1a>
 8012968:	682b      	ldr	r3, [r5, #0]
 801296a:	b103      	cbz	r3, 801296e <_isatty_r+0x1a>
 801296c:	6023      	str	r3, [r4, #0]
 801296e:	bd38      	pop	{r3, r4, r5, pc}
 8012970:	20003228 	.word	0x20003228

08012974 <_lseek_r>:
 8012974:	b538      	push	{r3, r4, r5, lr}
 8012976:	4d07      	ldr	r5, [pc, #28]	; (8012994 <_lseek_r+0x20>)
 8012978:	4604      	mov	r4, r0
 801297a:	4608      	mov	r0, r1
 801297c:	4611      	mov	r1, r2
 801297e:	2200      	movs	r2, #0
 8012980:	602a      	str	r2, [r5, #0]
 8012982:	461a      	mov	r2, r3
 8012984:	f7ef ff0c 	bl	80027a0 <_lseek>
 8012988:	1c43      	adds	r3, r0, #1
 801298a:	d102      	bne.n	8012992 <_lseek_r+0x1e>
 801298c:	682b      	ldr	r3, [r5, #0]
 801298e:	b103      	cbz	r3, 8012992 <_lseek_r+0x1e>
 8012990:	6023      	str	r3, [r4, #0]
 8012992:	bd38      	pop	{r3, r4, r5, pc}
 8012994:	20003228 	.word	0x20003228

08012998 <_read_r>:
 8012998:	b538      	push	{r3, r4, r5, lr}
 801299a:	4d07      	ldr	r5, [pc, #28]	; (80129b8 <_read_r+0x20>)
 801299c:	4604      	mov	r4, r0
 801299e:	4608      	mov	r0, r1
 80129a0:	4611      	mov	r1, r2
 80129a2:	2200      	movs	r2, #0
 80129a4:	602a      	str	r2, [r5, #0]
 80129a6:	461a      	mov	r2, r3
 80129a8:	f7ef fe9a 	bl	80026e0 <_read>
 80129ac:	1c43      	adds	r3, r0, #1
 80129ae:	d102      	bne.n	80129b6 <_read_r+0x1e>
 80129b0:	682b      	ldr	r3, [r5, #0]
 80129b2:	b103      	cbz	r3, 80129b6 <_read_r+0x1e>
 80129b4:	6023      	str	r3, [r4, #0]
 80129b6:	bd38      	pop	{r3, r4, r5, pc}
 80129b8:	20003228 	.word	0x20003228

080129bc <_init>:
 80129bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129be:	bf00      	nop
 80129c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129c2:	bc08      	pop	{r3}
 80129c4:	469e      	mov	lr, r3
 80129c6:	4770      	bx	lr

080129c8 <_fini>:
 80129c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129ca:	bf00      	nop
 80129cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129ce:	bc08      	pop	{r3}
 80129d0:	469e      	mov	lr, r3
 80129d2:	4770      	bx	lr
